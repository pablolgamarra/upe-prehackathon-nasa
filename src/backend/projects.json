[
	{
		"Update_Date": "2014-04-15",
		"Description": "CODE is a framework for the control and observation of resources, services, and applications. The technology supports the secure and scalable transmission of observed information to other programs, and it enables the secure execution of actions on remote computer systems. ",
		"Public Code Repo": "https://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "CODE-A Software Framework For Control and Observation In Distributed Environments",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:numerical control",
			"nlp:distributed processing",
			"nlp:information system",
			"nlp:operating systems (computers)",
			"nlp:data transmission",
			"nlp:computer systems design",
			"nlp:dynamic control",
			"nlp:technology utilization",
			"nlp:automatic control",
			"nlp:information management"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14672-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "MST offers a simulation framework to support research in autonomy for remote exploration. The system allows developers to test models in a high-fidelity simulation and then evaluate system performance against a set of integrated, standardized simulations.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Mission Simulation Toolkit (MST)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:autonomy",
			"nlp:mathematical model",
			"nlp:distributed processing",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:dynamic model",
			"nlp:digital simulation",
			"nlp:simulation",
			"nlp:performance prediction",
			"nlp:model"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14932-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Livingstone 2 is a reusable artificial intelligence (AI) software system designed to assist spacecraft, life support systems, chemical plants, or other complex systems in operating robustly with minimal human supervision, even in the face of hardware failures or unexpected events. The technology diagnoses the current state of a spacecraft or other system and recommends commands or repair actions that will allow the system to continue operations. A re-engineered version of the Livingstone diagnosis system that was flight-tested onboard the Deep Space One spacecraft in 1999, Livingstone 2 contains significant enhancements to robustness, performance, and usability. Skunkworks is a suite of software tools that support the rapid deployment of model-based representations of complex systems for Livingstone2 via a visual model builder/tester and two graphical user interface tools that provide status information during testing.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/livingstone2/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Livingstone 2 (System for Automated Diagnosis and Discrete Control of Complex Systems) and Skunkworks (Suite of Supporting Development and Runtime Tools)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:complex system",
			"nlp:failure analysi",
			"nlp:system failure",
			"nlp:artificial intelligence",
			"nlp:software development tool",
			"nlp:life support system",
			"nlp:human-computer interface"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14725-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Java Pathfinder (JPF) is a model checker for Java. The technology takes a Java program and \"executes\" it in a way that explores all possible executions/interleavings of the threads in the program. This allows JPF to detect certain bugs (e.g., deadlocks and assertion violations) that may be missed during testing. ",
		"Public Code Repo": "https://babelfish.arc.nasa.gov/trac/jpf/wiki/install/repositories",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Java Pathfinder (JPF), Version 2.0",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:evaluation",
			"nlp:java (programming language)",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:software reliability",
			"nlp:computer program integrity",
			"nlp:program verification (computers)",
			"nlp:proving",
			"nlp:performance test"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15388-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "CAPO analyzes a Fortran program and inserts OpenMP directives into the code to improve its performance on a parallel machine. The tool relies on accurate inter-procedural data-dependence information currently provided by CAPTools, which was developed at the University of Greenwich.",
		"Public Code Repo": "https://software.nasa.gov/software/ARC-14487-1",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "CAPTools-based Automatic Parallelizer Using OpenMP (CAPO)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:information theory",
			"nlp:computerized simulation",
			"nlp:software development tool",
			"nlp:performance prediction",
			"nlp:compiler",
			"nlp:symbol",
			"nlp:fortran",
			"nlp:parallel programming",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14487-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "SLAB is a software-based, real-time, virtual acoustic-environment rendering system designed to study spatial hearing in environments such as concert halls, listening rooms, virtual reality, aviation spatial information displays, and video game sound effects. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/slab-spatial-audio-renderer/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "System Testing"],
		"Languages": [],
		"Software": "Sound Lab (SLAB), Version 5",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:game theory",
			"nlp:interactive control",
			"nlp:time dependence",
			"nlp:computer graphic",
			"nlp:virtual reality",
			"nlp:display device",
			"nlp:hearing"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14991-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Libibvpp is a C++ wrapper around libibverbs, which is part of the OpenFabrics software suite.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/libibvpp/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Libibvpp",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/ARC-16075-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2020-08-12",
		"Description": "Mariana is an algorithm that efficiently optimizes the hyperparameters for support vector machines for regression and classification. It currently uses simulated annealing for optimization but can be extended to use a variety of stochastic optimization techniques, including Markov Chain Monte Carlo, Sequential Monte Carlo, and genetic algorithms. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mariana/",
		"NASA Center": "ARC",
		"Contributors": ["N/A", "arc-sra-team@mail.nasa.gov", "N/A"],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "Mariana: Text Classification System",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"genetic algorithm",
			"regression analysi",
			"optimization",
			"classification",
			"vectors (mathematics)",
			"simulated annealing",
			"vector analysi",
			"combinatorial analysi",
			"image classification",
			"algorithm"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16070-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "GMP serializes datatypes between XML and ANSI C data structures to support CFD applications. The library currently provides a description of geometric configurations, general moving-body scenarios (prescribed and/or 6-DOF), and control surface settings. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/gmp/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Geometry Manipulation Protocol (GMP) for ComputationalFluid Dynamics (CFD) Applications, Version 1.0",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:c (programming language)",
			"nlp:computerized simulation",
			"nlp:three dimensional body",
			"nlp:topology",
			"nlp:document markup language",
			"nlp:data structure",
			"nlp:library",
			"nlp:configuration management",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15193-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Constellation PRACA I-1 system is a modified version of an open-source, Web-based defect tracking tool called Bugzilla. Bugzilla allows software developers to document and track outstanding bugs in their products; in the Constellation PRACA I-1 system, these core capabilities have been extended to provide the necessary functionality and usability defined in the PRACA processing requirements.",
		"Public Code Repo": "https://software.nasa.gov/software/ARC-16033-1",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Constellation PRACA Extension of the Bugzilla Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:distributed processing",
			"nlp:software reliability",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:program verification (computers)",
			"nlp:world wide web",
			"nlp:data processing",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16033-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "nu-Anomica is an anomaly detector that can run faster than traditional OC-SVMs. The technology can handle large training sets and works with a well-defined target function. The program utilizes the OSU SVMs code (which is a MATLAB version of Lib-SVMs) as the baseline.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/nu-anomica/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "nu-Anomica (Previously Sparse One Class Support Vector Machines (SOC-SVMs))",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:education",
			"nlp:functions (mathematics)",
			"nlp:computer assisted instruction",
			"nlp:computerized simulation",
			"nlp:target recognition",
			"nlp:set theory",
			"nlp:symbol",
			"nlp:fortran",
			"nlp:target acquisition"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16346-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "SequenceMiner was developed to address the problem of detecting and describing anomalies in large sets of high-dimensional symbol sequences. The technology performs unsupervised clustering (grouping) of sequences using the normalized longest common subsequence (LCS) as a similarity measure, followed by a detailed analysis of outliers to detect anomalies. SequenceMiner utilizes a new hybrid algorithm for computing the LCS that has been shown to outperform existing algorithms by a factor of five.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/sequenceminer/",
		"NASA Center": "ARC",
		"Contributors": [
			"arc-sra-team@mail.nasa.gov",
			"arc-sra-team@mail.nasa.gov",
			"N/A"
		],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "SequenceMiner-Anomaly Detection in Large Sets of High-Dimensional Symbol Sequences",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"algorithm",
			"problem solving",
			"symbol",
			"systems analysi",
			"numerical analysi",
			"load distribution (forces)"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/sequenceminer/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "VERVE is a 3D visualization system that provides situational awareness, science analysis tools, and data understanding capabilities for robotics researchers and exploration science operations. The technology is highly modular and extensible and includes a 3D scene-graph database, an interactive 3D viewer, and associated graphical user interfaces to OSGI plugin-based applications.",
		"Public Code Repo": "https://sourceforge.net/p/irg-verve/wiki/VERVE%20Wiki%20Home/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Visual Environment for Remote Virtual Exploration (VERVE), Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphical user interface",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:robotic",
			"nlp:scene analysi",
			"nlp:scientific visualization",
			"nlp:graphs (charts)",
			"nlp:human-computer interface",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16457-1A",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "NGT is a collection of automated processing tools that can transform raw geospatial raster data from remote sensing instruments into useful cartographic products, including visible image base maps and topographic models. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Neo-Geography Toolkit (NGT), Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:digital technique",
			"nlp:digital data",
			"nlp:remote sensing",
			"nlp:relief map",
			"nlp:geometric rectification (imagery)",
			"nlp:mapping",
			"nlp:data processing",
			"nlp:map",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16341-1A",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "IKOS is a kernel for the construction of open-static analyzers based on Patrick Cousot and Radhia Cousot's theory of abstract interpretation, which states that computations can be abstracted and reduced to a generalized set of objects and still exhibit the same critical properties of the parent program. By reducing the set of objects through abstraction, IKOS is scalable to large complex computer programs and presents a sound approach to verification of such programs. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/ikos/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Inference Kernel for Open Static (IKOS) Analyzers: A High-Performance Static Analysis Engine to Build Automated Code Analysis Tools for the Formal Verification of Critical Software Properties",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:computerized simulation",
			"nlp:object-oriented programming",
			"nlp:automata theory",
			"nlp:program verification (computers)",
			"nlp:mathematical logic",
			"nlp:set theory",
			"nlp:kernel function",
			"nlp:concurrent processing",
			"nlp:algebra"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16789-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "RAPID is a software reference implementation framework for remote operations. The technology promotes interoperability between robot software modules and includes a standard programming interface and data distribution middleware. RAPID facilitates integration of experimental robot software modules created by a distributed development team; improves the compatibility and reusability of robotic functions; and offers speed prototype robot development in a wide range of configurations and environments.",
		"Public Code Repo": "https://rapid.nasa.gov/index.html",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Robot Application Programming Interface Delegate (RAPID), Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:distributed processing",
			"nlp:human-computer interface",
			"nlp:interoperability",
			"nlp:robotic",
			"nlp:robot",
			"nlp:programming environment",
			"nlp:high speed",
			"nlp:prototype",
			"nlp:graphical user interface"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16368-1A",
		"creator": "maya@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-11-05",
		"Description": "PathDroid is an extension of the open sourced Java Pathfinder (JPF) verification framework that supports checking binary Android applications for absence of software defects such as unhandled exceptions and deadlocks.\r\nPathDroid let users run such applications on development platforms, without the need for hardware-in-the-loop or availability of sources.\r\n",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/pathdroid/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "System Testing"],
		"Languages": [],
		"Software": "PathDroid",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:c (programming language)",
			"nlp:software reliability",
			"nlp:hardware description language",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:proving",
			"nlp:hardware",
			"nlp:human-computer interface",
			"nlp:computer systems performance",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17293-1",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2020-08-12",
		"Description": "Block GP is a Gaussian Process regression framework for multimodal data, that can be an order of magnitude more scalable than existing state-of-the-art nonlinear regression algorithms. The framework builds local Gaussian Processes on semantically meaningful partitions of the data and provides higher prediction accuracy than a single global model with very high confidence. The method relies on approximating the covariance matrix of the entire input space by smaller covariance matrices that can be modeled independently, and\r\ncan therefore be parallelized for faster execution. \r\n",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/block-gp/",
		"NASA Center": "ARC",
		"Contributors": [
			"K. Bhaduri",
			"N/A",
			"N/A",
			"Q. Zhu",
			"N/A",
			"N/A",
			"N. Oza",
			"N/A",
			"N/A",
			"A. Srivastava",
			"N/A",
			"N/A"
		],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing",
			"usg-artificial-intelligence",
			"Gaussian",
			"multimodal",
			"Regression"
		],
		"Languages": [],
		"Software": "Scalable Gaussian Process Regression",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"covariance",
			"regression analysi",
			"matrices (mathematics)",
			"algorithm",
			"matrix theory",
			"prediction analysis technique",
			"mathematical model",
			"statistical analysi",
			"state vector",
			"multivariate statistical analysi"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16864-1",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-05",
		"Description": "Java Pathfinder core system (jpf-core), is a model checker for Java bytecode. The technology takes a binary Java program and executes it in a user configurable way to detect defects such as deadlocks and unhandled exceptions, providing significantly higher confidence in correct program behavior than conventional testing.",
		"Public Code Repo": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-core",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Java Pathfinder (JPF) core system",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:program verification (computers)",
			"nlp:systems engineering",
			"nlp:confidence limit",
			"nlp:performance test",
			"nlp:model",
			"nlp:computer systems performance",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17487-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "Decision trees are commonly used in artificial intelligence and statistical pattern recognition. A tree is \"grown\" from data using a recursive-partitioning algorithm. IND re-implements parts of existing standard prediction algorithms, offers experimental control suites, and also introduces new, more sophisticated methods for growing decision trees.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/ind/",
		"NASA Center": "ARC",
		"Contributors": [
			"arc-sra-team@mail.nasa.gov",
			"arc-sra-team@mail.nasa.gov",
			"N/A"
		],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling",
			" usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "IND 2.1-Creation and Manipulation of Decision Trees from Data",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"trees (mathematics)",
			"pattern recognition",
			"decision theory",
			"artificial intelligence",
			"algorithm",
			"prediction analysis technique",
			"decision making",
			"prediction",
			"machine learning",
			"data acquisition"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14529-1",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-03-05",
		"Description": "JPF-NAS is developed to provide support for model checking distributed applications.   It relies on the multiprocess support included in Java Pathfinder (JPF) which provides basic functionality to verify the bytecode of distributed applications. JPF-NAS is implemented as a JPF extension which models interprocess communication mechanisms. It uses a form of partial order reduction to explore all possible executions of a distributed Java application. Moreover, JPF-NAS provides a functionality to check the given distributed application under test against possible network failures which can occur at the operating system or the hardware layer.",
		"Public Code Repo": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-nas",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "System Testing"],
		"Languages": [],
		"Software": "JPF-NAS, an extension of Java Pathfinder that provides support for model checking distributed systems",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:interprocessor communication",
			"nlp:distributed processing",
			"nlp:operating systems (computers)",
			"nlp:response time (computers)",
			"nlp:mathematical model",
			"nlp:network analysi",
			"nlp:failure analysi",
			"nlp:system failure",
			"nlp:computer network",
			"nlp:communication network"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17301-1",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-05",
		"Description": "MFS (Multi-Fidelity Simulator) is a pluggable framework for creating an air traffic flow simulator at multiple levels of fidelity. The framework is designed to allow low-fidelity simulations of the entire US Airspace to be completed very quickly (on the order of seconds). The framework allows higher-fidelity plugins to be added to allow higher-fidelity simulations to occur in certain regions of the airspace concurrently with the low-fidelity simulation of the full airspace.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mfsim/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "MFSim - Multi-fidelity Simulation",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:air traffic control",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:air traffic",
			"nlp:simulation",
			"nlp:airspace",
			"nlp:simulator",
			"nlp:traffic"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17449-1",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Surfer examines the pool of potential grid resources and extracts the highest-ranking resources that meet user-specified constraints and preferences. The technology has been implemented as a grid service that is compliant with an Open Grid Services Infrastructure (OGSI), and it can also be embedded directly into Java applications through its application programming interface or into non-java applications through its XML-based command-line interface.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/surfer/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Surfer: An Extensible Pull-Based Framework For Resource Selection and Ranking",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphical user interface",
			"nlp:interactive control",
			"nlp:computational grid",
			"nlp:document markup language",
			"nlp:on-line system",
			"nlp:resource allocation",
			"nlp:command and control",
			"nlp:interface",
			"nlp:human-computer interface",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15295-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Pour is a general-purpose information service framework for periodic, on-demand, and user-specified information reconciliation. The technology is designed to accommodate a wide variety of information types with support for high-volume, low-frequency periodic updates, user-specified updates, and automatic updates collected on demand when needed. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/pour/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Pour: A Framework for Periodic, On-Demand, and User-Specified Information Reconciliation",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:human-computer interface",
			"nlp:information system",
			"nlp:information retrieval",
			"nlp:computer network",
			"nlp:management information system",
			"nlp:technology assessment",
			"nlp:information management",
			"nlp:data base",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15468-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Swim is a software information service for the grid built on top of the NASA-developed Pour framework. Software information is periodically gathered from native package managers on FreeBSD, Solaris, and IRIX as well as the RPM, Perl, and Python package managers on multiple platforms. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/swim/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Swim: A Software Information Metacatalog for the Grid",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:personnel",
			"nlp:information system",
			"nlp:computerized simulation",
			"nlp:computational grid",
			"nlp:software development tool",
			"nlp:industrial management",
			"nlp:management information system",
			"nlp:information management",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15469-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Ballast is a tool for balancing user load across Secure Shell Handler (SSH) servers. The system includes a load-balancing client, a lightweight data server, scripts for collecting system load, and scripts for analyzing user behavior. Because Ballast is invoked as part of the SSH login process, it has access to user names. This capability, which is not available in traditional approaches, enables Ballast to perform user-specific load balancing. In addition, Ballast is easy to install, induces near-zero overhead, and has fault-tolerant features in its architectures that will eliminate single points of failure.",
		"Public Code Repo": "https://github.com/pkolano/ballast",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Ballast: Balancing Load Across Systems",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:fault tolerance",
			"nlp:distributed processing",
			"nlp:response time (computers)",
			"nlp:failure",
			"nlp:failure analysi",
			"nlp:system failure",
			"nlp:computer systems design",
			"nlp:loads (forces)",
			"nlp:architecture (computers)"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16443-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Dyper protects a site from unauthorized network flows. The tool offers dynamic perimeter enforcement by providing a general-purpose mechanism for maintaining least-privilege network security policies while still supporting the full utilization of multiport protocols. Dyper requires no changes to software or practices outside of the perimeter and only minimal changes inside.",
		"Public Code Repo": "https://sourceforge.net/projects/dyper/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Dyper: Dynamic Perimeter Enforcement",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:distributed processing",
			"nlp:information flow",
			"nlp:network analysi",
			"nlp:security",
			"nlp:policy",
			"nlp:computer network",
			"nlp:network",
			"nlp:computer information security",
			"nlp:access control"
		],
		"External Link": "https://software.nasa.gov/software/ARC-16444-1",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "JavaGenes is a genetic algorithm code written in Java. It evolves graphs using genetic software techniques and has applications in designing drugs, circuits, or any other system that is easily represented by graphs. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "JavaGenes Genetic Graphs",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:electric network",
			"nlp:integrated circuit",
			"nlp:graph theory",
			"nlp:combinatorial analysi",
			"nlp:circuit",
			"nlp:symbol",
			"nlp:algorithm",
			"nlp:graphs (charts)"
		],
		"External Link": "https://software.nasa.gov/software/ARC-14293-1",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "JavaGenes-Scheduler is a general purpose evolutionary system designed to compare techniques for scheduling observations. It was originally developed for scheduling observations made by Earth-observing satellites. JavaGenes-Scheduler uses a simple, earliest-first scheduler to insert observations into the timeline in permutation order.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "JavaGenes-Scheduler: Evolutionary Software for Earth Observing Satellite Scheduling",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:observability (systems)",
			"nlp:operating systems (computers)",
			"nlp:scheduling",
			"nlp:dynamical system",
			"nlp:satellite imagery"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15103-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-07-07",
		"Description": "Open MCT is an open source and web-based mission control framework for visualization of data on desktop and mobile devices. Open MCT is designed for analysis, visualization, operation, and support of spacecraft missions. Open MCT provides an extensible plugin system allowing it to be integrated with existing ground systems, and adapted to support multiple missions as well as non-space applications.",
		"Public Code Repo": "https://github.com/nasa/openmct/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Operations"],
		"Languages": [],
		"Software": "Open Mission Control Technologies (Open MCT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:mission planning",
			"nlp:data acquisition",
			"nlp:interactive control",
			"nlp:large space structure",
			"nlp:onboard data processing",
			"nlp:remote control",
			"nlp:computer systems design",
			"nlp:scientific visualization",
			"nlp:personal computer"
		],
		"External Link": "https://software.nasa.gov/software/ARC-15256-1D",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-11-12",
		"Description": "The X-Plane Connect Toolbox enables users to receive real-time information on one or more simulated vehicles state from the X-Plane flight simulator, and control vehicles running in the X-Plane simulation environment. The toolbox can be used to record simulated flight data, visualize flight profiles, create out-the-window visuals, test autopilots, and test control algorithms. Additionally, the toolbox enables the display of ghost traffic flying predefined flight paths in the simulated airspace, and the visualization of flight plans in the form of waypoints. The toolbox allows custom built or third party autopilot programs to interface with X-Plane through MATLAB, C, C++, Java, or Python . Code examples are included in the open source distribution. The toolbox uses a network communication protocol, allowing X-Plane and the client program to run on different computers.",
		"Public Code Repo": "https://github.com/nasa/XPlaneConnect/",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "X-Plane Communication Toolbox (XPC)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:flight path",
			"nlp:air traffic control",
			"nlp:flight plan",
			"nlp:real time operation",
			"nlp:computerized simulation",
			"nlp:computer graphic",
			"nlp:communication network",
			"nlp:flight simulation",
			"nlp:display device",
			"nlp:algorithm"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17185-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-03-14",
		"Description": "In the analysis of radiation, it is helpful to be able to predict the heat transfer rate and the spectral distribution of the emitted energy. Presented here is a set of routines written in Microsoft Visual Basic for Applications (VBA) and incorporating functions specific to Microsoft Excel that are useful for predicting the radiative behavior of heated surfaces. These routines include functions for calculating important engineering quantities of primary importance to engineers and scientists such as radiative flux and spectral distributions. In addition, the routines also provide the capability to use such information to determine surface temperatures from spectral intensities and for calculating the sensitivity of these temperature measurements to unknowns in the input parameters.",
		"Public Code Repo": "https://software.nasa.gov/software/DRC-015-017",
		"NASA Center": "DFRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"DFRC",
			"Open Source",
			"Materials and Processes"
		],
		"Languages": [],
		"Software": "Blackbody VBA Excel Functions",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:heat flux",
			"nlp:thermal radiation",
			"nlp:radiant flux density",
			"nlp:temperature measurement",
			"nlp:measuring instrument",
			"nlp:heat transfer coefficient",
			"nlp:transient heating",
			"nlp:surface temperature",
			"nlp:heat transfer",
			"nlp:radiative heat transfer"
		],
		"External Link": "https://software.nasa.gov/software/DRC-015-017",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-07-12",
		"Description": "This is an easy-to-use MATLAB based finite element modeling and simulation tool for aeroservoelastic analysis of rectangular wings with trailing-edge control surfaces. It includes a tutorial on structural finite element modeling (FEM_Tutorial.m) using elements such as 12 DOF plates and 6 DOF beams. The aero tutorial (DLM_VLM_Tutorial.m) shows how to code doublet lattice and vortex lattice, with symmetry capability. Together the finite element and aero tutorials can be used to compare to experimental studies such as ground vibration testing, cantilever beam analysis, as well as wind tunnel testing. The primary code, EZASE.m, links structures and aero together in a commented way to produce a wing in flutter which can be controlled. The wing may include control surfaces or they can be excluded. A state space model with control surface inputs and accelerometer outputs can be produced. This model is used to design a PID control system and is tested using margin studies and pole plots. Other visualization methods such as V-g plots determined using the K-method are also included. The code is commented for Graduate and Undergraduate students of aeroservoelasticity who want to know the basic concepts of medium fidelity aeroservoelastic modeling. Not all methods are coded to industry standards. But students of the field including practicing engineers may find it useful for basic understanding; theoretical manuals for industry level codes tend to leave out many of the coding details. All of the details of the code are open sourced here and most of it is referenced at the top of the file to its source paper or book section. Two AIAA publications with one focusing on V&V with experimental wind tunnel test and ground vibration test data are also included.",
		"Public Code Repo": "https://software.nasa.gov/software/DRC-014-036",
		"NASA Center": "DFRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "DFRC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "EZASE  Easy Aeroservoelasticity",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:flutter",
			"nlp:wind tunnel test",
			"nlp:ground test",
			"nlp:aeroelasticity",
			"nlp:aircraft model"
		],
		"External Link": "https://software.nasa.gov/software/DRC-014-036",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-10-30",
		"Description": "Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA)\r\n\r\nThe Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA) is a tool, developed in the Mathworks(R) Matlab/Simulink enviornment, intended to extend systems analysis by providing an estimate of the transient performance/capability of a conceptual engine design.  The TTECTrA tool is capable of designing a basic turbofan engine controller, with transient protection, based on the user's engine model and constraints.  TTECTrA is built in the Mathworks Matlab/Simulink environment and relies on the Matlab Control Systems Toolbox to provide additional functionality and streamline the control design process.",
		"Public Code Repo": "https://github.com/nasa/TTECTrA",
		"NASA Center": "GRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GRC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:feedback control",
			"nlp:controller",
			"nlp:systems analysi",
			"nlp:turbofan engine",
			"nlp:engine control",
			"nlp:control systems design",
			"nlp:turbine engine"
		],
		"External Link": "https://software.nasa.gov/software/LEW-19177-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-03-22",
		"Description": "Photographic gallery type application containing imagery and descriptions from the GRC image archive. Photos and data cover the period from 1941-1979.  The software has been compiled and bundled as an iOS app for the iPad and intended for release through the Apple App Store.",
		"Public Code Repo": "https://www.nasa.gov/centers/glenn/multimedia/grchistory.html",
		"NASA Center": "GRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GRC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "NASA Glenn Research Center: The Early Years for iPad",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:imaging technique",
			"nlp:remote sensing",
			"nlp:measuring instrument",
			"nlp:medical equipment",
			"nlp:software development tool",
			"nlp:imagery",
			"nlp:radar imagery",
			"nlp:image analysi",
			"nlp:satellite imagery",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/LEW-18993-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-03-22",
		"Description": "Augmented reality application intended to highlight NASA Glenn's research efforts in the area of flywheel energy storage systems.  The app utilizes a printed optical target, available on the GRC Flywheel Program brochure and through the NASA Glenn web portal, to present users with 3D views of flywheel hardware and space applications.  Additional video and imagery are also inlcuded in the application package. The software has been compiled and bundled as an iOS app for the iPad and intended for release through the Apple App Store.",
		"Public Code Repo": "https://www.nasa.gov/centers/glenn/multimedia/applied_science/flywheel",
		"NASA Center": "GRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GRC", "Open Source", "Propulsion"],
		"Languages": [],
		"Software": "NASA Flywheel for iPad",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:research project",
			"nlp:computer storage device",
			"nlp:flywheel",
			"nlp:computer graphic",
			"nlp:imagery",
			"nlp:target",
			"nlp:virtual reality",
			"nlp:solar energy",
			"nlp:technology utilization",
			"nlp:energy storage"
		],
		"External Link": "https://software.nasa.gov/software/LEW-19133-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Hierarchical Data Format Earth Observing System (HDF-EOS) Data Extractor (HEEX) is a tool that enables users to extract HDF-EOS data to binary or ASCII data formats in HTML or XML index. The software can be used for both HDF-EOS2 and HDF-EOS5, and it automatically recognizes the two formats.",
		"Public Code Repo": "https://software.nasa.gov/software/GSC-15011-1",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Hierarchical Data Format Earth Observing System (HDF-EOS)Data Extractor (HEEX)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:software development tool",
			"nlp:document markup language",
			"nlp:data structure",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15009-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "PARAMESH offers parallel support with adaptive mesh capability for a large class of models on distributed memory machines. This package of Fortran 90 subroutines provides an application developer with an easy route to extend an existing serial code using a logically Cartesian structured mesh into a parallel code with adaptive mesh refinement.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Parallel Adaptive Mesh Refinement Library (PARAMESH)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data processing equipment",
			"nlp:computer storage device",
			"nlp:computerized simulation",
			"nlp:computational grid",
			"nlp:memory (computers)",
			"nlp:subroutine",
			"nlp:cartesian coordinate",
			"nlp:fortran",
			"nlp:symbol",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14626-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "TIPSOD is a software application designed for interactive, animated, 4D (space and time) visualization of satellite orbits. The technology is implemented in Java 3D and is an extension to the existing Satellite Situation Center Web (SSCWeb) 2D static orbit graphics. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Tool For Interactive Plotting, Sonification, and 3D Orbit Display (TIPSOD)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:information system",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:satellite orbit",
			"nlp:scientific visualization",
			"nlp:virtual reality",
			"nlp:technology utilization",
			"nlp:three dimensional model"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14732-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The MATLAB-Zemax toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Zemax optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at: http://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "MATLAB-Zemax Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:mathematical model",
			"nlp:interactive control",
			"nlp:software development tool",
			"nlp:man machine system",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:support system",
			"nlp:data reduction",
			"nlp:model"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15151-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "ALIAS supports radiometric and geometric multispectral image processing for the Advanced Land Imager (ALI) instrument onboard NASA's Earth Observing-1 (EO-1) satellite. The radiometric subsystem characterizes and (where possible) corrects: detector operability; gain; bias; coherent, impulse, and random noise; signal-to-noise ratios; saturation levels; striping and banding; and the stability of detector performance. Geometric processing functions support sensor alignment calibrations; sensor chip assembly alignments; modulation transfer function characterizations; image-to-image characterizations; and geodetic accuracy assessments. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/Alias/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Alias/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Advanced Land Image Assessment System (ALIAS)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:calibrating",
			"nlp:earth observations (from space)",
			"nlp:measuring instrument",
			"nlp:remote sensor",
			"nlp:radiometric correction",
			"nlp:satellite imagery",
			"nlp:signal processing",
			"nlp:satellite instrument",
			"nlp:satellite-borne instrument",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15185-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The CDAWeb software and the CDAWeb service built on this software have been developed and continue to be enhanced and maintained by the Space Physics Data Facility. The technology has supported NASA/Office of Space Science programs dealing with the connections between the Sun and the Earth. CDAWeb software is essentially a set of Interactive Data Language (IDL) scripts that act as the engine of the system. Please visit: http://cdaweb.gsfc.nasa.gov/cdaweb/istp_public/",
		"Public Code Repo": "https://cdaweb.gsfc.nasa.gov/about.html",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Coordinated Data Analysis Workshop Web (CDAWeb)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:sun",
			"nlp:earth atmosphere",
			"nlp:solar system",
			"nlp:aerospace science",
			"nlp:nasa program",
			"nlp:solar terrestrial interaction",
			"nlp:space exploration",
			"nlp:research and development",
			"nlp:solar physic"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14292-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Earth Observing System Clearing House (ECHO) affords the earth science community more flexibility in accessing and sharing data and services. As a metadata clearinghouse, ECHO supports iterative query data access. As a service broker, ECHO decentralizes data-manipulation tools and supports the interoperability of distributed functions. For more information, please visit: http://ti.arc.nasa.gov/opensource/projects/echo/",
		"Public Code Repo": "https://api.echo.nasa.gov/legacy-services/apis.html",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Earth Observing System (EOS) Clearing House (ECHO)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:data system",
			"nlp:data base management system",
			"nlp:data management",
			"nlp:information system",
			"nlp:remote sensing",
			"nlp:information retrieval",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14726-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "These Web services provide a distributed programming interface to a portion of the Space Physics Data Facility (SPDF) software. The technology conforms to all applicable Web service specifications of the World Wide Web Consortium. Please visit the following URL for additional information: http://spdf.gsfc.nasa.gov/",
		"Public Code Repo": "ftp://spdf.gsfc.nasa.gov/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Space Physics Data Facility (SPDF) Web Services",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:specification",
			"nlp:aerospace science",
			"nlp:information system",
			"nlp:interactive control",
			"nlp:computer systems design",
			"nlp:interface",
			"nlp:world wide web",
			"nlp:technology assessment",
			"nlp:human-computer interface",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14730-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The WindowsEQFlux computer program converts solar-cell damage resulting from hard-particle radiation into the equivalent fluence on MeV electrons. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "General EQFlux",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:computer storage device",
			"nlp:computerized simulation",
			"nlp:information system",
			"nlp:radiation effect",
			"nlp:radiation belt",
			"nlp:solar cell",
			"nlp:fortran",
			"nlp:electron",
			"nlp:computer design"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14791-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Earth Observing System Data Gateway (EDG) provides the earth science community with a single interface that will search for data granules from distributed data archives. The innovation enables users to explore, discover, and order available data from geographically distributed providers. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/edg/index.php#software",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/edg/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Earth Observing System (EOS) Data Gateway (EDG)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:information dissemination",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:data storage",
			"nlp:data processing",
			"nlp:human-computer interface",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14938-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "S4PM is a set of Perl scripts that implement a data-driven processing system that executes science algorithms automatically as new data arrive. S4PM includes a graphical user interface for monitoring algorithms and the overall system for failures. The Perl scripts can currently process data from the Moderate Resolution Imaging Spectroradiometer and the Atmospheric Infrared Sounder, but the technology can be extended to process data from other missions if desired. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/s4pm/",
		"Public Code Repo": "https://sourceforge.net/projects/s4pm",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GSFC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Simple, Scalable, Script-Based Science Processor for Missions (S4PM)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:multisensor application",
			"nlp:data management",
			"nlp:information system",
			"nlp:imaging technique",
			"nlp:human-computer interface",
			"nlp:high resolution",
			"nlp:algorithm",
			"nlp:data processing",
			"nlp:graphical user interface"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14841-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This software program takes an XML representation of the contents of a Hierarchical Data Format-Earth Observing System (HDF-EOS) file and recreates the file from that description. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "XML to HDF-EOS Convertor",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:data management",
			"nlp:information system",
			"nlp:data storage",
			"nlp:document markup language",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15017-1",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This Java-language software plug-in to HDFView provides an interface for two versions of hierarchical data formats (HDF 4 and HDF 5). Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/HDF/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "HDFView Plugin",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:programming language",
			"nlp:information management",
			"nlp:management information system",
			"nlp:interface",
			"nlp:data processing",
			"nlp:human-computer interface",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-14948-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "NASA.rb (formerly fUnit) is a collection of Fortran modules that provide a framework for automating the construction, execution, and reporting of unit tests for Fortran software applications. Support is provided for several aspects of unit testing that are peculiar to scientific technical computing including distributing jparallel applications and parameterized behavior.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/FUNIT/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "NASA.rb (formerly fUnit)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:evaluation",
			"nlp:distributed processing",
			"nlp:data acquisition",
			"nlp:software reliability",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:computer systems design",
			"nlp:support system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15137-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "NFMW reads weather forecast models outputs; subsets the data to the region of interest; interpolates the data to the specified size; generates a visualization of the data using colors, contour lines, or arrows; and sends the visualization to the client. More information can be found at: http://opensource.gsfc.nasa.gov/projects/NFMW/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "NASA Forecast Model Web (NFMW) Map Service",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:dynamic model",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:weather forecasting",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:data processing",
			"nlp:numerical weather forecasting",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15276-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Oslo optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at http://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "MATLAB-Oslo Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:mathematical model",
			"nlp:interactive control",
			"nlp:software development tool",
			"nlp:man machine system",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:support system",
			"nlp:data reduction",
			"nlp:model"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15138-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The User-friendly Metadata (UFM) tool functions as a filter. The tool accepts an ODL file as input and generates a simple HTML representation of the ODL as output. Command-line options provide a user with the ability to modify the program's functionality. Please visit: http://opensource.gsfc.nasa.gov/projects/UFM/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/UFM/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "User-Friendly Metadata",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:functions (mathematics)",
			"nlp:user manuals (computer programs)",
			"nlp:data management",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:command and control",
			"nlp:digital filter",
			"nlp:human-computer interface",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15014-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This software allows generators of HDF-EOS data products to encode product requirement specifications in XML. The tool will then mechanically check product files against those requirements. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/Validator/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Validator/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "HDF-EOS5 Validator",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:specification",
			"nlp:information system",
			"nlp:software development tool",
			"nlp:document markup language",
			"nlp:functional design specification",
			"nlp:standard",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data base",
			"nlp:management information system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15015-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "HDF-EOS Metadata Updater (HEMU) enables users to modify metadata inside an HDF-EOS file (either HDF-EOS2 and HDF-EOS5). The tool can be used to extract metadata from a dataset to a text file that can then be modified with any text editor; replace metadata with text from an external file; or update metadata with text from an external file. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/hemu/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hemu/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) Metadata Updater (HEMU)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:data management",
			"nlp:information system",
			"nlp:human-computer interface",
			"nlp:information retrieval",
			"nlp:file maintenance (computers)",
			"nlp:information management",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15010-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "An XML standard has been developed for the HDF-EOS5 file format using document-type definitions and schemas. Users can transform HDF5 files into XML format and vice versa. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) XML Document-Type Definitions and Schemas",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:document",
			"nlp:information system",
			"nlp:document markup language",
			"nlp:information retrieval",
			"nlp:data structure",
			"nlp:standard",
			"nlp:file maintenance (computers)",
			"nlp:information management",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15016-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This shell script chains together existing data usability group tools to: extract ODL metadata from an HDF-EOS file; convert the metadata to XML; reformat the XML into HTML; publish the HTML and the original HDF-EOS file to a Web server and an OPeNDAP server; and reformat the XML and submit it to the Earth Observing System Clearing House (ECHO). For more information, please visit: http://opensource.gsfc.nasa.gov/projects/heserve/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/heserve/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) Web Server",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:document markup language",
			"nlp:information retrieval",
			"nlp:management information system",
			"nlp:world wide web",
			"nlp:file maintenance (computers)",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15011-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This command-line Java-based utility converts ODL Hierarchical Data Format-Earth Observing Satellite (HDFEOS) metadata file to an HDFEOS XML file. The tool utilizes an all-Java ODL library that includes a syntax and grammar parser. The software can be downloaded at: http://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "ODL-to-XML Converter",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:software development tool",
			"nlp:document markup language",
			"nlp:on-line system",
			"nlp:grammar",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:satellite imagery",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15013-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This C-language computer program accepts a set of scientific data/metadata from an Earth Observing System (EOS) satellite and converts it from the format in which it was created and delivered into another format for data processing and exchange on Earth. The converter can be downloaded at: http://www.hdfeos.org/software/convert_hdfeos5.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Hierarchical Data Format-Earth Observing System (HDF-EOS) to NetCDF Converter",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:data system",
			"nlp:airborne/spaceborne computer",
			"nlp:c (programming language)",
			"nlp:data management",
			"nlp:programming language",
			"nlp:language",
			"nlp:computer systems design",
			"nlp:data processing",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15007-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Designed to support a prototype validation network for the Global Precipitation Measurement (GPM) spaceflight mission, this space and ground radar comparison software collects data from the Precipitation Radar instrument flying on the Tropical Rainfall Measuring Mission (TRMM) spacecraft. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/GPM/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPM/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Global Precipitation Space and Ground Radar Comparison Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:airborne/spaceborne computer",
			"nlp:mission planning",
			"nlp:remote sensing",
			"nlp:onboard data processing",
			"nlp:measuring instrument",
			"nlp:neural net",
			"nlp:prototype",
			"nlp:telemetry",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15469-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "GEOS-5 is a next-generation circulation model. Developed using the Earth System Modeling Framework (ESMF) for its internal architecture, the technology represents a new paradigm for systems development. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/GEOS-5/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "GEOS-5 Global Change Master Modeling Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:atmospheric model",
			"nlp:dynamic model",
			"nlp:mathematical model",
			"nlp:atmospheric circulation",
			"nlp:information system",
			"nlp:earth environment",
			"nlp:geographic information system",
			"nlp:earth (planet)",
			"nlp:technology assessment",
			"nlp:model"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15354-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Code V optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses such as ray tracing or generation of point-spread functions in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at: http://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "MATLAB-Code V Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:model",
			"nlp:mathematical model",
			"nlp:neurophysiology",
			"nlp:man machine system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15140-1",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This program translates an XML representation of Hierarchical Data Format-Earth Observing System (HDF-EOS) ODL metadata back to the ODL format. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "XML to ODL Convertor",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:data management",
			"nlp:information system",
			"nlp:data storage",
			"nlp:information retrieval",
			"nlp:management information system",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15006-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "GMAT is a software system for trajectory optimization, mission analysis, trajectory estimation, and prediction. Analysts use GMAT to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission&apos;s trade space. GMAT contains models of real-world objects such as spacecraft and thrusters, as well as analysis \"objects\" such as plots and reports. These objects are used in the mission sequence wherein the user employs commands supported by the system to model missions and perform estimation. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/GMAT/index.php",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2011a",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT), Version 2011A",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:trajectory",
			"nlp:mission planning",
			"nlp:parameter identification",
			"nlp:software development tool",
			"nlp:prediction analysis technique",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:trajectory optimization",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16228-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-05",
		"Description": "The ut-assert unit test tools provide a unit test framework and a collection of utilities that are designed to facilitate unit testing. These tools implement an assertion-based testing philosophy that requires the developer to explicitly write verification statements that assert whether a condition is true or false.  This approach is much different than the Flight Software Branch's historical approach to unit testing that creates a log file that requires developer analysis in order to determine whether a test passed or failed. In order to use the tools a developer populates the framework with their unit tests and links with the ut-asssert library to create an executable. ",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Assert-Based Unit Test Tools",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:electronic equipment test",
			"nlp:automatic test equipment",
			"nlp:software reliability",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:flight control",
			"nlp:performance test",
			"nlp:library"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16689-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-05",
		"Description": "This software interface provides a social and collaborative environment to allow end-users such as GEOSS users to discover, visualize, and access Earth Science information on demand from simple browsers and allow them to share the resulting products with their friends and/or Community of Interest through social networks.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/gsca/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Open GeoSocial Consumer Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:user requirement",
			"nlp:information dissemination",
			"nlp:graphical user interface",
			"nlp:information system",
			"nlp:information management",
			"nlp:computer network",
			"nlp:human-computer interface",
			"nlp:access control"
		],
		"External Link": "https://software.nasa.gov/software/GSC-17162-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The SBN serves as a plug-in to the cFE framework to transfer messages across process/processor interfaces. The technology has three primary functions: to establish and maintain a connection to each peer over available process/processor interfaces; to distribute and maintain a subscription message database for each peer; and to distribute messages to peers that have subscribed to message identifiers.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-sbn",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Software Bus Network (SBN) Application, Version 1.0",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:functions (mathematics)",
			"nlp:message processing",
			"nlp:distributed processing",
			"nlp:interprocessor communication",
			"nlp:central processing unit",
			"nlp:interface",
			"nlp:computer component",
			"nlp:technology assessment",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16917-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-05",
		"Description": "This capability allows for the generation of vectors by reading the Global Flood Monitoring data, processing the data and generating aTopoJSON encoded file for visualization on the web.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/vgfms/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Vectorization of Global Flood Monitoring System using Topojson",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:vectors (mathematics)",
			"nlp:flood",
			"nlp:data structure",
			"nlp:scientific visualization",
			"nlp:world wide web",
			"nlp:file maintenance (computers)",
			"nlp:data reduction",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-17169-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The CFDP application provides the capability to transmit and receive files to/from the ground. Tables are used to allow flexibility in specifying directory priorities and configurations.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-cfdp",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) CFDP Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:computer storage device",
			"nlp:tables (data)",
			"nlp:computerized simulation",
			"nlp:avionic",
			"nlp:personal computer",
			"nlp:file maintenance (computers)",
			"nlp:satellite imagery",
			"nlp:configuration management",
			"nlp:graphs (charts)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16125-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Checksum (CS) is one of the reusable applications that make up the Core Flight System (CFS). The technology performs memory integrity management by verifying the contents of critical flight memory regions. Unexpected changes in memory (i.e., due to an SEU) are reported to ground operators.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-cs",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Checksum Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:airborne/spaceborne computer",
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:operators (mathematics)",
			"nlp:data management",
			"nlp:memory (computers)",
			"nlp:technology assessment",
			"nlp:flight control",
			"nlp:technology utilization",
			"nlp:management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15996-1",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The DS application provides the ability to store data (i.e., messages) into files. Tables are used to provide the flexibility for specifying messages.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-ds",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Data Storage (DS) Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:computer storage device",
			"nlp:tables (data)",
			"nlp:message processing",
			"nlp:data acquisition",
			"nlp:data transmission",
			"nlp:data storage",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data reduction"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16126-1",
		"creator": "rose@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The CFS Housekeeping application provides the ability to organize data from various packets into new packets in order to best utilize the telemetry bandwidth available for a mission.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-hk",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Housekeeping (HK) Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:mission planning",
			"nlp:packet switching",
			"nlp:onboard data processing",
			"nlp:data transmission",
			"nlp:bandwidth",
			"nlp:spacecraft electronic equipment",
			"nlp:packets (communication)",
			"nlp:telemetry",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16127-1",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "FM provides the user commands to perform the following operations: copy file, move file, rename file, delete file(s), close file, concatenate file, decompress file, delete directory contents, create directory, remove directory, obtain file information, obtain open file listing, and obtain directory listings.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-fm",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) File Manager (FM) Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:user manuals (computer programs)",
			"nlp:multimedia",
			"nlp:information theory",
			"nlp:information system",
			"nlp:information retrieval",
			"nlp:command and control",
			"nlp:file maintenance (computers)",
			"nlp:information management",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16007-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Memory Dwell application telemeters the contents of table-defined addresses at a table-defined dwell rate. Addresses can be processed using symbols if the target processor/operating system includes symbols.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-md",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Memory Dwell Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:central processing unit",
			"nlp:operating systems (computers)",
			"nlp:tables (data)",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:target",
			"nlp:time sharing",
			"nlp:multiprocessing (computers)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16012-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Limit Checker (LC) application is responsible for monitoring telemetry values.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-lc",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Limit Checker (LC) Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/GSC-16010-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The plug-and-play CFS Health and Safety application is compatible with the Core Flight Executive (cFE) and uses the Operating System Abstraction Layer (OSAL), both of which were developed by Goddard Space Flight Center in order to provide a reusable, platform-independent, mission-independent, layered architecture for hosting applications. The technology can be used for any government or commercial spacecraft. Please visit the following URL for additional information: http://sourceforge.net/projects/coreflightexec/files/cFE-6.1.1/",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-hs",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Health and Safety Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:airborne/spaceborne computer",
			"nlp:biomedical data",
			"nlp:operating systems (computers)",
			"nlp:embedding",
			"nlp:aerospace environment",
			"nlp:manned space flight",
			"nlp:safety",
			"nlp:flight control",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16151-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The CFS SC application provides the ability to execute onboard absolute-time and relative-time command sequences. The technology offers a generic implementation that can be configured by a user to fit the needs of a specific mission.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-sc",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Stored Command (SC) Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:military technology",
			"nlp:time dependence",
			"nlp:software development tool",
			"nlp:command and control",
			"nlp:technology utilization",
			"nlp:technology assessment",
			"nlp:time measurement",
			"nlp:space mission",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16009-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Scheduler application uses a one-second major timeframe, which is divided into a designer-determined collection of equally divided minor timeframes. The technology is configurable and table-driven to provide greater flexibility.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-sch",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Scheduler Application Version 2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:integrated circuit",
			"nlp:tables (data)",
			"nlp:data acquisition",
			"nlp:interactive control",
			"nlp:personal computer",
			"nlp:gates (circuits)",
			"nlp:magnetic storage",
			"nlp:technology utilization",
			"nlp:technology assessment",
			"nlp:graphs (charts)"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16123-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "ILIADS 3.0 provides the data management capabilities to access CxP-vetted lunar data sets from the LMMP-provided Data Portal and the LMMP-provided OnMoon lunar data product server. (LMMP stands for Lunar Mapping and Modeling Project.) It also provides specific quantitative analysis functions to meet the stated LMMP Level 3 functional and performance requirements specifications that were approved by the CxP.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ILIADS/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Integrated Lunar Information Architecture for Decision Support (ILIADS), Version 3.0",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:specification",
			"nlp:data management",
			"nlp:product development",
			"nlp:project management",
			"nlp:management information system",
			"nlp:functional design specification",
			"nlp:data processing",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16210-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The Goddard Satellite Data Simulation Unit (SDSU) is a comprehensive unified system of multi-sensor satellite instrumental simulators. Skill of weather forecasting models can be evaluated in terms of satellite-observed multi-sensor radiance levels. Alternatively, the remote sensing community can more readily utilize atmospheric model simulations to develop and test their retrieval algorithms for application of Earth science.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Goddard Satellite Data Simulation Unit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:atmospheric model",
			"nlp:computerized simulation",
			"nlp:remote sensing",
			"nlp:weather forecasting",
			"nlp:simulation",
			"nlp:meteorological satellite",
			"nlp:remote sensor",
			"nlp:algorithm",
			"nlp:numerical weather forecasting"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15874-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This technology is a front end to the Climate Model Output Rewriter (CMOR2) software package. The technology converts a variety of standard data formats (e.g., netcdf3, netcdf4, Grads control files, and MATLAB data files) to allow publication on the Earth System Grid Federation (ESGF) data node.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/obs4mips/index.php",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Obs4MIPS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:three dimensional model",
			"nlp:data system",
			"nlp:data base management system",
			"nlp:data management",
			"nlp:data transmission",
			"nlp:data storage",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16848-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This software enables easy comparison of ground- and space-based radar observations for validation purposes. It can be accessed at: http://opensource.gsfc.nasa.gov/projects/GSRadar/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GSRadar/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Ground and Space Radar Volume Matching and Comparison Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:radar tracking",
			"nlp:radar",
			"nlp:comparison",
			"nlp:software development tool"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15738-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Based on MATLAB and Java, the flexible Orbit-Determination Toolbox is intended primarily for the advanced mission analysis that might be performed in the concept exploration, proposal, and early design phases. Visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/ODTBX/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODTBX",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GSFC", "Open Source", "Aeronautics"],
		"Languages": [],
		"Software": "Orbit-Determination Toolbox",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft orbit",
			"nlp:mission planning",
			"nlp:information system",
			"nlp:design analysi",
			"nlp:orbit calculation",
			"nlp:lunar exploration",
			"nlp:space exploration",
			"nlp:systems engineering",
			"nlp:data processing",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15728-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This version of HSEG is not subject to patent restrictions. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/HSEG/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HSEG/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Core Hierarchical Segmentation (HSEG) Software Package",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:information theory",
			"nlp:information system",
			"nlp:indexes (documentation)",
			"nlp:information retrieval",
			"nlp:information management",
			"nlp:data base",
			"nlp:management information system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15855-1",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "ViSBARD provides a way of visualizing multiple vector and scalar quantities as measured by many spacecraft at once. The data are displayed three-dimensionally; may be displayed either as connected lines or as points; and allow the rapid determination of vector configurations, correlations between many measurements at multiple points, and global relationships. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/visbard/index.php",
		"Public Code Repo": "https://sourceforge.net/projects/visbard/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Visual System for Browsing, Analysis, and Retrieval of Data (ViSBARD)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:correlation",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:information theory",
			"nlp:statistical analysi",
			"nlp:vectors (mathematics)",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:data processing",
			"nlp:management information system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15744-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This software performs lossless hyper-spectral and multi-spectral data compression. It can be downloaded at: http://opensource.gsfc.nasa.gov/projects/LHD/",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/LHD/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Lossless Hyper-/Multi-Spectral Data Compression Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/GSC-15992-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Simple, Scalable, Script-based, Science Processing (S4P) Archive (S4PA) is a disk-based archiving system for remote sensing data. The tool can be used for new data transfer, data preprocessing, metadata generation, and data archival. Services provided include data access control, data subscription, metadata publication, and data recovery. All data are archived on readily available disk drives, with FTP and HTTP being the primary modes of data access. S4PA includes a graphical user interface for monitoring and re-configuring system operation. Please visit: http://disc.sci.gsfc.nasa.gov/additional/techlab/s4pa",
		"Public Code Repo": "https://disc.sci.gsfc.nasa.gov/additional/techlab/s4pa",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Simple, Scalable, Script-based Science Processing Archive (S4PA)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:document",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:data storage",
			"nlp:on-line system",
			"nlp:data processing",
			"nlp:human-computer interface"
		],
		"External Link": "https://software.nasa.gov/software/GSC-15877-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-05",
		"Description": "The General Mission Analysis Tool (GMAT) is the worlds only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.\r\n\r\nGMAT contains models of real world objects such as spacecraft and thrusters, and analysis \"objects\" such as propagators, plots, and reports. These objects are used in a mission sequence in which the user employs commands supported by the system to model mission events and perform estimation.\r\n\r\nFor a complete list of new features, compatibility changes, and bug fixes, see the Release Notes.  Below are just some of the new capabilities contained in this release. \r\nProduction quality orbit determination (Operational Certification expected in November, 2016)\r\nCode 500 ephemeris propagator\r\nSTK ephemeris file output\r\nWrite command to save GMAT configurations during execution\r\nInclude macro to load GMAT configurations from external sources during execution\r\nMany new built in math functions and parameters\r\n130 pages of new user documentation\r\n",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2012a",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT) v.R2016a",
		"License": ["NASA Open Source"],
		"Categories_NLP": ["nlp:software development tool"],
		"External Link": "https://software.nasa.gov/software/GSC-17177-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "HORIZON 5 is an extensible framework for data management systems. It is packaged with the following components SIP/AIP: The Open Archival Information System (OAIS) specification defines the framework for information capturing to information distribution. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49540-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Business Systems and Project Management"
		],
		"Languages": [],
		"Software": "HORIZON 5 - Framework for distributed data management and product generation workflow",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:specification",
			"nlp:distributed processing",
			"nlp:information system",
			"nlp:data management",
			"nlp:computer systems design",
			"nlp:management system",
			"nlp:information management",
			"nlp:management information system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49540-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The RedShift mobile app lets operations staff on the MSL project follow the operations schedule of tactical and strategic meetings. RedShift is an application for iOS and Android that presents the meeting agenda for MSL strategic and tactical meeting events that are a part of the operations workflow.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-50256-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Business Systems and Project Management"
		],
		"Languages": [],
		"Software": "RedShift: mobile app for following the tactical and strategic operations meeting schedule",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:operations research",
			"nlp:management planning",
			"nlp:scheduling",
			"nlp:systems engineering",
			"nlp:project management",
			"nlp:project planning",
			"nlp:management system",
			"nlp:space mission"
		],
		"External Link": "https://software.nasa.gov/software/NPO-50256-1",
		"creator": "rose@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Implements the open webification API and provides ReSTful web services for planetary image data in commonly-used formats.  Exposes content of planetary image data through meaningful URLs and enables creation of applications on diverse platforms.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-48378-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Juneberry Web Service Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:multimedia",
			"nlp:data acquisition",
			"nlp:imaging technique",
			"nlp:document markup language",
			"nlp:image analysi",
			"nlp:world wide web",
			"nlp:data retrieval",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/NPO-48378-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "JPL has provided the underlying infrastructure to share data increasing the study power associated with capturing and comparing information. The infrastructure provides software services including data processing and management (eCAS), biomarker data management (BMDB), specimen data management (ERNE), and a portal to link the system together and provide access. These are software built on top of the Apache OODT software services.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-48644-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "The EDRN Knowledge Environment",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data management",
			"nlp:information system",
			"nlp:management information system",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-48644-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "We have developed a machine learning solution called DEMUD (Discovery through Eigenbasis Modeling of Uninteresting Data). DEMUD works by building a model U of the uninteresting class and then identifying items that are maximally anomalous (and therefore likely to be interesting) with respect to that model.\r\n",
		"Public Code Repo": "https://github.com/wkiri/DEMUD",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "DEMUD: Discovery through Eigenbasis Modeling of Uninteresting Data",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:classification",
			"nlp:dynamic model",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:data management",
			"nlp:data structure",
			"nlp:three dimensional model",
			"nlp:model",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/NPO-48877-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "DTNTAP is a userspace Ethernet driver with the potential to expedite DTN deployment by providing a transition mechanism for legacy IP (Internet Protocol) applications to run alongside delay and disruption tolerant applications in large scale communication networks. By presenting an Ethernet-like interface, DTNTAP gives application developers access to many of the benefits of DTN without having to become immediately proficient at a new programming API.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-48906-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "DTNTAP",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:internet",
			"nlp:interprocessor communication",
			"nlp:packet switching",
			"nlp:voice communication",
			"nlp:telecommunication",
			"nlp:communication network",
			"nlp:network",
			"nlp:computer network",
			"nlp:access control"
		],
		"External Link": "https://software.nasa.gov/software/NPO-48906-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Unlike all Internet mechanisms for security distribution (e.g., certificate authorities), DTKA operates over the extremely long signal propagation times and interrupted links that characterize communication with interplanetary spacecraft. It has no single point of failure and cannot be \"spoofed\" by an attacker's subversion of any single key authority machine (or even two key authority machines, in most configurations.  ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49413-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "DTKA, a Prototype Implementation of Delay-Tolerant Security Key Distribution",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:internet",
			"nlp:data link",
			"nlp:failure analysi",
			"nlp:warning system",
			"nlp:security",
			"nlp:telecommunication",
			"nlp:cryptography",
			"nlp:communication network",
			"nlp:computer information security"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49413-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Juneplum is implemented as a Java servlet webapp and can be directly deployed into the same servlet engine that Hyrax frontend lives in. With Juneplum, any data product served by OPeNDAP is made simultaneously accessible in a fully ReSTful way.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49868-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Juneplum - ReSTful Web Access of OPeNDAP Hyrax Back End Server",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:data system",
			"nlp:data management",
			"nlp:product development",
			"nlp:data acquisition",
			"nlp:computerized simulation",
			"nlp:data storage",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:graphs (charts)"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49868-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "EDGE uses Apache Solr for fast indexed search backend.  Inventory data stored in PO.DAAC's Oracle server is being incrementally indexed avery 15 minutes.  Apache Solr provides optimal search solution to all data it managements.  By offloading data from Oracle, this eliminates Denial of Service (DoS) attacks against the core data management backend.  To further ensure reliable serving of data, EDGE's Apache Solr uses Master and Slave model.  The Master instance is for data indexing.  ",
		"Public Code Repo": "https://github.com/dataplumber/edge",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "EDGE - The Extensible Data Gateway Environment",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:mathematical model",
			"nlp:data management",
			"nlp:inventory control",
			"nlp:industrial management",
			"nlp:computer information security",
			"nlp:management system",
			"nlp:information management",
			"nlp:data base",
			"nlp:management information system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49884-1",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "NEXUS provides a bridge between science data and horizontal-scaling data analysis. It provides a workflow to divide science artifacts into small data tiles to store in a cloud-scaled database where they can be quickly retrieved through a high performance spatial search registry. Through spatial index, NEXUS provides fast access to all relevant data tiles where each tile fits into RAM for fast in-memory computation. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-50157-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "NEXUS: Deep Data Platform",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:data management",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:random access memory",
			"nlp:data retrieval",
			"nlp:random acces",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-50157-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "UAVSAR backscatter data contain both geometric and radiometric distortions due to underlying topography and the radar viewing geometry. Currently, backscatter variation due to topography is the single largest error source when estimating biomass over steep or hilly terrain. Thus, proper calibration normalizes the backscatter images so that only contributions from the parameters of interest remain. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-47969-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Radiometric Calibration of UAVSAR Images",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:backscattering",
			"nlp:biomas",
			"nlp:synthetic aperture radar",
			"nlp:calibrating",
			"nlp:radar scattering",
			"nlp:radar imagery",
			"nlp:topography",
			"nlp:geometric rectification (imagery)",
			"nlp:radiometric correction",
			"nlp:terrain analysi"
		],
		"External Link": "https://software.nasa.gov/software/NPO-47969-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Just as web search involves more than matching phrases, spectral search is more challenging than simply matching the shape of the spectrum.  The background substrate and illumination changes can cause the same signature to appear very different across scenes.  Here, the search service uses an adaptive matched-filter approach that compensates for the context and background characteristics of each scene.  ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49004-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "A Web-based Search Service to Support Imaging Spectrometer Instrument Operations.",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:internet",
			"nlp:linear filter",
			"nlp:spectrum analysi",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:world wide web",
			"nlp:digital filter",
			"nlp:shape",
			"nlp:nonlinear filter"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49004-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The GNEIMO methods and algorithms build up on the Spatial Operator Algebra (SOA) multibody dynamics framework. The specific problems addressed in this work are velocity intialization techniques that are consistent with the CICMD equipartition priniciple, techniques for nulling momentum drift, analysis and solutions for the flying ice-cube effect, and performance of integration schemes. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-48712-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "GNEIMO Advanced Techniques for Constrained Internal Coordinate Molecular Dynamics",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:dynamic structural analysi",
			"nlp:numerical integration",
			"nlp:operators (mathematics)",
			"nlp:measure and integration",
			"nlp:numerical analysi",
			"nlp:algorithm",
			"nlp:problem solving",
			"nlp:algebra"
		],
		"External Link": "https://software.nasa.gov/software/NPO-48712-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The primary purpose of the Level 2 retrieval software is to derive estimates of the column averaged atmospheric CO2 dry air mole fraction, XCO2, and other Level 2 data products from the spectra returned by the OCO-2 mission. Where XCO2 is defined as the ratio of the column abundances of CO2 and the column abundance of dry air.",
		"Public Code Repo": "https://disc.gsfc.nasa.gov/OCO-2",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "The OCO-2 Level 2 Retrieval Algorithm",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:atmospheric composition",
			"nlp:estimate",
			"nlp:absorption spectra",
			"nlp:spectrum analysi",
			"nlp:concentration (composition)",
			"nlp:infrared spectra",
			"nlp:abundance",
			"nlp:air masse",
			"nlp:air pollution",
			"nlp:spectrum"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49044-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The software known as the The Imagery Exchange (TIE) 0.4 is an extension of the HORIZON 5 framework. It delivers horizontal scaling solutions for image capturing to automate the generation of the Meta Raster Format (MRF) imagery products. ",
		"Public Code Repo": "https://github.com/nasa-gibs/tie",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "TIE 0.4 - The Imagery Exchange for the NASA Global Imagery Browse Services (GIBS) Project",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:imaging technique",
			"nlp:image enhancement",
			"nlp:software development tool",
			"nlp:imagery",
			"nlp:geometric rectification (imagery)",
			"nlp:infrared imagery",
			"nlp:image analysi",
			"nlp:satellite imagery",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49883-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "SMART supports a high-level system trade study on a complex mission, such as a potential Mars Sample Return (MSR) mission, in an intuitive and quantitative manner. SMART offers a unique capability of handling correlated redundancies and accurately evaluate the probability of mission success as well as its sensitivity to the reliability of mission components. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49732-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Space Mission Architecture and Risk Analysis Tool (SMART)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:sensitivity",
			"nlp:reliability engineering",
			"nlp:redundancy",
			"nlp:reliability analysi",
			"nlp:probability theory",
			"nlp:reliability"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49732-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Provides software developers, peer reviewers, testers, and quality assurance personnel with an interactive tool that facilitates searching for patterns, confirm compliance or non-compliance with coding guidelines and coding standards, identify suspicious code fragments, etc. Cobra uses a lexical analyzer for C to scan in source code. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-50050-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Cobra: A Code Browser and Analyzer -- an extendable, interactive tool for the analysis of C code",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:c (programming language)",
			"nlp:software reliability",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:signal encoding",
			"nlp:standard",
			"nlp:symbol",
			"nlp:quality control"
		],
		"External Link": "https://software.nasa.gov/software/NPO-50050-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The primary motivation for the development of this software was to separate the analysis part of the problem from the data-specific part. This allows the exact same software to be used for multiple missions as needed; the only requirement for new mission input is the creation of a translator specific to that data source. Provides an API and for developing tools for astronomical data analysis. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-50136-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "OMINAS (OPEN-SOURCE MODULAR IMAGE NAVIGATION AND ANALYSIS SYSTEM) astronomical data processing software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data management",
			"nlp:mission planning",
			"nlp:data acquisition",
			"nlp:software reliability",
			"nlp:software development tool",
			"nlp:data structure",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-50136-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "SysML is a standard, visual, and general-purpose system modeling language developed by the Object Management Group (OMG). MagicDraw from NoMagic is used as a modelling tool.",
		"Public Code Repo": "https://github.com/Open-MBEE/TMT-SysML-Model",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "SysML System Model for the Thirty Meter Telescope (TMT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:group theory",
			"nlp:data management",
			"nlp:computerized simulation",
			"nlp:object-oriented programming",
			"nlp:language",
			"nlp:programming language",
			"nlp:management information system",
			"nlp:linguistic",
			"nlp:management system",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-50126-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "JPL's Integrated Model-Centric Engineering (IMCE) initiative developed ontologies for Model-Based Systems Engineering (MBSE) to support JPL's MBSE practices and methodologies. The IMCE ontologies have been carefully engineered to provide support for scalable query and reasoning according to the semantics of the Ontology Web Language (OWL) standard in such a way that these ontologies can be mapped as extensions of the Unified Modeling Language (UML) & Systems Modeling Language (SysML) standards. ",
		"Public Code Repo": "https://github.com/JPL-IMCE",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "IMCE Ontological Modeling Framework",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:programming language",
			"nlp:language",
			"nlp:semantic",
			"nlp:natural language (computers)",
			"nlp:standard",
			"nlp:support system",
			"nlp:linguistic",
			"nlp:query language"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49756-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "EarthKit provides a framework for collaboration among researchers in Earth science. It provides a set of software tools for sharing any user's research environment via the web and managing workflows that run in the cloud. By leveraging cloud computing services in this novel way, EarthKit can instantly replicate a reesarch computing environment (software, data, operating system environment and hardware).",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-49145-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "EarthKit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:distributed processing",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:computer systems design",
			"nlp:life science",
			"nlp:virtual reality",
			"nlp:research",
			"nlp:human-computer interface",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49145-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Automates the deployment of nowcasting and forecasting hydrologic simulations and ingests satellite observations (through data assimilation). Allows coupling of other environmental models. Also facilitates delivery of data products to users via a GIS-enabled database.  users of project outputs through CCAFS network of partners. Our project objectives, and approach are integral with the goals of SERVIR.",
		"Public Code Repo": "https://github.com/nasa/RHEAS",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Regional Hydrologic Extremes Assessment System (RHEAS) software framework",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:computerized simulation",
			"nlp:simulation",
			"nlp:data processing",
			"nlp:assimilation",
			"nlp:satellite observation",
			"nlp:data base",
			"nlp:data integration"
		],
		"External Link": "https://software.nasa.gov/software/NPO-49821-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The File Exchange Interface (FEI) service offers secure file transaction, store, transport, and management services. The latest distribution, FEI5 software code name Komodo, is a complete redesign from its predecessors by adopting the latest computing technologies and standards. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-47089-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "File Exchange Interface 5 - New enhancements to NTR 40075",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:configuration management",
			"nlp:distributed processing",
			"nlp:standard",
			"nlp:management information system",
			"nlp:interface",
			"nlp:symbol",
			"nlp:file maintenance (computers)",
			"nlp:management system",
			"nlp:information management",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/NPO-47089-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "Ndarts is designed as a general purpose dynamics library that can be used for the modeling of robotic platforms, space vehicles, molecular dynamics and such applications. All NASA space vehicles use such capabilities. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-47703-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Vehicle Management (Space/Air/Ground)"
		],
		"Languages": [],
		"Software": "Ndarts",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:dynamic characteristic",
			"nlp:spacecraft control",
			"nlp:autonomy",
			"nlp:dynamic model",
			"nlp:computerized simulation",
			"nlp:robotic",
			"nlp:aerospace engineering",
			"nlp:robot dynamic",
			"nlp:library"
		],
		"External Link": "https://software.nasa.gov/software/NPO-47703-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "One of the big efforts of NASA is the observation of planet earth from space. Global climate change is a prime example. Extending Athena from the county level to the global level would give a simulation tool for examining how populations and countries might respond to global cllimate change and/or new policies related to controlling climate change. ",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-47857-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Business Systems and Project Management"
		],
		"Languages": [],
		"Software": "Athena",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth atmosphere",
			"nlp:climatology",
			"nlp:earth resource",
			"nlp:earth environment",
			"nlp:earth observations (from space)",
			"nlp:simulation",
			"nlp:policy",
			"nlp:climate change",
			"nlp:climate",
			"nlp:earth (planet)"
		],
		"External Link": "https://software.nasa.gov/software/NPO-47857-1",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-11-10",
		"Description": "The Physical Oceanography Distributed Active Archive Center (PO.DAAC) is the center for oceanographic data for the NASA Earth Science Data and Information System (ESDIS). The primary function of PO.DAAC is to ingest, validate, archive, and distribute oceanographic artifacts.",
		"Public Code Repo": "https://software.nasa.gov/software/NPO-47934-1",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"JPL",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Oceanographic Data Management And Archive System",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data base management system",
			"nlp:information system",
			"nlp:remote sensing",
			"nlp:data storage",
			"nlp:management information system",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/NPO-47934-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Written in Java and C++ and based on the Airborne Coordinated Conflict Detection and Resolution mathematical framework, CD3D and CR3D are prototype implementations of state-based conflict-detection and conflict-resolution algorithms for a 3D airspace.",
		"Public Code Repo": "https://shemesh.larc.nasa.gov/people/cam/ACCoRD/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "ACCoRDs Conflict-Detection (CD3D)/Conflict-Resolution (CR3D) Algorithms",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:fault detection",
			"nlp:air traffic control",
			"nlp:collision avoidance",
			"nlp:warning system",
			"nlp:airspace",
			"nlp:high resolution",
			"nlp:free flight",
			"nlp:detection",
			"nlp:algorithm",
			"nlp:prototype"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17878-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Conflict prevention information has been assembled into prevention bands that advise a crew on maneuvers that should not be taken, helping to ensure that an aircraft's path is free of conflicts with other aircraft.",
		"Public Code Repo": "https://shemesh.larc.nasa.gov/fm/fm-atm-codes.html",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Conflict Prevention Bands",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:aircraft maneuver",
			"nlp:flight path",
			"nlp:aircraft accident",
			"nlp:prevention",
			"nlp:collision avoidance",
			"nlp:fighter aircraft",
			"nlp:spacecrew",
			"nlp:flight crew",
			"nlp:aircraft"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17874-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Stratway modifies a four-dimensional (latitude, longitude, altitude, and time) flight plan to ensure a conflict-free trajectory. This type of resolution is strategic in that it resolves conflicts over long time horizons, perhaps over several hours.",
		"Public Code Repo": "https://software.nasa.gov/software/lar-17876-1",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "Open Source", "Autonomous Systems"],
		"Languages": [],
		"Software": "Strategic Conflict Resolution (Stratway)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:trajectory",
			"nlp:airborne/spaceborne computer",
			"nlp:real time operation",
			"nlp:time dependence",
			"nlp:high resolution",
			"nlp:time optimal control",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:trajectory control",
			"nlp:trajectory optimization"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17876-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "CFL3D is a structured-grid, cell-centered, upwind-biased, Reynolds-averaged Navier-Stokes (RANS) code. It can be run in parallel on multiple grid zones with point-matched, patched, overset, or embedded connectivities. Both multigrid and mesh sequencing are available in time-accurate or steady-state modes. ",
		"Public Code Repo": "https://github.com/nasa/CFL3D",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"U.S. Release Only",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Computational Fluids Laboratory 3-Dimensional (CFL3D)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:steady state",
			"nlp:time dependence",
			"nlp:computational grid",
			"nlp:multigrid method",
			"nlp:unstructured grids (mathematics)",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://software.nasa.gov/software/LAR-16003-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "The fUnit software provides a framework for unit-testing Fortran 90, 95, and 2003 code.",
		"Public Code Repo": "https://sourceforge.net/projects/fortranxunit/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "Fortran Unit Testing Framework (fUnit v1.0)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/LAR-17081-1",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "ROBUS-2 is a time-division, multiple-access broadcast communication system that uses a time-indexed communication schedule for medium-access control. The technology provides guaranteed fault-tolerant services that include: message broadcast (Byzantine Agreement), dynamic communication schedule update, time reference (clock synchronization), and distributed diagnosis (group membership).",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/robus-2/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "Open Source", "Operations"],
		"Languages": [],
		"Software": "ROBUS-2 Fault-Tolerant Broadcast Communication System for Modular Avionics",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:broadcasting",
			"nlp:fault tolerance",
			"nlp:message processing",
			"nlp:real time operation",
			"nlp:distributed processing",
			"nlp:synchronism",
			"nlp:clock",
			"nlp:access control"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17264-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This sensitivity task employs the Monte Carlo method. Thousands of simulations are run with randomly varied input parameters, and then statistical correlations are computed to determine the sensitivity of output parameters to each input parameter.",
		"Public Code Repo": "https://github.com/kleb/nasarb/blob/master/uq4sim",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Tolerance Domain Specific Language",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:correlation",
			"nlp:sensitivity",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:parameter identification",
			"nlp:interactive control",
			"nlp:simulation",
			"nlp:siso (control systems)",
			"nlp:independent variable",
			"nlp:mimo (control systems)"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17546-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This open-source Java software helps develop electronic standards (E-Standards) for mass properties engineering. An E-Standard is a highly descriptive dataset that includes standardizing functions for data manipulation, interrogation, and formatting. With this tool, any number of users can interface with the proposed E-Standard datasets and still seamlessly utilize their own software methods.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Java Program to Promote an Open-Source E Standard for Mass Properties Engineering",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:functions (mathematics)",
			"nlp:evaluation",
			"nlp:methodology",
			"nlp:anthropometry",
			"nlp:software development tool",
			"nlp:bioengineering",
			"nlp:standard",
			"nlp:algorithm",
			"nlp:data reduction",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17635-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This Excel plugin written in VB.net allows rapid post-processing of thermal analysis data from text files or from SINDA-formatted SAV files. The software can be adapted to other data formats as well.",
		"Public Code Repo": "https://fileplottingtools.larc.nasa.gov/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "FilePlottingTools",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data acquisition",
			"nlp:digital data",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:data storage",
			"nlp:natural language processing",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18314-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "This software is a flight dynamics simulation of a transport aircraft. It implements general rigid body equations of motion for the vehicle dynamics and draws aerodynamic forces from a standard coefficient expansion implemented as table lookups. Dynamics of actuator servos and bandwidth of sensors are also included. The simulation is coded in Simulink, a model-based environment using a commercial simulation package from Mathworks, Inc. The software is not stand-alone; it must be run from inside this commercial environment, making use of numerical libraries for basic operations as well as the overall time-stepping and numerical integration routines.",
		"Public Code Repo": "https://github.com/nasa/GTM_DesignSim/",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "Flight Dynamics Simulation of a Generic Transport Model",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic model",
			"nlp:real time operation",
			"nlp:computerized simulation",
			"nlp:actuator",
			"nlp:simulation",
			"nlp:control simulation",
			"nlp:flight simulation",
			"nlp:equations of motion"
		],
		"External Link": "https://software.nasa.gov/software/LAR-17625-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-20",
		"Description": "This toolbox generates shapefiles from the most recently acquired Landsat 8, Landsat 8 Surface Reflectance, and Sentinel-2 imagery over the Winam Gulf in Kenya depicting locations where water hyacinth in most likely present.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/SAVDT",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Surface Aquatic Vegetation Detection Tool (SAVDT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:water quality",
			"nlp:water management",
			"nlp:surface propertie",
			"nlp:spectral reflectance",
			"nlp:imagery",
			"nlp:reflectance",
			"nlp:infrared imagery",
			"nlp:position (location)",
			"nlp:surface water",
			"nlp:water"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18869-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-10-12",
		"Description": "Modified Snowmelt Runoff Model for Forecasting Water Availability in Chile (M-SRM) models daily stream flow of snowmelt runoff as a function of temperature, elevation, snow-covered area, precipitation rate, and experimentally determined coefficients. Using MODIS and TRMM data, the software provides tools for synthesizing daily fractional snow cover and daily precipitation measurements. M-SRM provides daily stream flow estimates for three months beyond the start of the growing season.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/M-SRM",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing"
		],
		"Languages": [],
		"Software": "Modified Snowmelt Runoff Model For Forecasting Water Availability in Chile",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:drainage",
			"nlp:water flow",
			"nlp:snow",
			"nlp:fluid flow",
			"nlp:precipitation (meteorology)",
			"nlp:snow cover",
			"nlp:stream",
			"nlp:data flow analysi",
			"nlp:hydrology model",
			"nlp:water"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18602-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-04-15",
		"Description": "Created using the commercial math analysis software MATLAB, TASC enables the easy computation of nonlinear J-integral solutions for surface-cracked plates in tension by accessing and interpolating between the 600 nonlinear surface crack solutions documented in NASA/TP-2011-217480. The only required inputs to the program are the surface crack dimensions, plate cross-section dimensions, and material properties. TASC provides a convenient and easy-to-use interface for the solution set that allows a novice user to obtain a fast and reliable fracture toughness solution. ",
		"Public Code Repo": "https://sourceforge.net/projects/tascnasa/",
		"NASA Center": "MSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"MSFC",
			"Open Source",
			"Materials and Processes"
		],
		"Languages": [],
		"Software": "Tool for Analysis of Surface Cracks (TASC)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:structural analysi",
			"nlp:plates (structural members)",
			"nlp:surface propertie",
			"nlp:composite material",
			"nlp:tensile stres",
			"nlp:interfacial tension",
			"nlp:interface",
			"nlp:crack propagation",
			"nlp:crack",
			"nlp:cracking (fracturing)"
		],
		"External Link": "https://software.nasa.gov/software/MFS-33082-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-06-02",
		"Description": "A set of libraries used in the development of software applications.  libSPRITE was specifically designed for real-time systems that operate on a single computational node (but may be multi-core) to systematically address common coding errors, provide for multi-threaded programming to produce the exact same results regardless of the number of cores on the host compute node, and offer support for in-operation reconfigurability (parameter and control flow modifications). Components include engineering unit encoders, math functions, a task scheduler built on top of pthreads, a publish/subscribe data distribution system, and a Lua scripting language interface.",
		"Public Code Repo": "https://github.com/nasa/libSPRITE/",
		"NASA Center": "MSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"MSFC",
			"Open Source",
			"Data Servers Processing and Handling"
		],
		"Languages": [],
		"Software": "libSPRITE",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:programming language",
			"nlp:real time operation"
		],
		"External Link": "https://software.nasa.gov/software/MFS-33231-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "ACCEPT is an open source machine learning code for model development to support both regression and detection modules, including fidelity analysis.",
		"Public Code Repo": "https://c3.nasa.gov/dashlink/static/media/algorithm/ACCEPT_osrelease_1.6.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Rodney Martin", "N/A", "N/A"],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"machine learning",
			"model development",
			"regression",
			"detection"
		],
		"Languages": [],
		"Software": "Adverse Condition & Critical Event Prediction Toolbox (ACCEPT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"regression analysi",
			"mathematical model",
			"detection",
			"model",
			"computerized simulation",
			"symbol",
			"computation",
			"statistical analysi",
			"warning system",
			"computer program integrity"
		],
		"External Link": "https://c3.nasa.gov/dashlink/resources/931/",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The IVHM Project in the Aviation Safety Program has funded research in electrical power system (EPS) health management. This problem domain contains both discrete and continuous behavior, and thus is directly relevant for the hybrid diagnostic tool HyDE. In FY2007 work was performed to expand the HyDE diagnosis model of the ADAPT system. The work completed resulted in a HyDE model with the capability to diagnose five times the number of ADAPT components than was previously tested. The expanded diagnosis model passed a corresponding set of new ADAPT fault injection scenario tests with no incorrect faults reported. The time required for the HyDE diagnostic system to isolate the fault varied widely between tests; this variance was reduced by tuning of the HyDE input parameters. These results and other diagnostic design tradeoffs are discussed. Finally, possible future improvements for both the HyDE diagnostic model and HyDE itself are presented.",
		"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/Exp_BN.tar.gz",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"electrical power system",
			"IVHM",
			"testbed",
			"ADAPT",
			"diagnostics",
			"prognostics"
		],
		"Languages": [],
		"Software": "Advanced Diagnostics and Prognostics Testbed (ADAPT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:electric power supply",
			"nlp:fault tolerance",
			"nlp:mathematical model",
			"nlp:diagnosi",
			"nlp:computerized simulation",
			"nlp:design analysi",
			"nlp:systems engineering",
			"nlp:systems analysi",
			"nlp:electrical fault"
		],
		"External Link": "https://software.nasa.gov/software/NASA-Advanced_Diagnostics_Prognostics_Testbed_(ADAPT)",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-17",
		"Description": "An educational web application that visualizes the effects of climate change on agriculture using a large collection of global agriculture and weather station data.",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/AgroSphere",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"worldwind",
			"agriculture",
			"weather",
			"climate",
			"globe",
			"atmosphere",
			"weather-data"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: AgroSphere",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:agriculture",
			"nlp:hydrometeorology",
			"nlp:climatology",
			"nlp:environment effect",
			"nlp:data acquisition",
			"nlp:meteorological service",
			"nlp:weather",
			"nlp:weather station",
			"nlp:climate change",
			"nlp:climate"
		],
		"External Link": "https://software.nasa.gov/software/ARC-AgroSphere",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-17",
		"Description": "Open framework for urban infrastructure management",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/CitySmart",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "framework", "urban infrastructure management"],
		"Languages": [],
		"Software": "NASA WorldWind Research: CitySmart",
		"License": ["Pending Release"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/ARC-CitySmart",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-17",
		"Description": "WorldWind Earth application visualizes weather data and performs animation by extending the NASA WorldWind JAVA Client",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/WxOps-WorldWind",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "WorldWind"],
		"Languages": [],
		"Software": "NASA WorldWind Research: WxOps-WorldWind",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/ARC-WxOps-WorldWind",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The Common Metadata Repository (CMR) is an earth science metadata repository for NASA EOSDIS data. The CMR Search API provides access to this metadata.",
		"Public Code Repo": "https://github.com/nasa/Common-Metadata-Repository",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CMR", "EOSDIS"],
		"Languages": [],
		"Software": "Common-Metadata-Repository",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:geophysic",
			"nlp:data system",
			"nlp:earth atmosphere",
			"nlp:earth resource",
			"nlp:earth observations (from space)",
			"nlp:earth surface",
			"nlp:geodesy",
			"nlp:earth (planet)",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa/Common-Metadata-Repository/blob/master/LICENSE",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "geocamUtilWeb is a set of utilities used by Django web apps in the GeoCam Share app collection.",
		"Public Code Repo": "https://github.com/nasa/georef_geocamutilweb",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "georef", "GeoCam"],
		"Languages": [],
		"Software": "georef_geocamutilweb",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/georef_geocamutilweb/blob/master/LICENSE",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "georef repository",
		"Public Code Repo": "https://github.com/nasa/georef",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "georef", "GeoCam"],
		"Languages": [],
		"Software": "georef",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/georef/blob/master/LICENSE-2.0.txt",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "georef_deploy repository",
		"Public Code Repo": "https://github.com/nasa/georef_deploy",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "georef", "GeoCam"],
		"Languages": [],
		"Software": "georef_deploy",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/georef_deploy/blob/master/LICENSE",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "georef_geocamtiepoint repository",
		"Public Code Repo": "https://github.com/nasa/georef_geocamtiepoint",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "georef", "GeoCam"],
		"Languages": [],
		"Software": "georef_geocamtiepoint",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/georef_geocamtiepoint/blob/master/LICENSE",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The Image Registration module is intended to help automate the process of registering images to the correct location on the ground. It consists of two main components: A - Fetching RGB satellite imagery of Earth to use for comparison. B - Searching for the correct image registration parameters.",
		"Public Code Repo": "https://github.com/nasa/georef_imageregistration",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "ARC", "georef", "GeoCam"],
		"Languages": [],
		"Software": "georef_imageregistration",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth observations (from space)",
			"nlp:earth surface",
			"nlp:imagery",
			"nlp:geometric rectification (imagery)",
			"nlp:infrared imagery",
			"nlp:synchronous satellite",
			"nlp:position (location)",
			"nlp:satellite imagery",
			"nlp:satellite-borne photography",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa/georef_imageregistration/blob/master/LICENSE",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "An interactive demo of the Open MCT mission control software",
		"Public Code Repo": "https://github.com/nasa/openmct-demo",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Operations",
			"MCT",
			"demo"
		],
		"Languages": [],
		"Software": "Open Mission Control Demo (OpenMCT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/openmct/blob/master/LICENSES.md",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "CMR-OpenSearch is a web application developed by NASA EOSDIS to enable data discovery, search, and access across the CMR Earth Science data holdings via the OpenSearch standard. ",
		"Public Code Repo": "https://github.com/nasa/cmr-opensearch",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"CMR",
			"search",
			"EOSDIS",
			"Earth Science",
			"OpenSearch"
		],
		"Languages": [],
		"Software": "cmr-opensearch",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:geophysic",
			"nlp:earth resource",
			"nlp:earth surface",
			"nlp:standard",
			"nlp:geodesy",
			"nlp:earth (planet)",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa/cmr-opensearch/blob/master/LICENSE",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "CMR-CSW is a web application developed by NASA EOSDIS to enable data discovery, search, and access across the CMR Earth Science data holdings via the OpenGIS Catalogue Service for the Web (CSW) standard.",
		"Public Code Repo": "https://github.com/nasa/cmr-csw",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"CMR",
			"search",
			"EOSDIS",
			"Earth Science",
			"OpenGIS",
			"CSW"
		],
		"Languages": [],
		"Software": "cmr-csw",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:geophysic",
			"nlp:earth resource",
			"nlp:earth observations (from space)",
			"nlp:information system",
			"nlp:meteorological service",
			"nlp:standard",
			"nlp:geodesy",
			"nlp:earth (planet)",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa/cmr-csw/blob/master/LICENSE",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "A tutorial for OpenMCT that guides you through integrating historical and realtime telemetry.",
		"Public Code Repo": "https://github.com/nasa/openmct-tutorial",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"ARC",
			"Open Source",
			"Operations",
			"MCT",
			"tutorial"
		],
		"Languages": [],
		"Software": "Open Mission Control Tutorial (OpenMCT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/openmct/blob/master/LICENSES.md",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-07-13",
		"Description": "Kepler Science Data Processing Pipeline",
		"Public Code Repo": "https://github.com/nasa/kepler-pipeline",
		"NASA Center": "ARC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "Kepler"],
		"Languages": [],
		"Software": "kepler-pipeline",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/kepler-pipeline/blob/master/README.md",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The Mesh Network Communication System is a peer-to-peer communication network architecture that enables communication between network nodes of various types. The initial primary goal of the system was to enable communication between small formations of cubesats or other small satellites, but the basic mesh architecture is applicable to data exchange between network assets of any type. The system has been flight tested on formations of small unmanned aerial systems (sUAS) and shown to provide low latency data throughput for dynamic flight environments.",
		"Public Code Repo": "https://github.com/nasa/meshNetwork",
		"NASA Center": "MSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"peer-to-peer",
			"network communication",
			"sUAS",
			"cubesats",
			"satellites"
		],
		"Languages": [],
		"Software": "meshNetwork",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data link",
			"nlp:satellite network",
			"nlp:satellite communication",
			"nlp:data transmission",
			"nlp:systems engineering",
			"nlp:communication network",
			"nlp:flight test",
			"nlp:architecture (computers)",
			"nlp:communication satellite",
			"nlp:mobile communication system"
		],
		"External Link": "https://github.com/nasa/meshNetwork/blob/master/LICENSE",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The Core Flight Executive (cFE) provides software bus, time, event, executive, table, and file services, and it defines the application programming interface (API) for each set function. Applications subscribe to cFE services at runtime, making system modifications easy. Facilitating rapid prototyping, new applications can be compiled, linked, loaded, and started without requiring the entire system to be rebuilt.",
		"Public Code Repo": "https://github.com/nasa/cFE",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "GSFC", "Vehicle Management (Space/Air/Ground)"],
		"Languages": [],
		"Software": "cFE",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:airborne/spaceborne computer",
			"nlp:real time operation",
			"nlp:operating systems (computers)",
			"nlp:embedded computer system",
			"nlp:avionic",
			"nlp:run time (computers)",
			"nlp:flight control",
			"nlp:file maintenance (computers)",
			"nlp:prototype",
			"nlp:time sharing"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA PVS Library of Formal Developments",
		"Public Code Repo": "https://github.com/nasa/pvslib",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "PVS"],
		"Languages": [],
		"Software": "pvslib",
		"License": ["Pending Release"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "Fprime flight software framework",
		"Public Code Repo": "https://github.com/nasa/fprime",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "JPL", "flight software", "framework"],
		"Languages": [],
		"Software": "fprime",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/fprime/blob/master/LICENSE.txt",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The knife library calculates the boolean subtraction of arbitrary watertight triangular polyhedra. The result of this subtraction is also watertight triangular polyhedra. The triangular faces of the resultant polyhedra are created with a Delaunay triangle mesher. These polyhedra are suitable for performing cut cell partial differential equation solutions (i.e., computational fluid flow simulations). ",
		"Public Code Repo": "https://github.com/nasa/knife",
		"NASA Center": "LaRC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "LaRC", "library"],
		"Languages": [],
		"Software": "knife",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computerized simulation",
			"nlp:linear equation",
			"nlp:fluid flow",
			"nlp:simulation",
			"nlp:navier-stokes equation",
			"nlp:equations of motion",
			"nlp:computational fluid dynamic",
			"nlp:nonlinear equation",
			"nlp:library",
			"nlp:partial differential equation"
		],
		"External Link": "https://github.com/nasa/knife/blob/master/LICENSE",
		"creator": "rose@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "A jQuery plugin implementing the ECHO Forms specification.",
		"Public Code Repo": "https://github.com/nasa/edsc-echoforms",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "jquery", "ECHO Forms"],
		"Languages": [],
		"Software": "edsc-echoforms",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/edsc-echoforms/blob/master/LICENSE",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "cfs_lib repository",
		"Public Code Repo": "https://github.com/nasa/cfs_lib",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "cfs_lib",
		"License": ["Pending Release"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Scheduler Application",
		"Public Code Repo": "https://github.com/nasa/SCH",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "SCH",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/SCH/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The Software Bus Network application (SBN) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS.",
		"Public Code Repo": "https://github.com/nasa/SBN",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "SBN",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:airborne/spaceborne computer",
			"nlp:network analysi",
			"nlp:neural net",
			"nlp:computer network",
			"nlp:avionic",
			"nlp:network",
			"nlp:communication network",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:network control"
		],
		"External Link": "https://github.com/nasa/SBN/blob/master/Core%20Flight%20System%20(CFS)%20NOSA%20GSC-16917-1.pdf",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Stored Command Application",
		"Public Code Repo": "https://github.com/nasa/SC",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "SC",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/SC/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Memory Dwell Application",
		"Public Code Repo": "https://github.com/nasa/MD",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "MD",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/MD/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Housekeeping Application",
		"Public Code Repo": "https://github.com/nasa/HK",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "HK",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/HK/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Health Safety",
		"Public Code Repo": "https://github.com/nasa/HS",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "HS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/HS/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Limit Checker Application",
		"Public Code Repo": "https://github.com/nasa/LC",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "LC",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/LC/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Data Storage Application",
		"Public Code Repo": "https://github.com/nasa/DS",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "DS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/DS/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System Checksum Application",
		"Public Code Repo": "https://github.com/nasa/CS",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "CS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/CS/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System File Transfer Application",
		"Public Code Repo": "https://github.com/nasa/CF",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "CF",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/CF/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "refine repository",
		"Public Code Repo": "https://github.com/nasa/refine",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA"],
		"Languages": [],
		"Software": "refine",
		"License": ["Pending Release"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "NASA core Flight System File Manager Application",
		"Public Code Repo": "https://github.com/nasa/FM",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "CFE", "CFS"],
		"Languages": [],
		"Software": "FM",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/FM/blob/master/Core%20Flight%20System%20(CFS)%20NOSA.pdf",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "A jQuery plugin implementing a timeline view of data, allowing time range selection as well as keyboard and touch interaction For a basic usage example and a testbed for changes.",
		"Public Code Repo": "https://github.com/nasa/edsc-timeline",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": ["NASA", "jquery", "ECHO", "search"],
		"Languages": [],
		"Software": "edsc-timeline",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:data system",
			"nlp:real time operation",
			"nlp:computerized simulation",
			"nlp:hydroelectricity",
			"nlp:time dependence",
			"nlp:time series analysi",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:human-computer interface"
		],
		"External Link": "https://github.com/nasa/edsc-timeline/blob/master/LICENSE",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "The General Mission Analysis Tool (GMAT) is the worlds only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.\r\n\r\nGMAT contains models of real world objects such as spacecraft and thrusters, and analysis \"objects\" such as propagators, plots, and reports. These objects are used in a mission sequence in which the user employs commands supported by the system to model mission events and perform estimation.\r\n\r\nFor a complete list of new features, compatibility changes, and bug fixes, see the Release Notes.  Below are just some of the new capabilities contained in this release. \r\nProduction quality orbit determination (Operational Certification expected in November, 2016)\r\nCode 500 ephemeris propagator\r\nSTK ephemeris file output\r\nWrite command to save GMAT configurations during execution\r\nInclude macro to load GMAT configurations from external sources during execution\r\nMany new built in math functions and parameters\r\n130 pages of new user documentation\r\n",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2016a/",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"GSFC",
			"Open Source",
			"Design and Integration Tools"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT) v.R2017a",
		"License": ["NASA Open Source"],
		"Categories_NLP": ["nlp:software development tool"],
		"External Link": "https://sourceforge.net/p/gmat/git/ci/GMAT-R2016a/tree/License.txt",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-23",
		"Description": "This software retrieves a set of atmospheric/surface/instrument parameters from a simultaneous fit to spectra from multiple absorption bands. The software uses an iterative, non-linear retrieval technique (optimal estimation). After the retrieval process has converged, the software performs an error analysis. The products of the software include all quantities needed to understand the information content of the measurement, its uncertainty, and its dependence on interfering atmospheric properties. Spectra from ground-based or space-based measurement with arbitrary observation geometry can be analyzed. The retrieved parameters can be chosen from a large set of atmospheric (e.g., volume mixing ratio of gases or aerosol optical depth), surface (e.g., Lambertian reflection), and instrument (e.g., spectral shift or instrument line shape parameters) parameters. The software uses an accurate, state-of-the-art, multiple-scattering radiative transfer code combined with an efficient polarization approximation to simulate measured spectra. The software enables fast and highly accurate simulations of broad spectral ranges by an optional parallelization of the frequency processing in the radiative transfer model. The framework was written with flexibility in mind. New algorithms and instruments are added by creating additional classes that implement the defined interfaces. Bindings are available for both Python and Lua.",
		"Public Code Repo": "https://github.com/nasa/RtRetrievalFrameworkDoc",
		"NASA Center": "JPL",
		"Contributors": [],
		"Labor_Hours": 0,
		"Categories": [
			"NASA",
			"Framework",
			"Radiative Transfer",
			"Forward Model",
			"Atmosphere",
			"Retrieval",
			"Earth Science",
			"C++",
			"Python",
			"Lua"
		],
		"Languages": [],
		"Software": "RtRetrievalFrameworkDoc",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:simulation",
			"nlp:estimating",
			"nlp:data processing",
			"nlp:algorithm",
			"nlp:signal processing",
			"nlp:model",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa/RtRetrievalFramework/blob/master/LICENSE.txt",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-12-09",
		"Description": "Astronomy Picture of the Day API service. A microservice written in Python which may be run on Google App Engine with the Flask micro framework or AWS.",
		"Public Code Repo": "https://github.com/nasa/apod-api",
		"NASA Center": "HQ",
		"Contributors": [
			"brian.a.thomas@nasa.gov",
			"jennifer.n.betancourt@nasa.gov",
			"N/A",
			"evan.t.yates@nasa.gov",
			"N/A",
			"N/A",
			"justin.c.gosses@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 320,
		"Categories": [
			"Images",
			"API",
			"NASA",
			"APOD",
			"astronomy",
			"photos",
			"starter",
			"starter-friendly"
		],
		"Languages": [],
		"Software": "APOD API",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:information retrieval",
			"nlp:operators (mathematics)",
			"nlp:computation",
			"nlp:query language",
			"nlp:gates (circuits)",
			"nlp:computerized simulation",
			"nlp:java (programming language)",
			"nlp:telecommunication",
			"nlp:graphs (charts)",
			"nlp:world wide web"
		],
		"External Link": "https://github.com/nasa/apod-api",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2011-12-02",
		"Description": "A software application that allows the interactive visualization of multivariate data using a variety of standard techniques, Viewpoints can be used with extremely large data sets.",
		"Public Code Repo": "https://app.assembla.com/spaces/viewpoints/documents",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov", "creon@nas.nasa.gov"],
		"Labor_Hours": 21424,
		"Categories": [
			"Data and Image Processing",
			"NASA",
			"visualization",
			"Open Source",
			"ARC"
		],
		"Languages": [],
		"Software": "Viewpoints: Software for Visualization of Multivariate Data",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:computer graphic",
			"nlp:software development tool",
			"nlp:data structure",
			"nlp:scientific visualization",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base"
		],
		"External Link": "https://app.assembla.com/spaces/viewpoints/wiki/Home",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-07",
		"Description": "The MISR Toolkit is a simplified programming interface to access MISR L1B2, L2 conventional and ancillary data products. It is an interface built upon HDF-EOS that knows about MISR data products.",
		"Public Code Repo": "https://github.com/nasa/MISR-Toolkit",
		"NASA Center": "JPL",
		"Contributors": [
			"jason.duley@nasa.gov",
			"Brian Rheingans",
			"Jason Matthews",
			"Charles Thompson",
			"Sebastian Val"
		],
		"Labor_Hours": 73536,
		"Categories": [
			"Data and Image Processing",
			"Earth Science",
			"NASA",
			"Visualization",
			"U.S. Government Purpose Release",
			"Analysis",
			"JPL",
			"Toolkit"
		],
		"Languages": [],
		"Software": "MISR Toolkit",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data management",
			"nlp:human-computer interface",
			"nlp:data acquisition",
			"nlp:random acces",
			"nlp:interface",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:graphical user interface",
			"nlp:access control"
		],
		"External Link": "https://nasa.github.io/MISR-Toolkit/html/index.html",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-10-03",
		"Description": "abaverify is a collection of Python scripts that is used for testing and verifying the behavior of user subroutines for the commercial finite element code Abaqus.",
		"Public Code Repo": "https://github.com/nasa/Abaverify",
		"NASA Center": "LaRC",
		"Contributors": [
			"larc-sra@mail.nasa.gov",
			"Andrew Bergan",
			"Frank Leone"
		],
		"Labor_Hours": 1184,
		"Categories": [
			"User Subroutines",
			"NASA",
			"FEA",
			"Open Source",
			"Abaqus",
			"Fortran",
			"Unit Tests",
			"LaRC",
			"Materials and Processes",
			"Integration Tests"
		],
		"Languages": [],
		"Software": "Abaqus User Subroutine Verification (abaverify)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:user manuals (computer programs)",
			"nlp:data acquisition",
			"nlp:finite element method",
			"nlp:binary code",
			"nlp:program verification (computers)",
			"nlp:subroutine",
			"nlp:symbol",
			"nlp:fortran"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18938-1",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-06-20",
		"Description": "The Committee on Earth Observation Satellites (CEOS) has long recognized a need for data processing infrastructure to support Earth science objectives in developing countries.  Forest preservation initiatives, carbon measurement initiatives, water management and agricultural monitoring are just few examples of causes that can benefit greatly from remote sensing data.  Currently, however, many developing nations lack the in-country expertise and computational infrastructure to utilize remote sensing data.\r\n\r\nThe CEOS Data Cube Platform provides a flexible model to address these needs.  The CEOS Data Cube Platform is a data processing platform for Earth science data, with a focus on remote-sensing data.  The platform provides a data ingestion framework that includes support for automated ingestion of a wide variety of remote sensing data products.  The data products are ingested into an N-dimensional data array that abstracts away management of distinct acquisitions.   The platform has a tiered API for data processing and a data/application platform layer for higher-level access.",
		"Public Code Repo": "https://github.com/ceos-seo/Data_Cube_v2",
		"NASA Center": "LaRC",
		"Contributors": ["Brian.D.Killough@nasa.gov"],
		"Labor_Hours": 1150160,
		"Categories": [
			"Data cube",
			"NASA",
			"Open Source",
			"ceos-seo",
			"LaRC",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "CEOS Data Cube Platform v.2 (CEOS2)",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:developing nation",
			"nlp:earth resource",
			"nlp:earth observations (from space)",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:environmental monitoring",
			"nlp:tropical region",
			"nlp:data processing",
			"nlp:satellite observation"
		],
		"External Link": "https://github.com/ceos-seo/Data_Cube_v2",
		"creator": "mile@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2015-09-21",
		"Description": "METRIC model software can be used to calculate evapotranspiration (ET) rates of agricultural fields by executing the Measuring Evapotranspiration at High Resolution with Internalized Calibration (METRIC) model in an ArcGIS Python script.  The model requires input data from Landsat 8 OLI/TIRS and local weather stations.  The creation of this software was motivated by the need to reduce irrigation costs for farmers and provide a means of drought monitoring for the agricultural industry.  This software has the potential to reduce the economic stress on the agricultural industry by enhancing crop productivity and irrigation efficiency.  ",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/METRIC",
		"NASA Center": "LaRC",
		"Contributors": ["mrb364", "Jwely"],
		"Labor_Hours": 1424,
		"Categories": [
			"landsat imagery",
			"evapotranspiration",
			"Data and Image Processing",
			"NASA-DEVELOP",
			"NASA",
			"Open Source",
			"LaRC"
		],
		"Languages": [],
		"Software": "Coastal Mid-Atlantic METRIC Model",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:agriculture",
			"nlp:crop inventory",
			"nlp:calibrating",
			"nlp:environmental monitoring",
			"nlp:drought",
			"nlp:high resolution",
			"nlp:crop growth",
			"nlp:weather station",
			"nlp:farm crop"
		],
		"External Link": "https://github.com/NASA-DEVELOP/METRIC",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-06-16",
		"Description": "The Drought Severity Assessment Tool (formerly Drought Severity Assessment - Decision Support Tool) will be used by Navajo Nation Department of Water Resource Managers for their monthly drought reports and other activities related to drought monitoring within the region. With small adjustments it is possible for the tool to be used in other locations given the user has already downloaded and processed the proper precipitation data.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/DSAT",
		"NASA Center": "LaRC",
		"Contributors": ["mrb364", "Jwely", "vickiely", "Smewhen"],
		"Labor_Hours": 2544,
		"Categories": [
			"application",
			"NASA-DEVELOP",
			"NASA",
			"Drought",
			"water resources",
			"R",
			"resource management"
		],
		"Languages": [],
		"Software": "Drought Severity Assessment Tool (DSAT)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth resource",
			"nlp:decision making",
			"nlp:economic",
			"nlp:environmental monitoring",
			"nlp:precipitation (meteorology)",
			"nlp:drought",
			"nlp:water resource",
			"nlp:resources management",
			"nlp:hydrology",
			"nlp:water"
		],
		"External Link": "https://github.com/NASA-DEVELOP/DSAT",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-08-01",
		"Description": "Extreme heat causes and exacerbates a number of health problems, leading to hospitalization and death in some cases. The problem of severe heat is notably felt in Maricopa County, Arizona, where the socially disadvantaged and physically vulnerable are especially susceptible to the effects of extreme heat. Several organizations, including the Arizona Department of Health Services and the Phoenix Heat Relief Network, are working to create more effectively placed cooling centers and heat warning systems to aid those with the highest risk of exposure. This project created a Python tool using Aqua Moderate Resolution Imaging Spectrometer (MODIS) land surface temperature parameters to generate heat maps that reference demographics data on extreme heat days. ",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/LaSTMoV",
		"NASA Center": "LaRC",
		"Contributors": ["mrb364", "Jwely"],
		"Labor_Hours": 144,
		"Categories": [
			"Data and Image Processing",
			"NASA-DEVELOP",
			"NASA",
			"Visualization",
			"Open Source",
			"LaRC",
			"Land Surface Temperature",
			"MODIS"
		],
		"Languages": [],
		"Software": "Land Surface Temperature MODIS Visualization (LaSTMoV)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth surface",
			"nlp:remote sensing",
			"nlp:temperature measurement",
			"nlp:high resolution",
			"nlp:public health",
			"nlp:imaging spectrometer"
		],
		"External Link": "https://github.com/NASA-DEVELOP/LaSTMoV",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-24",
		"Description": "The DRIP-SLIP model automatically analyzes red band spectral information and soil moisture information derived from Landsat 8 and ASTER and SRTM data, at a fine to moderate resolutions, to determine areas that might be new landslides. This is important to help increase the temporal latency for landslide products that emergency managers, planners, and scientists are able to use in their work.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/DRIP-SLIP",
		"NASA Center": "GSFC",
		"Contributors": ["aakash.ahamed@nasa.gov"],
		"Labor_Hours": 352,
		"Categories": [
			"Data and Image Processing",
			"NASA-DEVELOP",
			"NASA",
			"precipitation monitoring",
			"Open Source",
			"LANDSAT",
			"landslide",
			"LaRC"
		],
		"Languages": [],
		"Software": "DEVELOP DRIP and SLIP Landslide Detection Package (DRIP-SLIP)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:city",
			"nlp:spectral band",
			"nlp:information system",
			"nlp:mathematical model",
			"nlp:digital data",
			"nlp:spatial resolution",
			"nlp:high resolution",
			"nlp:soil moisture",
			"nlp:moisture",
			"nlp:moisture content"
		],
		"External Link": "https://github.com/NASA-DEVELOP/DRIP-SLIP",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Memory Manager application processes commands, generally from the ground, in order to dump the contents of a memory location, dump the contents of a range of memory locations, load a memory location with specified data, load a range of memory with specified data, or fill an area of memory with the specified fill pattern. Operations can be performed on non-volatile, volatile, and memory mapped I/O.",
		"Public Code Repo": "https://github.com/nasa/MM",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 24416,
		"Categories": [
			"memory management",
			"Vehicle Management (Space/Air/Ground)",
			"NASA",
			"GSFC",
			"Open Source",
			"CFE",
			"Core Flight System",
			"CFS"
		],
		"Languages": [],
		"Software": "Core Flight System (CFS) Memory Manager Application Version 2",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:magnetic storage",
			"nlp:remote sensing",
			"nlp:pattern recognition",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:command and control",
			"nlp:position (location)",
			"nlp:data processing"
		],
		"External Link": "https://software.nasa.gov/software/GSC-16011-1",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-04",
		"Description": "This framework integrates a regional landslide susceptibility map and satellite-based rainfall estimates into a binary decision tree model, considering both daily and antecedent rainfall. Using a regionally distributed, percentile-based threshold approach, the model outputs a pixel-by-pixel nowcast in near real-time at a resolution of 30 arcseconds to identify areas of moderate and high landslide hazard. ",
		"Public Code Repo": "https://github.com/vightel/ojo-processing",
		"NASA Center": "GSFC",
		"Contributors": ["dalia.b.kirschbaum@nasa.gov"],
		"Labor_Hours": 1840,
		"Categories": [
			"NASA",
			"Open Source",
			"landslides",
			"GSFC",
			"earth sciences",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Landslide Hazard Assessment for Situational Awareness (LHASA)",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:satellite observation",
			"nlp:decision making",
			"nlp:rain",
			"nlp:estimate",
			"nlp:real time operation",
			"nlp:trees (plants)",
			"nlp:spatial resolution",
			"nlp:high resolution",
			"nlp:hazard",
			"nlp:map"
		],
		"External Link": "http://ojo-streamer.herokuapp.com/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2010-09-27",
		"Description": "MCP is a high-performance file copy utility that achieves performance gains through parallelization. Multiple files and parts of single files are processed in parallel using multiple threads on multiple processors. The program employs the OpenMP and MPI programming models. ",
		"Public Code Repo": "https://github.com/pkolano/mutil",
		"NASA Center": "ARC",
		"Contributors": ["paul.kolano@nasa.gov"],
		"Labor_Hours": 16,
		"Categories": [
			"Data Servers Processing and Handling",
			"NASA",
			"system administration",
			"Open Source",
			"ARC",
			"mutil",
			"file copying"
		],
		"Languages": [],
		"Software": "Multi-threaded Copy Program (MCP)",
		"License": ["NASA Open Source", "LGPL"],
		"Categories_NLP": [
			"nlp:dynamic programming",
			"nlp:mathematical programming",
			"nlp:computer storage device",
			"nlp:parallel computer",
			"nlp:performance prediction",
			"nlp:parallel programming",
			"nlp:file maintenance (computers)",
			"nlp:computer component",
			"nlp:multiprocessing (computers)",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://pkolano.github.io/projects/mutil.html",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-04-26",
		"Description": "RACE is a software architecture and framework for configurable, highly concurrent and distributed message based systems.  RACE can be used to rapidly build simulations that span several machines (including synchronized displays), interface existing hardware simulators and other live data feeds, and incorporate sophisticated visualization components such as NASAs WorldWind viewer. RACE is implemented as a distributed actor system that runs within Java virtual machines.",
		"Public Code Repo": "https://github.com/NASARace/race",
		"NASA Center": "ARC",
		"Contributors": ["peter.c.mehlitz@nasa.gov"],
		"Labor_Hours": 23232,
		"Categories": [
			"NASA",
			"Open Source",
			"Airspace Simulation",
			"ARC",
			"Aeronautics"
		],
		"Languages": [],
		"Software": "RACE - Runtime for Airspace Concept Evaluation",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:message processing",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:simulator",
			"nlp:architecture (computers)",
			"nlp:display device",
			"nlp:graphical user interface",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://github.com/NASARace/race/blob/master/README.md",
		"creator": "rose@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-02-15",
		"Description": "PRECiSA (Program Round-off Error Certifier via Static Analysis) is a fully automatic analyzer for the estimation of round-off errors of floating-point valued functional expressions. The input to PRECiSA is a program composed of floating-point valued functions.",
		"Public Code Repo": "https://github.com/nasa/PRECiSA",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 7120,
		"Categories": [
			"NASA",
			"PVS",
			"LaRC",
			"Floating-point Round-off Errors",
			"Static Analysis"
		],
		"Languages": [],
		"Software": "Program Round-Off Certifier via Static Analysis (PRECiSA) with Kodiak Integration",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:recursive function",
			"nlp:functions (mathematics)",
			"nlp:error",
			"nlp:estimate",
			"nlp:parameter identification",
			"nlp:analysis (mathematics)",
			"nlp:estimating",
			"nlp:input/output routine",
			"nlp:numerical analysi",
			"nlp:error analysi"
		],
		"External Link": "http://precisa.nianet.org",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-08-19",
		"Description": "The communication module of ICAROUS enables data transfer between ICAROUS and other off board entities, e.g., ground stations, other air traffic, via the open source MAVLink protocol (http://qgroundcontrol.org/mavlink/start).  The decision making module of ICAROUS provides a framework to monitor incoming data from aircraft sensors and data links for conflicts, e.g., violations of keep-in/keep-out regions, collision hazards, weather hazards, and resolve these conflicts with the help of the core ICAROUS algorithms.\r\n",
		"Public Code Repo": "https://github.com/nasa/icarous",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 299392,
		"Categories": [
			"Detect and Avoid",
			"Geofencing",
			"NASA",
			"UAS",
			"Open Source",
			"LaRC",
			"Autonomous Systems"
		],
		"Languages": [],
		"Software": "Independent Configurable Architecture for Reliable Operations of Unmanned Systems with Distributed On-board Services (ICAROUS-2)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:aircraft hazard",
			"nlp:data link",
			"nlp:air traffic control",
			"nlp:decision making",
			"nlp:collision avoidance",
			"nlp:aviation meteorology",
			"nlp:air traffic",
			"nlp:flight hazard",
			"nlp:communication network",
			"nlp:aircraft communication"
		],
		"External Link": "https://shemesh.larc.nasa.gov/fm/ICAROUS/",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-09-14",
		"Description": "PolyCARP is a package of algorithms, including both their formal models and software implementations, for computing containment, collision, resolution, and recovery information for polygons. The intended applications of PolyCARP are related, but not limited, to safety critical systems in air traffic management. One application is weather avoidance. A weather cell can be approximated by a polygon, and PolyCARP provides algorithms to detect whether a trajectory will intersect such a polygon in the near future and will provide maneuver guidance to avoid the polygon. If the trajectory is inside the polygon at the current time, PolyCARP provides algorithms for maneuver guidance to exit the polygon. Another application is ensuring that an aircraft stays inside a predetermined safety region, also known as assured containment, and PolyCARP provides algorithms that ensure that a point is inside or outside a particular polygonal region. Another application is obstacle avoidance by an aircraft. There are several functionalities provided by PolyCARP. There are algorithms to insure that a point is contained in or excluded from a polygon. There are also collision detection algorithms that determine if a moving point intersects a polygon, including the case where the polygon is moving or even warping over time, as well as where the polygon and the point are following piecewise linear trajectories. There are algorithms that resolve potential collisions between and point and a polygon by providing collision-free trajectories, and there are algorithms that compute new trajectories to regain separation from a polygon.",
		"Public Code Repo": "https://github.com/nasa/polycarp",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 110528,
		"Categories": [
			"Autonomous Systems",
			"Geofencing",
			"NASA",
			"Open Source",
			"LaRC",
			"UAV"
		],
		"Languages": [],
		"Software": "PolyCARP: Algorithms and Software for Computations with Polygons",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:trajectory",
			"nlp:air traffic control",
			"nlp:real time operation",
			"nlp:collision avoidance",
			"nlp:aviation meteorology",
			"nlp:air traffic",
			"nlp:flight safety",
			"nlp:aircraft guidance",
			"nlp:algorithm",
			"nlp:trajectory analysi"
		],
		"External Link": "https://shemesh.larc.nasa.gov/fm/PolyCARP",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-23",
		"Description": "DAIDALUS is a reference implementation in Java and C++ of RTCA-228 detect and avoid concept for the integration of Unmanned Aircraft Systems into civil airspace. DAIDALUS consists of algorithms for determining the current well-clear status between two aircraft and for predicting a well-clear violation within a lookahead time, assuming non-maneuvering trajectories. In the case of a predicted well-clear violation, DAIDALUS also provides an algorithm that computes the time interval of well-clear violation. Furthermore, DAIDALUS implements algorithms for computing prevention bands, assuming a simple kinematic trajectory model. Prevention bands are ranges of track, ground speed, and vertical speed maneuvers that are predicted to be in well-clear violation within a given lookahead time.\r\n",
		"Public Code Repo": "https://github.com/nasa/wellclear",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 207456,
		"Categories": [
			"Detect and Avoid",
			"Well-Clear",
			"NASA",
			"UAS",
			"Open Source",
			"LaRC",
			"Aeronautics"
		],
		"Languages": [],
		"Software": "Detect and Avoid Alerting Logic for Unmanned Systems (DAIDALUS) with Dynamic Well-Clear Separation Volumes",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:aircraft maneuver",
			"nlp:trajectory",
			"nlp:flight path",
			"nlp:air traffic control",
			"nlp:real time operation",
			"nlp:aircraft model",
			"nlp:military technology",
			"nlp:airspace",
			"nlp:algorithm",
			"nlp:trajectory optimization"
		],
		"External Link": "https://shemesh.larc.nasa.gov/fm/DAIDALUS/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-08-18",
		"Description": "The Prognostics Algorithm Library is a suite of algorithms implemented in the MATLAB programming language for model-based prognostics (remaining life computation). It includes algorithms for state estimation and prediction, including uncertainty propagation. The algorithms take as inputs component models developed in Matlab, and perform estimation and prediction functions. The library allows the rapid development of prognostics solutions for given models of components and systems. Different algorithms can be easily swapped to do comparative studies and evaluations of different algorithms to select the best for the application at hand.",
		"Public Code Repo": "https://github.com/nasa/PrognosticsAlgorithmLibrary",
		"NASA Center": "ARC",
		"Contributors": ["matthewjdaigle"],
		"Labor_Hours": 384,
		"Categories": [
			"Framework",
			"PHM",
			"NASA",
			"Open Source",
			"Prognostics",
			"ARC",
			"Autonomous Systems",
			"Toolbox",
			"Health Management"
		],
		"Languages": [],
		"Software": "Prognostics Algorithm Library",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical programming",
			"nlp:mathematical model",
			"nlp:programming language",
			"nlp:prediction",
			"nlp:state estimation",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:algorithm",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/PrognosticsAlgorithmLibrary/wiki",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-08-18",
		"Description": "The Prognostics Model Library is a modeling framework focused on defining and building models for prognostics (computation of remaining useful life) of engineering systems, and provides a set of prognostics models for select components developed within this framework, suitable for use in prognostics applications for these components. The library currently includes models for valves, pumps, and batteries. The Prognostics Model Library is implemented in MATLAB. The implementation consists of a set of utilities for defining a model (specifying variables, parameters, and equations), simulating the model, and embedding it within common model-based prognostics algorithms. A user can use existing models within the library or construct new models with the provided framework.",
		"Public Code Repo": "https://github.com/nasa/PrognosticsModelLibrary",
		"NASA Center": "ARC",
		"Contributors": ["matthewjdaigle"],
		"Labor_Hours": 656,
		"Categories": [
			"Framework",
			"PHM",
			"NASA",
			"Open Source",
			"Prognostics",
			"ARC",
			"Autonomous Systems",
			"Toolbox",
			"Health Management"
		],
		"Languages": [],
		"Software": "Prognostics Model Library",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:electric batterie",
			"nlp:mathematical model",
			"nlp:systems engineering",
			"nlp:structural engineering",
			"nlp:pump",
			"nlp:systems analysi",
			"nlp:valve",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/PrognosticsModelLibrary/wiki",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-04-18",
		"Description": "The QuIP interpreter, a software environment for QUick image processing, uses an interactive scripting language designed to facilitate use by non-expert users, through features such as context-sensitive automatic response completion and integrated documentation.  The package includes a number of script packages that implement high-, medium-, and low-level functions (e.g., analysis of eye images for human gaze tracking, feature tracking, and image filtering). The environment also includes facilities for displaying images on screen, drawing and overlaying graphics, and constructing graphical user interfaces using the scripting language.  Currently supported platforms are *NIX (tested on Mac OS X and Linux), and Apple iOS.",
		"Public Code Repo": "https://github.com/nasa/QuIP",
		"NASA Center": "ARC",
		"Contributors": ["Jeff Mulligan"],
		"Labor_Hours": 157216,
		"Categories": [
			"Simulation",
			"Data and Image Processing",
			"Image Processing",
			"Mobile",
			"NASA",
			"Psychophysics",
			"Graphics",
			"Visualization",
			"Open Source",
			"Analysis",
			"ARC",
			"Framework",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Portable Environment for Quick Image Processing (QuIP)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:human-computer interface",
			"nlp:programming language",
			"nlp:computer graphic",
			"nlp:embedded computer system",
			"nlp:software development tool",
			"nlp:high level language",
			"nlp:image analysi",
			"nlp:interface",
			"nlp:graphical user interface",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa/QuIP/wiki",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-02-29",
		"Description": "This repository contains the configuration used by Worldview on the Earthdata site. See the Worldview repository for more information. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
		"Public Code Repo": "https://github.com/nasa-gibs/worldview-options-eosdis",
		"NASA Center": "GSFC",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 21152,
		"Categories": [
			"earth data science",
			"gibs",
			"global imagery browse services",
			"branding",
			"NASA",
			"eosdis",
			"Tiled WMS",
			"onearth",
			"worldview"
		],
		"Languages": [],
		"Software": "Worldview Options Eosdis",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:data system",
			"nlp:information dissemination",
			"nlp:earth observations (from space)",
			"nlp:information system",
			"nlp:symbol",
			"nlp:flight control",
			"nlp:earth (planet)",
			"nlp:configuration management",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa-gibs/worldview-options-eosdis",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-01-28",
		"Description": "This repository contains the wireframes and designs for NASA Worldview. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
		"Public Code Repo": "https://github.com/nasa-gibs/worldview-design",
		"NASA Center": "GSFC",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 6896,
		"Categories": [
			"earth data science",
			"gibs",
			"global imagery browse services",
			"NASA",
			"eosdis",
			"Tiled WMS",
			"onearth",
			"worldview",
			"design"
		],
		"Languages": [],
		"Software": "Worldview Design",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:data system",
			"nlp:earth observations (from space)",
			"nlp:information system",
			"nlp:design analysi",
			"nlp:systems engineering",
			"nlp:symbol",
			"nlp:flight control",
			"nlp:earth (planet)",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa-gibs/worldview-design",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-05",
		"Description": "This repository contains the generic branding with basic configuration for NASA Worldview.This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
		"Public Code Repo": "https://github.com/nasa-gibs/worldview-options-template",
		"NASA Center": "GSFC",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 176,
		"Categories": [
			"earth data science",
			"gibs",
			"global imagery browse services",
			"branding",
			"NASA",
			"eosdis",
			"Tiled WMS",
			"onearth",
			"worldview"
		],
		"Languages": [],
		"Software": "Worldview Options Template",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:data system",
			"nlp:information dissemination",
			"nlp:earth observations (from space)",
			"nlp:information system",
			"nlp:symbol",
			"nlp:flight control",
			"nlp:earth (planet)",
			"nlp:configuration management",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa-gibs/worldview-options-template",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-01-22",
		"Description": "The WinASSIST program uses a rule-oriented language to automatically generate input files for the SURE/WinSURE program. The user describes the failure behavior and recovery behavior of a fault-tolerant computer system in an abstract language. The WinASSIST program then automatically generates a corresponding semi-Markov model. The abstract language allows efficient description of large, complex systems. A one-page WinASSIST-language description may result in a semi-Markov model with thousands of states and transitions. The WinASSIST program also provides model-reduction techniques to facilitate efficient modeling of large systems.",
		"Public Code Repo": "https://github.com/nasa/WinASSIST",
		"NASA Center": "LaRC",
		"Contributors": ["rwbutler4"],
		"Labor_Hours": 14528,
		"Categories": [
			"Design and Integration Tools",
			"Markov Model Generation",
			"NASA",
			"Open Source",
			"LaRC",
			"Reliability Analysis",
			"Fault Tolerance"
		],
		"Languages": [],
		"Software": "WinASSIST: (Windows Abstract Semi-Markov Specification Interface To The SURE Tool)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:fault tolerance",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:failure analysi",
			"nlp:programming language",
			"nlp:system failure",
			"nlp:computer systems design",
			"nlp:error detection code",
			"nlp:computer systems performance"
		],
		"External Link": "https://github.com/nasa/WinASSIST",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-01-22",
		"Description": "This package is used by aerospace flight software developers to predict the reliability of flight-critical computer processes.",
		"Public Code Repo": "https://github.com/nasa/WinSURE",
		"NASA Center": "LaRC",
		"Contributors": ["rwbutler4"],
		"Labor_Hours": 24544,
		"Categories": [
			"Design and Integration Tools",
			"Markov Model Generation",
			"NASA",
			"Open Source",
			"LaRC",
			"Reliability Analysis",
			"Fault Tolerance"
		],
		"Languages": [],
		"Software": "Windows Semi-Markov Range Evaluator (WinSURE)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/WinSURE",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2011-09-13",
		"Description": "AXCS enables smartphones and other mobile devices to be utilized as a ground-based test bed for operations in extreme environments. For NASA, the technology is currently being used to evaluate hardware for balloon launches. The software's tool kits provide environmental and situational measurements, command and data handing (CD&H) functions, events timing, data logging, and communications with external devices. ",
		"Public Code Repo": "https://github.com/cboshuizen/AXCS",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 5392,
		"Categories": [
			"mobile devices",
			"NASA",
			"Operations",
			"Open Source",
			"ARC",
			"operations"
		],
		"Languages": [],
		"Software": "Autonomous eXplorer Control System (AXCS)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:biomedical data",
			"nlp:real time operation",
			"nlp:data acquisition",
			"nlp:bioinstrumentation",
			"nlp:medical equipment",
			"nlp:software development tool",
			"nlp:command and control",
			"nlp:data processing",
			"nlp:hardware"
		],
		"External Link": "https://github.com/cboshuizen/AXCS",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-01-08",
		"Description": "Savors is a tool for security event monitoring, analysis, and response. The technology scales to real-world environments and uses high-end computing resources on-demand to compile behavior profiles that point to anomalous behavior. Auralization allows both monitoring and analysis to be performed in parallel and draws attention to critical events in one tool when utilizing another. Remote data access and response capabilities across distributed resources are enabled using grid computing that provides a secure, single sign-on environment.",
		"Public Code Repo": "https://github.com/pkolano/savors",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 2816,
		"Categories": [
			"Design and Integration Tools",
			"NASA",
			"ARC",
			"Open Source"
		],
		"Languages": [],
		"Software": "Savors: A Scalable Aural-Visual Environment for Security Event Monitoring, Analysis, And Response",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:distributed processing",
			"nlp:response time (computers)",
			"nlp:warning system",
			"nlp:computational grid",
			"nlp:security",
			"nlp:computer systems design",
			"nlp:computer network",
			"nlp:computer information security",
			"nlp:access control",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://pkolano.github.io/projects/savors.html",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-04-26",
		"Description": "This innovation will query using a suite of operators in the Netmark/XDB query language to retrieve elements based on the absolute value of tags in the XML source. In an earlier version of the software, element retrieval was based solely on \"full-text\" term searches of the tags and their values. ",
		"Public Code Repo": "https://sourceforge.net/projects/darcxdb3",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov", "Chris Knight"],
		"Labor_Hours": 96848,
		"Categories": [
			"Data Warehousing",
			"Data Servers Processing and Handling",
			"XML",
			"Front-Ends",
			"NASA",
			"Open Source",
			"ARC"
		],
		"Languages": [],
		"Software": "Netmark eXtensible DataBase, Data Access and Retrieval Composition (XDB3-DARC)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:man machine system",
			"nlp:robot",
			"nlp:operator performance",
			"nlp:visual task",
			"nlp:immobilization",
			"nlp:algorithm",
			"nlp:biology",
			"nlp:reliability",
			"nlp:data base"
		],
		"External Link": "https://sourceforge.net/projects/darcxdb3",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-01-11",
		"Description": "The libnfg software library describes how humans interact with their environment and with other humans. The tool provides a Monte Carlo analysis of user-specified \"network-form games,\" which are flexible modeling methodologies that combine Bayes nets and game theory to model complex systems.",
		"Public Code Repo": "http://ritchielee.net/wp-content/uploads/2015/11/libnfg-snap-1.0.zip",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 72544,
		"Categories": ["NASA", "Open Source", "ARC", "Crew and Life Support"],
		"Languages": [],
		"Software": "Network-Form Game Software Library (libnfg)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:complex system",
			"nlp:computerized simulation",
			"nlp:game theory",
			"nlp:network analysi",
			"nlp:neural net",
			"nlp:software development tool",
			"nlp:computer network",
			"nlp:programming environment",
			"nlp:systems analysi"
		],
		"External Link": "http://ritchielee.net/software/libnfg-snap-1-0/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "AutoBayes uses extended Bayesian networks, a powerful symbolic system, and algorithm schemas to automatically generate efficient and customized programs for data analysis. It generates a standardized design document containing a graphical representation of the Bayesian network and of the details regarding the code's generation.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/autobayes",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 1,
		"Categories": [
			"NASA",
			"ARC",
			"Data and Image Processing",
			"Open Source",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "AutoBayes: Automatic Design of Customized Analysis Algorithms and Programs",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"algorithm",
			"bayes theorem",
			"symbol",
			"data processing",
			"data reduction",
			"computer aided design",
			"network analysi",
			"neural net",
			"computer network",
			"design analysi"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/autobayes/",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2010-09-10",
		"Description": "MPD is a powerful and effective iterative algorithm for signal decomposition and feature extraction. The technology decomposes any signal into linear combinations of its dictionary elements, or \"atoms.\" ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mpd",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 400,
		"Categories": [
			"NASA",
			"ARC",
			"Data and Image Processing",
			"Open Source"
		],
		"Languages": [],
		"Software": "Highly Scalable Matching Pursuit Signal Decomposition Algorithm (MPD)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:finite element method",
			"nlp:atom",
			"nlp:pattern recognition",
			"nlp:signal analysi",
			"nlp:algorithm",
			"nlp:signal processing",
			"nlp:decomposition"
		],
		"External Link": "https://c3.nasa.gov/dashlink/resources/125/",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2013-03-28",
		"Description": "The Hypatheon suite of software tools provide a searchable database capability for the specialized domain of formalized mathematics. The technology is designed to be a companion to a specific tool called PVS, which supports an emerging type of advanced software verification intended for safety-critical systems. Hypatheon aims to enhance PVS users' productivity by first indexing the mathematical theories rendered in the PVS specification language, then making their contents searchable by an interactive software tool.",
		"Public Code Repo": "https://github.com/nasa/pvslib/tree/master/Hypatheon-1.2",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov"],
		"Labor_Hours": 7296,
		"Categories": [
			"NASA",
			"LaRC",
			"Data and Image Processing",
			"Open Source"
		],
		"Languages": [],
		"Software": "Hypatheon-Searchable Database Capability for Formalized Mathematics",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:specification",
			"nlp:user requirement",
			"nlp:programming language",
			"nlp:language",
			"nlp:formalism",
			"nlp:computer systems design",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18232-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-08-12",
		"Description": "This software allows the user to specify a time series over multiple variables to search within massive datasets. The tool will return a listing of events (a time series) from the database that spans multiple variables and is within a threshold distance from the query. Experiments on numerous real aviation datasets have demonstrated the algorithm's capability to uncover potential aircraft safety events (as validated by multiple aviation safety experts and airlines). ",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mts-search",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 240,
		"Categories": [
			"NASA",
			"ARC",
			"Data and Image Processing",
			"Open Source",
			"usg-artificial-intelligence",
			"time-series",
			"timeseries",
			"multivariate"
		],
		"Languages": [],
		"Software": "Multivariate Time Series Search Capability to Identify Complex Patterns in Large Datasets",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"data base",
			"query language",
			"data base",
			"time series analysi",
			"airline operation",
			"safety",
			"algorithm",
			"flight safety",
			"civil aviation",
			"aircraft accident"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/mts-search/",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2012-03-31",
		"Description": "Providing a toolbox of functionality for MATLAB, this NASA-developed software detects precursor wiring faults (e.g., chafing) in shielded impedance-controlled cabling using measurements from off-the-shelf, time-domain reflectometry or vector-network analyzer hardware. The technology combines high-fidelity analytical physics models for signal propagation with fast Bayesian inference algorithms for intrinsic cable and fault-parameter retrieval.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/project/wiring",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 7504,
		"Categories": [
			"NASA",
			"Electronics and Electrical Power",
			"ARC",
			"Open Source"
		],
		"Languages": [],
		"Software": "Physics-Model-Based Wiring Fault Detection Toolbox for MATLAB",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:fault detection",
			"nlp:signal analyzer",
			"nlp:real time operation",
			"nlp:time series analysi",
			"nlp:network analysi",
			"nlp:neural net",
			"nlp:electrical impedance",
			"nlp:bayes theorem",
			"nlp:algorithm",
			"nlp:inference"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/project/wiring/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-07-26",
		"Description": "Desktop Exploration of Remote Terrain (DERT) is a software tool for exploring large Digital Terrain Models (DTMs) in 3D. It aids in understanding topography and spatial relationships of terrain features, as well as performing simple analysis tasks relevant to the planetary science community.",
		"Public Code Repo": "https://github.com/nasa/DERT",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 31696,
		"Categories": [
			"Earth",
			"Environmental Science",
			"NASA",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"ARC",
			"Space",
			"Air",
			"Exoplanet"
		],
		"Languages": [],
		"Software": "Desktop Exploration of Remote Terrain (DERT)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:aerospace science",
			"nlp:planetary geology",
			"nlp:terrain",
			"nlp:robotic",
			"nlp:space exploration",
			"nlp:software development tool",
			"nlp:topography",
			"nlp:personal computer",
			"nlp:structural properties (geology)",
			"nlp:geology"
		],
		"External Link": "https://github.com/nasa/DERT",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2012-04-05",
		"Description": "GeoCam is a geospatial system for disaster response that consists of (1) low-cost consumer hardware (i.e., a digital camera or cell phone, position/orientation sensors, and an optional embedded controller) and (2) a Web-based workflow that enables images and other geo-referenced data to be shared and viewed in a variety of ways. GeoCam includes software that computes image location and provides for geo-rectification, KML-formatted geospatial data generation, image management, and geo-referenced data sharing.",
		"Public Code Repo": "https://github.com/geocam/geocamShare",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 272,
		"Categories": [
			"Earth",
			"Environmental Science",
			"NASA",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"ARC",
			"Space",
			"Air",
			"Exoplanet"
		],
		"Languages": [],
		"Software": "GeoCam, Version 2",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:photogrammetry",
			"nlp:disaster",
			"nlp:low cost",
			"nlp:imagery",
			"nlp:solar cell",
			"nlp:geometric rectification (imagery)",
			"nlp:image analysi",
			"nlp:position (location)",
			"nlp:cost effectivenes",
			"nlp:image processing"
		],
		"External Link": "https://github.com/geocam/geocamShare",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-12-16",
		"Description": "The Kepler archive contains time-series data calibrated and reduced from detector pixels. The pipelined reduction includes the removal of time-series trends systematic to a spacecraft and its environment.",
		"Public Code Repo": "https://github.com/KeplerGO/PyKE/",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 11104,
		"Categories": [
			"Earth",
			"Environmental Science",
			"NASA",
			"Open Source",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"ARC",
			"Space",
			"Air",
			"Exoplanet"
		],
		"Languages": [],
		"Software": "Kepler Community Data Analysis Tools (PyKE)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft instrument",
			"nlp:data acquisition",
			"nlp:time series analysi",
			"nlp:time dependence",
			"nlp:aerospace environment",
			"nlp:radiation counter",
			"nlp:data processing",
			"nlp:radiation detector",
			"nlp:data reduction",
			"nlp:time measurement"
		],
		"External Link": "http://keplerscience.arc.nasa.gov/software.html#pyke",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2011-03-30",
		"Description": "EUROPA is a general-purpose, reusable, artificial intelligence software system. The tool generates plans for performing complex activities in parallel. Functionality includes the capability of verifying that a plan satisfies all constraints. ",
		"Public Code Repo": "https://github.com/nasa/europa",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 122064,
		"Categories": ["NASA", "Autonomous Systems", "ARC", "Open Source"],
		"Languages": [],
		"Software": "Extendable Uniform Remote Operations Planning Architecture (EUROPA) 2.1",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:evaluation",
			"nlp:computerized simulation",
			"nlp:artificial intelligence",
			"nlp:software development tool",
			"nlp:computer systems design",
			"nlp:expert system",
			"nlp:constraint",
			"nlp:planning",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://github.com/nasa/europa",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-01-09",
		"Description": "The NASA Tensegrity Robotics Toolkit (NTRT) is a collection of C++  and MATLAB software modules for the modeling, simulation, and control of Tensegrity Robots.  Tensegrity Robots are a biologically inspired approach to building robots based on the tension networks of tensegrity structures, which have no rigid connections between elements.  The NTRT was created to enable: the rapid co-exploration of structures and controls in a physics based simulation environment; the development of tensegrity robotics algorithms such as structural analysis, kinematics, and motion planning; and the validation of the algorithms and controls on hardware prototypes of the tensegrity robots.\r\n\r\n",
		"Public Code Repo": "https://github.com/NASA-Tensegrity-Robotics-Toolkit/NTRTsim",
		"NASA Center": "ARC",
		"Contributors": ["arc-sra-team@mail.nasa.gov"],
		"Labor_Hours": 59904,
		"Categories": ["NASA", "Autonomous Systems", "ARC", "Open Source"],
		"Languages": [],
		"Software": "NASA Tensegrity Robotics Toolkit (NTRT) v1",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:computerized simulation",
			"nlp:robotic",
			"nlp:trajectory planning",
			"nlp:robot",
			"nlp:control simulation",
			"nlp:robot dynamic",
			"nlp:active control",
			"nlp:algorithm",
			"nlp:robot control",
			"nlp:kinematic"
		],
		"External Link": "https://github.com/NASA-Tensegrity-Robotics-Toolkit/NTRTsim",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-02-28",
		"Description": "This implementation of the Dantzig-Wolfe decomposition is built upon the GNU Linear Programming Kit. The technology provides a command-line tool for solving properly decomposed linear programs.",
		"Public Code Repo": "https://github.com/alotau/dwsolver",
		"NASA Center": "ARC",
		"Contributors": ["Joseph Rios"],
		"Labor_Hours": 66784,
		"Categories": [
			"Linear Programming",
			"NASA",
			"Optimization",
			"Open Source",
			"ARC",
			"Aeronautics"
		],
		"Languages": [],
		"Software": "Parallel Dantzig-Wolfe Decomposition",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic programming",
			"nlp:mathematical programming",
			"nlp:quadratic programming",
			"nlp:linear programming",
			"nlp:programming language",
			"nlp:programming environment",
			"nlp:nonlinear programming",
			"nlp:on-line system",
			"nlp:command and control",
			"nlp:decomposition"
		],
		"External Link": "https://github.com/nasajoey/dwsolver",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-12-03",
		"Description": "NASTRAN is a finite element analysis program that was originally developed for NASA in the late 1960s under U.S. government funding for the aerospace industry. The software suite provides engineers a comprehensive simulation solution for insight into structural behavior. NASTRAN source code is integrated in a number of different software packages, which are distributed by a range of companies.",
		"Public Code Repo": "https://github.com/nasa/NASTRAN-95",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov", "jasonduley"],
		"Labor_Hours": 235200,
		"Categories": [
			"Design and Integration Tools",
			"CAD",
			"NASA",
			"FEA",
			"Open Source",
			"NASTRAN",
			"LaRC",
			"Structural Analysis"
		],
		"Languages": [],
		"Software": "NASA STRuctrual ANalysis (NASTRAN)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:structural analysi",
			"nlp:aerospace industry",
			"nlp:computerized simulation",
			"nlp:finite element method",
			"nlp:simulation",
			"nlp:computer aided design",
			"nlp:software development tool",
			"nlp:industry",
			"nlp:three dimensional model"
		],
		"External Link": "https://github.com/nasa/NASTRAN-95",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-10-12",
		"Description": "VICAR, which stands for Video Image Communication And Retrieval, is a general purpose image processing software system that has been developed since 1966 to digitally process multi-dimensional imaging data. VICAR was developed primarily to process images from the Jet Propulsion Laboratory's unmanned planetary spacecraft. It is now used for a variety of other applications including biomedical image processing, cartography, earth resources, astronomy, and geological exploration. ",
		"Public Code Repo": "https://github.com/nasa/VICAR",
		"NASA Center": "JPL",
		"Contributors": ["Bob Deen"],
		"Labor_Hours": 690832,
		"Categories": [
			"Data and Image Processing",
			"Image Processing",
			"NASA",
			"JPL",
			"Graphics",
			"Visualization",
			"Open Source",
			"Analysis",
			"VICAR",
			"Toolkit"
		],
		"Languages": [],
		"Software": "VICAR - Video Image Communication And Retrieval",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:biomedical data",
			"nlp:real time operation",
			"nlp:imaging technique",
			"nlp:teleoperator",
			"nlp:signal processing",
			"nlp:medical equipment",
			"nlp:space exploration",
			"nlp:image analysi",
			"nlp:data processing",
			"nlp:image processing"
		],
		"External Link": "http://www-mipl.jpl.nasa.gov/vicar_open.html",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2015-09-08",
		"Description": "IPv6 Extension module for Python that allows a user to enable IPv6 features not yet available for any Python versions.  Currently, it allows for IPv6 flow labels to be enabled for a given Python socket object.",
		"Public Code Repo": "https://github.com/nasa/ipv6_python",
		"NASA Center": "GRC",
		"Contributors": ["jishac"],
		"Labor_Hours": 368,
		"Categories": [
			"IPv6",
			"Flow Labels",
			"Networking",
			"Network",
			"Sockets",
			"Data and Image Processing",
			"NASA",
			"GRC",
			"Open Source",
			"Python",
			"IP"
		],
		"Languages": [],
		"Software": "IPv6 Python Extension Module",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphical user interface",
			"nlp:user manuals (computer programs)",
			"nlp:joints (junctions)",
			"nlp:three dimensional body",
			"nlp:object-oriented programming",
			"nlp:hydroelectricity",
			"nlp:graphs (charts)",
			"nlp:human-computer interface",
			"nlp:recognition",
			"nlp:user requirement"
		],
		"External Link": "https://github.com/nasa/ipv6_python/wiki",
		"creator": "mile@proyecto.hack",
		"collaborators": ["rose@proyecto.hack"]
	},
	{
		"Update_Date": "2016-04-28",
		"Description": "The Channel  Emulator (CE) is a  software-based network testing  tool.  Its primary functions are providing data framing services, acting  as  a flexible  protocol gateway, and providing network emulation capabilities. \r\n\r\nThe software caneasily accept one protocol, optionally extract the payload, send out as different protocol, or encapsulate one in another.  It can also introduce delays up to deep space levels, and introduce bit errors and other link degradations.",
		"Public Code Repo": "https://github.com/nasa/channel-emulator",
		"NASA Center": "GRC",
		"Contributors": ["tkollar", "jishac"],
		"Labor_Hours": 27584,
		"Categories": [
			"Network",
			"TM",
			"NASA",
			"System Testing",
			"GRC",
			"Open Source",
			"Framing",
			"Error",
			"AOS",
			"Emulation",
			"IP",
			"Channel",
			"Delay"
		],
		"Languages": [],
		"Software": "Channel Emulator",
		"License": ["NASA Open Source", "GPLv2"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:data link",
			"nlp:evaluation",
			"nlp:voice communication",
			"nlp:channels (data transmission)",
			"nlp:bit error rate",
			"nlp:telecommunication",
			"nlp:computer network",
			"nlp:communication network",
			"nlp:error analysi"
		],
		"External Link": "https://github.com/nasa/channel-emulator/wiki",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-06-29",
		"Description": "The network-traffic-analysis-tools directory contains a collection of applications written in C to help both analyze and visualize MPTCP packet traces.",
		"Public Code Repo": "https://github.com/nasa/multipath-tcp-tools",
		"NASA Center": "GRC",
		"Contributors": ["jishac"],
		"Labor_Hours": 3040,
		"Categories": [
			"Network",
			"Transmission Control Protocol",
			"Plotting",
			"Plot",
			"NASA",
			"Analysis",
			"Multipath",
			"MPTCP",
			"IP",
			"Communication",
			"TCP",
			"network traffic analysis"
		],
		"Languages": [],
		"Software": "Multipath TCP (MPTCP) Tools, Analytics, and Configurations",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:packet switching",
			"nlp:network analysi",
			"nlp:telecommunication",
			"nlp:network",
			"nlp:traffic",
			"nlp:communication network",
			"nlp:computer network",
			"nlp:packets (communication)",
			"nlp:network control"
		],
		"External Link": "https://github.com/nasa/multipath-tcp-tools",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-09-03",
		"Description": "Earthdata Search is a web application developed by NASA EOSDIS to enable data discovery, search, comparison, visualization, and access across EOSDIS' Earth Science data holdings",
		"Public Code Repo": "https://github.com/nasa/earthdata-search",
		"NASA Center": "GSFC",
		"Contributors": [
			"Patrick Quinn",
			"Bo Sun",
			"Matthew Crouch",
			"Jeff Siarto"
		],
		"Labor_Hours": 159792,
		"Categories": [
			"Data Servers Processing and Handling",
			"Remote Sensing",
			"EOSDIS",
			"Earth Science",
			"GIBS",
			"Data Visualization",
			"NASA",
			"GSFC",
			"Open Source",
			"Data Filtering",
			"Data Discovery",
			"OPeNDAP"
		],
		"Languages": [],
		"Software": "Earthdata Search Web Application",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:data storage",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:data retrieval",
			"nlp:earth (planet)",
			"nlp:data base"
		],
		"External Link": "https://search.earthdata.nasa.gov",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-07-07",
		"Description": "This Python package will calculate beam blockage in polarimetric weather radar data using the specific differential phase (KDP) and fully self-consistent (FSC) methods of Timothy J. Lang et al. (2009; J. Atmos. Oceanic Technol.). This information can be used to correct the radar data when the radar beams intersect objects like trees, buildings, and mountains.",
		"Public Code Repo": "https://github.com/nasa/PyBlock",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 1984,
		"Categories": [
			"Meteorology",
			"Earth Science",
			"GPM",
			"NASA",
			"Radar",
			"Open Source",
			"MSFC",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"Precipitation",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Python Polarimetric Radar Beam Blockage Calculation (PyBlock)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:trees (mathematics)",
			"nlp:information theory",
			"nlp:computerized simulation",
			"nlp:object-oriented programming",
			"nlp:radar imagery",
			"nlp:graphs (charts)",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:self organizing system"
		],
		"External Link": "https://github.com/nasa/PyBlock/wiki",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-07-07",
		"Description": "This is an object-oriented Python module that facilitates precipitation retrievals (e.g., hydrometeor type, precipitation rate, precipitation mass, particle size distribution information) from polarimetric radar data. It leverages existing open source radar software packages to perform all-in-one retrievals that are then easily visualized or saved using existing software.",
		"Public Code Repo": "https://github.com/nasa/DualPol",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 592,
		"Categories": [
			"Meteorology",
			"Earth Science",
			"GPM",
			"NASA",
			"Radar",
			"Open Source",
			"MSFC",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"Precipitation",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Python Interface to Dual-Pol Radar Algorithms (DualPol)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:object-oriented programming",
			"nlp:information retrieval",
			"nlp:radar imagery",
			"nlp:distribution function",
			"nlp:alpha particle",
			"nlp:data retrieval",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/DualPol/wiki",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-07-07",
		"Description": "SingleDop is a software module, written in the Python programming language, that will retrieve two-dimensional low-level winds from either real or simulated Doppler radar data.",
		"Public Code Repo": "https://github.com/nasa/SingleDop",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 912,
		"Categories": [
			"Meteorology",
			"Earth Science",
			"NASA",
			"Radar",
			"toolkit",
			"Winds",
			"Doppler",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Single Doppler Retrieval Toolkit (SingleDop)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:doppler radar",
			"nlp:wind profile",
			"nlp:radar measurement",
			"nlp:wind velocity measurement",
			"nlp:wind variation",
			"nlp:radar tracking",
			"nlp:wind (meteorology)",
			"nlp:wind measurement",
			"nlp:wind effect",
			"nlp:meteorological radar"
		],
		"External Link": "https://github.com/nasa/SingleDop/wiki",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-04-13",
		"Description": "The product of this work is a communication protocol which allows microcontrollers to talk with eachother in a structured fashion. As such, it is embodied in C++ code that runs on the microcontroller. The software is not mission certified and is being used for demonstration and testing purposes only. The current goal of this project is to realease the software open source to enable community participation. We have external companies requesting that we release this software.",
		"Public Code Repo": "https://github.com/nasa/EADINLite",
		"NASA Center": "GRC",
		"Contributors": ["ehariton"],
		"Labor_Hours": 320,
		"Categories": [
			"Protocol",
			"NASA",
			"GRC",
			"Open Source",
			"Propulsion",
			"Communication",
			"Microcontroller"
		],
		"Languages": [],
		"Software": "EADIN Communication Protocol",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:evaluation",
			"nlp:interprocessor communication",
			"nlp:mission planning",
			"nlp:software reliability",
			"nlp:data transmission",
			"nlp:program verification (computers)",
			"nlp:communication network",
			"nlp:software development tool",
			"nlp:project management"
		],
		"External Link": "https://github.com/nasa/EADINLite/wiki",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-08-20",
		"Description": "The Open Scheduling and Planning Interface for Exploration (OpenSPIFe) is an integrated planning and scheduling toolkit based on hundreds of hours of expert observation, use, and refinement of state-of-the-art planning and scheduling technology for several applications within NASA. It was designed from the ground up with the needs of the operational user in mind, and it presents unique solutions to a number of problems common in other commercial and homegrown systems.\r\n\r\n",
		"Public Code Repo": "https://github.com/nasa/OpenSPIFe",
		"NASA Center": "ARC",
		"Contributors": ["abencomo", "robert-nado"],
		"Labor_Hours": 254192,
		"Categories": [
			"Design and Integration Tools",
			"tool",
			"NASA",
			"Open Source",
			"scheduling",
			"ARC",
			"Planning"
		],
		"Languages": [],
		"Software": "Open Scheduling and Planning Interface for Exploration (OpenSPIFe)",
		"License": ["NASA Open Source", "Apache-2.0", "EPL", "MPLv2", "LGPL"],
		"Categories_NLP": [
			"nlp:scheduling",
			"nlp:computer systems design",
			"nlp:expert system",
			"nlp:artificial intelligence",
			"nlp:project planning",
			"nlp:technology assessment",
			"nlp:human-computer interface",
			"nlp:problem solving"
		],
		"External Link": "https://github.com/nasa/OpenSPIFe",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-08-26",
		"Description": "T-MATS is open source software code. The Toolbox for the Modeling and Analysis of Thermodynamic Systems (T-MATS) is a Simulink toolbox intended for use in the modeling and simulation of thermodynamic systems and their controls. T-MATS contains generic thermodynamic and controls components that may be combined with a variable input iterative solver and optimization algorithm to create complex systems to meet the needs of a developer. Developement of this tool was completed on behalf of the NASA Aviation Safety Program's Vehicle Systems Safety Technologies (VSST) project located at the Glenn Research Center in Cleveland, OH. ",
		"Public Code Repo": "https://github.com/nasa/T-MATS",
		"NASA Center": "ARC",
		"Contributors": [
			"chapman178",
			"cheesie67",
			"DanBerrios",
			"danielpacak"
		],
		"Labor_Hours": 17600,
		"Categories": [
			"Turbojet",
			"analysis",
			"Turbine",
			"Open Source",
			"modeling",
			"numerical methods",
			"control system",
			"tool",
			"TMATS",
			"Jacobian Calculation",
			"Aeronautics",
			"Nozzle",
			"Newton-Raphson",
			"Inlet",
			"GRC",
			"Propulsion",
			"Compressor",
			"thermodynamics",
			"Aircraft Engine",
			"NASA",
			"Jet",
			"open source",
			"Turbofan"
		],
		"Languages": [],
		"Software": "Toolbox for the Modeling and Analysis of Thermodynamic Systems (T-MATS)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:complex system",
			"nlp:computerized simulation",
			"nlp:simulation",
			"nlp:software development tool",
			"nlp:control simulation",
			"nlp:systems analysi",
			"nlp:algorithm"
		],
		"External Link": "https://github.com/nasa/T-MATS",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-03-29",
		"Description": "This technology contributes several core modules to support safety case models and offers a service-based application programming interface that enables new model-processing capabilities to be plugged into the workbench.",
		"Public Code Repo": "https://github.com/nasa/CertWare",
		"NASA Center": "LaRC",
		"Contributors": ["mrbcuda", "mrbkt"],
		"Labor_Hours": 1141072,
		"Categories": [
			"Data and Image Processing",
			"NASA",
			"Open Source",
			"metrics",
			"safety cases",
			"LaRC",
			"project management",
			"planning",
			"CertWare"
		],
		"Languages": [],
		"Software": "CertWare Safety Case Workbench Software",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:dynamic programming",
			"nlp:mathematical programming",
			"nlp:mathematical model",
			"nlp:electronic module",
			"nlp:safety",
			"nlp:safety factor",
			"nlp:interface",
			"nlp:technology utilization",
			"nlp:data processing",
			"nlp:human-computer interface"
		],
		"External Link": "https://github.com/nasa/CertWare",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2014-06-17",
		"Description": "Here you'll find a growing collection of 3D models, textures, and images from inside NASA.",
		"Public Code Repo": "https://github.com/nasa/NASA-3D-Resources",
		"NASA Center": "ARC",
		"Contributors": ["jasonduley"],
		"Labor_Hours": 48,
		"Categories": [
			"images",
			"imagery",
			"visualizations",
			"NASA",
			"printing",
			"3D",
			"ARC",
			"repository",
			"models"
		],
		"Languages": [],
		"Software": "NASA-3D-Resources",
		"License": ["Pending Release", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/NASA-3D-Resources",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-05-13",
		"Description": "The EEPROM File System (EEFS) is a simple, reliable file system for embedded systems. The primary purpose of the EEFS is to provide a file system abstraction for EEPROM or PROM memories that is simple, efficient, and can be proven to be reliable.  The EEFS can be used on embedded systems where a file system is needed to access data from EEPROM, PROM, or RAM memory, but otherwise might not have the resources to deploy a full file system such as the MSDOS file system. The EEPROM file system can also be used in systems where the ability to dump, patch, and diagnose files is required. ",
		"Public Code Repo": "https://github.com/nasa/eefs",
		"NASA Center": "GSFC",
		"Contributors": ["acudmore"],
		"Labor_Hours": 3552,
		"Categories": [
			"file system",
			"Data Servers Processing and Handling",
			"NASA",
			"EEPROM File System Project",
			"eefs",
			"Open Source",
			"GSFC"
		],
		"Languages": [],
		"Software": "EEPROM File System",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:resource allocation",
			"nlp:random access memory",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:random acces",
			"nlp:time sharing"
		],
		"External Link": "https://github.com/nasa/eefs/",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-05-05",
		"Description": "The OSAL library isolates embedded application software from a Real-Time Operating System (RTOS). The technology provides a well-defined, generic interface to RTOS services; a generic interface to hardware services; and an implementation for several current RTO systems. By using the library, an embedded application can remain portable among multiple operating systems on multiple platforms. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/osal/",
		"Public Code Repo": "https://github.com/nasa/osal",
		"NASA Center": "GSFC",
		"Contributors": ["acudmore"],
		"Labor_Hours": 27296,
		"Categories": [
			"operating system abstraction layer library",
			"application",
			"Vehicle Management (Space/Air/Ground)",
			"NASA",
			"flight software systems",
			"Open Source",
			"GSFC"
		],
		"Languages": [],
		"Software": "Operating System Abstraction Layer (OSAL)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:operating systems (computers)",
			"nlp:response time (computers)",
			"nlp:information system",
			"nlp:distributed processing",
			"nlp:human-computer interface",
			"nlp:run time (computers)",
			"nlp:interface",
			"nlp:library",
			"nlp:time sharing"
		],
		"External Link": "https://github.com/nasa/osal",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-09-28",
		"Description": "39A is the software used to power the 2013 International Space Apps Challenge, a global hackathon focusing on space technology and issues.",
		"Public Code Repo": "https://github.com/nasa/39A",
		"NASA Center": "KSC",
		"Contributors": ["skytland"],
		"Labor_Hours": 24496,
		"Categories": [
			"software",
			"International Space Apps Challenge",
			"2013",
			"NASA",
			"Hackathon",
			"operations"
		],
		"Languages": [],
		"Software": "39A",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:airborne/spaceborne computer",
			"nlp:aerospace system",
			"nlp:computerized simulation",
			"nlp:software reliability",
			"nlp:software development tool",
			"nlp:aerospace engineering",
			"nlp:technology utilization",
			"nlp:technology assessment",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa/39A",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-01-13",
		"Description": "The Vehicle Sketch Pad (VSP) is an aircraft geometry tool for rapid evaluation of advanced design concepts. Fast and accurate geometry modeling allows the designer to use more complex analysis methods earlier in the design process and reduces reliance on empiricism in conceptual design. VSP includes tools to model and export the internal structural layout.",
		"Public Code Repo": "https://github.com/nasa/OpenVSP",
		"NASA Center": "ARC",
		"Contributors": ["ramcdona"],
		"Labor_Hours": 87968,
		"Categories": [
			"Design and Integration Tools",
			"tool",
			"NASA",
			"3D model",
			"Open Source",
			"LaRC",
			"repository",
			"open source"
		],
		"Languages": [],
		"Software": "Vehicle Sketch Pad (VSP)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:aircraft configuration",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:structural design",
			"nlp:aircraft design",
			"nlp:aerospace vehicle",
			"nlp:hypersonic aircraft",
			"nlp:military aircraft",
			"nlp:aircraft model"
		],
		"External Link": "https://github.com/nasa/OpenVSP",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2011-12-28",
		"Description": "OpenMDAO version 0.1 is the initial version of the next generation Multidisciplinary Design Analysis and Optimization (MDAO) open source framework.   OpenMDAO is the open source framework developed by NASA that will be accessible via an open source website to reach the entire broad based MDAO community to facilitate advancing the science of MDAO.  MDAO covers a vast set of capabilities, including a flexible framework and state of the art discipline codes.  This innovation relates specifically to the framework.  OpenMDAO provides the core software infrastructure to integrate multidisciplinary variable fidelity tools and enable design, analysis, and optimization of complex systems.  Currently, the OpenMDAO version 0.1 functionalities include component linking, data passing, driver interface, and lazy evaluation.  This initial basic capability of the framework is sufficient for users to run and optimize their analysis after they integrate their specific component codes.  As OpenMDAO evolves, the following capabilities will be included in the framework:  interprocess communications, error handling, user interfaces, geometry application program interfaces (APIs), plug-in interfaces, utilities to wrap tools, versioning, and parallel processing support.  To be clear, the framework will enable the integration of, but will not include: optimizers, solvers, visualization tools, custom data types, script components, and discipline codes.  AEROSPACE:  To meet the present and future economic and environmental challenges facing air transportation, aviation design must expand its focus from today's conventional \"wing-body-tail\" aircraft to more advanced vehicles.   The ability to design revolutionary aircraft to improve mobility and air transport efficiency is of paramount importance to the national economy, along with reducing our environmental impact and supporting national defense.   Technologies such as the one disclosed here incorporate progressively more sophisticated computational models and methods, enabling future aircraft designs today.",
		"Public Code Repo": "https://github.com/nasa/OpenMDAO-Framework",
		"NASA Center": "GRC",
		"Contributors": [
			"naylor-b",
			"Kenneth-T-Moore",
			"justinopenmdao",
			"swryan",
			"pziegfeld",
			"setowns1",
			"JustinSGray",
			"cnkavanaugh",
			"hschilling",
			"kmarsteller",
			"eshendricks"
		],
		"Labor_Hours": 102336,
		"Categories": [
			"Vehicle Management (Space/Air/Ground)",
			"NASA",
			"GRC",
			"Open Source",
			"code",
			"open source",
			"analytics"
		],
		"Languages": [],
		"Software": "Open MDAO Version 0.1: The Next Generation Multidisciplinary Design Analysis and Optimization (MDAO) Open Source Framework",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:aircraft structure",
			"nlp:mathematical model",
			"nlp:complex system",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:software development tool",
			"nlp:aircraft design",
			"nlp:aerospace vehicle"
		],
		"External Link": "https://github.com/nasa/OpenMDAO-Framework",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2011-12-23",
		"Description": "NASA World Wind is an intuitive software application supporting the interactive exploration of a variety of data presented within a geospatial context. The technology offers a 3D graphics user experience with seamless, integrated access to a variety of online data sources via open-standards protocols. ",
		"Public Code Repo": "https://github.com/nasa/World-Wind-Java",
		"NASA Center": "ARC",
		"Contributors": ["tgaskins"],
		"Labor_Hours": 944864,
		"Categories": [
			"SDK",
			"imagery",
			"NASA",
			"Open Source",
			"3D",
			"ARC",
			"Environmental Science (Earth, Air, Space, Exoplanet)"
		],
		"Languages": [],
		"Software": "Java World Wind",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:technology transfer",
			"nlp:data acquisition",
			"nlp:computer graphic",
			"nlp:standardization",
			"nlp:standard",
			"nlp:technology utilization",
			"nlp:human-computer interface",
			"nlp:access control"
		],
		"External Link": "https://github.com/nasa/World-Wind-Java",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "Vision Workbench (VW) is a modular, extensible computer vision framework that supports a range of tasks, including automated science and engineering analysis, large satellite image processing, and 2D/3D environment reconstruction. The framework provides a rapid C++ development environment as well as a flexible, multi-platform system to deploy computer vision applications. The module interface allows new capabilities to be rapidly integrated, and the dataflow architecture allows image-processing pipelines to be quickly developed and reconfigured. ",
		"Public Code Repo": "https://github.com/nasa/visionworkbench",
		"NASA Center": "ARC",
		"Contributors": [
			"zmoratto",
			"broxtronix",
			"novas0x2a",
			"khusmann",
			"anefian",
			"trey0",
			"mstyer",
			"mdhancher",
			"harguess",
			"iansaxton",
			"radishman",
			"ekpneo",
			"mallan",
			"iceboundflame"
		],
		"Labor_Hours": 93856,
		"Categories": [
			"imagery",
			"Data and Image Processing",
			"computer vision library",
			"NASA",
			"Open Source",
			"ARC",
			"image processing",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "NASA Vision Workbench (VW), Version 3",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"computer vision",
			"architecture (computers)",
			"image processing",
			"computer systems design",
			"pipeline",
			"image reconstruction",
			"human-computer interface",
			"parallel processing (computers)",
			"man machine system",
			"satellite imagery"
		],
		"External Link": "https://github.com/nasa/visionworkbench",
		"creator": "rose@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-02-04",
		"Description": "Apache OODT is NASA's first project to be stewarded at the open source Apache Software Foundation. OODT is middleware for information integration and for science data processing and retrieval. It provides components including file management, workflow management, resource management, and automated remote data acquisition, file crawling and ingestion, and science algorithm wrapping and integration.",
		"Public Code Repo": "http://oodt.apache.org/",
		"NASA Center": "JPL",
		"Contributors": [
			"Dr. Chris A. Mattmann",
			"Mr. Paul Ramirez",
			"Mr. Maziyar Boustani",
			"Ms. Shakeh Khudikyan",
			"Mr. Mike Joyce",
			"Mr. Rishi Verma",
			"Dr. Lewis John McGibbney",
			"Mr. Tyler Palsulich"
		],
		"Labor_Hours": 124368,
		"Categories": [
			"automated",
			"management",
			"remote data",
			"algorithm",
			"NASA",
			"workflow",
			"integration",
			"wrapping",
			"resource",
			"crawling",
			"ingestion",
			"science",
			"file",
			"acquisition"
		],
		"Languages": [],
		"Software": "Apache OODT",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:information retrieval",
			"nlp:algorithm",
			"nlp:management information system",
			"nlp:data retrieval",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base management system"
		],
		"External Link": "http://oodt.apache.org",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2010-11-19",
		"Description": "Save is a high-availability framework that manages IP addresses shared between multiple servers. It also monitors the health of those servers to determine which one should be actively servicing requests at any given time. Synchronization mechanisms allow configuration files to be kept consistent between systems and also allow commands to be executed across all servers of a particular type. Archival mechanisms provide automatic version control of configuration files to aid in recovery in case of errant configuration.",
		"Public Code Repo": "https://sourceforge.net/projects/save-ha",
		"NASA Center": "ARC",
		"Contributors": ["pkolano"],
		"Labor_Hours": 224,
		"Categories": [
			"health",
			"Data Servers Processing and Handling",
			"framework",
			"validation",
			"NASA",
			"Open Source",
			"archive",
			"administration",
			"ARC",
			"high availability",
			"systems"
		],
		"Languages": [],
		"Software": "Synchronization, Archival, Validation, and IP Exchange (Save)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:real time operation",
			"nlp:distributed processing",
			"nlp:computer systems design",
			"nlp:time optimal control",
			"nlp:synchronism",
			"nlp:command and control",
			"nlp:file maintenance (computers)",
			"nlp:configuration management",
			"nlp:computer systems performance"
		],
		"External Link": "http://save-ha.sourceforge.net",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-11-18",
		"Description": "An update to software originally named DAVEtools 0.5, this software-based technology is used for manipulating standard Dynamic Aerospace Vehicle Exchange Markup Language (DAVE-ML) models. The improved technology embeds the necessary initialization data into a data structure to keep the MATLAB workspace uncluttered and creates Simulink models from a generated MATLAB script.",
		"Public Code Repo": "https://github.com/nasa/DAVEtools",
		"NASA Center": "LaRC",
		"Contributors": ["bjax"],
		"Labor_Hours": 19024,
		"Categories": [
			"Simulation",
			"Data and Image Processing",
			"NASA",
			"Open Source",
			"Modeling",
			"Standards",
			"LaRC"
		],
		"Languages": [],
		"Software": "Java-Based Software Tool for Dynamic Aerospace Vehicle Exchange Markup Files",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:aerospace system",
			"nlp:mathematical model",
			"nlp:aerospace industry",
			"nlp:programming language",
			"nlp:aerospace engineering",
			"nlp:data structure",
			"nlp:aerospace vehicle",
			"nlp:data processing"
		],
		"External Link": "https://github.com/nasa/DAVEtools/wiki",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-10",
		"Description": "The Trick Simulation environment is a generic simulation toolkit used for constructing and running simulations.  The Trick 13 Interface Code Generator (ICG), a utility that provides math model class and structure layout data, has been rewritten and is based off of the open source clang/llvm project.  The Trick numerical integrators have been replaced with a common set of integrators.  Several core components are enhanced from previous Trick versions.  Trick 13 is now Open Source software and can be downloaded at http://code.nasa.gov/#/",
		"Public Code Repo": "https://github.com/nasa/Trick",
		"NASA Center": "JSC",
		"Contributors": ["alexlin0", "jmpenn"],
		"Labor_Hours": 143904,
		"Categories": [
			"Design and Integration Tools",
			"Simulation",
			"NASA",
			"JSC",
			"Open Source",
			"Framework"
		],
		"Languages": [],
		"Software": "Trick 13 Simulation Environment",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:c++ (programming language)",
			"nlp:simulation",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:data structure",
			"nlp:symbol",
			"nlp:data reduction",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/Trick/wiki",
		"creator": "rose@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-02-20",
		"Description": "This software supports FMI based model exchange with Trick based simulations. The Functional Mockup Interface (FMI) standard was developed in partnership with governmental, academic and commercial entities in the European Union. This standard is used to support the exchange of component models for complex system simulations throughout Europe and the United States. Trick simulations are used all across NASA for simulations that support human spaceflight activities. However, until now, there were no means to use FMI based models in a Trick based simulation or a method for providing Trick based models that were FMI compliant. This software provides implementation software to do both. There are two principal components to the software: A C based software implementation for wrapping Trick based C models that provide an FMI compliant interface; A collection of C++ classes that can be used in a Trick based simulation to use an FMI compliant model (FMU).",
		"Public Code Repo": "https://github.com/nasa/TrickFMI",
		"NASA Center": "JSC",
		"Contributors": ["ezcrues"],
		"Labor_Hours": 3728,
		"Categories": [
			"Simulation",
			"NASA",
			"Model Exchange",
			"JSC",
			"Framework"
		],
		"Languages": [],
		"Software": "TrickFMI",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:space flight",
			"nlp:mathematical model",
			"nlp:complex system",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:data acquisition",
			"nlp:simulation",
			"nlp:systems engineering",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/TrickFMI/wiki",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "MMM-Py reads, analyzes, and displays three-dimensional national mosaicked reflectivity data produced by NOAA's National Severe Storms Laboratory (NSSL). MMM-Py can read MRMS mosaics from either their unique binary format or their converted NetCDF format; it can also read and properly interpret the current mosaic design (4 regional tiles) as well as mosaics produced prior to late July 2013 (8 tiles). The technology can easily stitch multiple tiles together to provide a larger regional or national picture of precipitating weather systems. Composites, horizontal/vertical cross-sections, and combinations thereof are easily displayed using as little as one line of code.",
		"Public Code Repo": "https://github.com/nasa/MMM-Py",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 2048,
		"Categories": [
			"NMQ",
			"NASA",
			"Radar",
			"Visualization",
			"Open Source",
			"Analysis",
			"MSFC",
			"MRMS",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Marshall MRMS Mosaic Python Toolkit (MMM-Py)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:design analysi",
			"nlp:systems engineering",
			"nlp:reflectance",
			"nlp:weather",
			"nlp:data processing"
		],
		"External Link": "https://github.com/nasa/MMM-Py",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "This toolkit will read geolocated brightness temperature data (in ASCII format) from any flight of the AMPR airborne instrument.  A python script will pull out timing, brightness temperatures, and other information  from each channel/geolocation and store them as attributes using the appropriate type of numpy array. The approach consists of ingesting the entire file as a text string and then parsing and converting as necessary. The file is read and the data are populated when the class is instantiated with the full path and name of an AMPR file. Numerous visualization methods are provided, including track plots, strip charts, and Google Earth KMZs. In addition, polarization deconvolution is available.",
		"Public Code Repo": "https://github.com/nasa/PyAMPR",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 2288,
		"Categories": [
			"Radiometer",
			"AMPR",
			"NASA",
			"Visualization",
			"Open Source",
			"Analysis",
			"Airborne",
			"MSFC",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"Precipitation",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Python Advanced Microwave Precipitation Radiometer Data Toolkit (PyAMPR)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:information theory",
			"nlp:temperature measurement",
			"nlp:scientific visualization",
			"nlp:brightness temperature",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:file maintenance (computers)",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa/PyAMPR",
		"creator": "rose@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "PyTDA, an MSFC-based implementation of the National Center for Atmospheric Research (NCAR) Turbulence Detection Algorithm (NTDA), can be used for convective-scale analysis, situational awareness, and forensic meteorology. The software provides Python functions that will estimate turbulence from Doppler radar data.   It is written in the Python programming language.",
		"Public Code Repo": "https://github.com/nasa/PyTDA",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 1648,
		"Categories": [
			"Turbulence",
			"NASA",
			"Radar",
			"Open Source",
			"Analysis",
			"MSFC",
			"Doppler",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Python Turbulence Detection Algorithm (PyTDA)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:doppler radar",
			"nlp:radar measurement",
			"nlp:turbulence",
			"nlp:atmospheric",
			"nlp:radar tracking",
			"nlp:data processing",
			"nlp:atmospheric turbulence",
			"nlp:algorithm",
			"nlp:meteorology",
			"nlp:meteorological radar"
		],
		"External Link": "https://github.com/nasa/PyTDA",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "A collection of utility programs and reusable subroutine libraries supports computational fluid dynamics, particularly on multiblock structured grids. The technology is applicable to all flight regimes-subsonic, transonic, supersonic, and hypersonic. ",
		"Public Code Repo": "https://sourceforge.net/projects/cfdutilities/files/latest/download",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 1504,
		"Categories": [
			"application",
			"Design and Integration Tools",
			"optimization",
			"NASA",
			"data",
			"Open Source",
			"ARC",
			"interpolation",
			"CFD",
			"library"
		],
		"Languages": [],
		"Software": "Computational Fluid Dynamics (CFD) Utility Software Library",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computational grid",
			"nlp:multigrid method",
			"nlp:subroutine",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:computational fluid dynamic",
			"nlp:technology assessment",
			"nlp:library",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://sourceforge.net/projects/cfdutilities/",
		"creator": "rose@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-04",
		"Description": "The Crisis Mapping Toolkit (CMT) is a collection of tools for processing geospatial data (images, satellite data, etc.) into cartographic products that improve understanding of large-scale crises, such as natural disasters. The cartographic products produced by CMT include flood inundation maps, maps of damaged or destroyed structures, forest fire maps, population density estimates, etc. CMT is designed to rapidly process large-scale data using Google Earth Engine and other geospatial data systems. ",
		"Public Code Repo": "https://github.com/nasa/CrisisMappingToolkit",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 9392,
		"Categories": [
			"crisis mapping toolkit",
			"geospatial data systems",
			"NASA",
			"Open Source",
			"Google Earth",
			"data processing",
			"CMT",
			"ARC",
			"Environmental Science (Earth, Air, Space, Exoplanet)",
			"map"
		],
		"Languages": [],
		"Software": "Crisis Mapping Toolkit (CMT) v1",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:ecosystem",
			"nlp:insect",
			"nlp:geographic information system",
			"nlp:population",
			"nlp:image analysi",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa/CrisisMappingToolkit",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "In offline mode, MKAD performs automated anomaly detection on large heterogeneous data sets that contain both discrete symbols and continuous data streams.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mkad",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 9648,
		"Categories": [
			"usg-artificial-intelligence",
			"algorithm",
			"MKAD",
			"NASA",
			"System Testing",
			"Open Source",
			"OCSVM",
			"one class support vector machine",
			"ARC",
			"FOQA",
			"multiple kernel anomaly detection",
			"machine-learning",
			"anomaly-detection",
			"anomaly"
		],
		"Languages": [],
		"Software": "Multiple Kernel Anomaly Detection (MKAD) Algorithm",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"data flow analysi",
			"detection",
			"data reduction",
			"data processing",
			"data sampling",
			"symbol",
			"warning system",
			"signal detection",
			"data management",
			"digital data"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/mkad/",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"rose@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "IRC provides robust interactive and distributed control/monitoring of remote instruments. The IRC architecture combines the processing capabilities of Java with the power of XML to express hierarchical data in a human-readable, platform-independent format. For additional information, please visit: http://opensource.gsfc.nasa.gov/projects/IRC/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/IRC/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Troy Ames"],
		"Labor_Hours": 92736,
		"Categories": [
			"IRC",
			"framework",
			"NASA",
			"Operations",
			"monitoring",
			"Open Source",
			"GSFC",
			"control"
		],
		"Languages": [],
		"Software": "Interoperable Remote Component (IRC)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:numerical control",
			"nlp:data system",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:embedding",
			"nlp:human performance",
			"nlp:architecture (computers)",
			"nlp:data processing",
			"nlp:information management",
			"nlp:smart structure"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/IRC/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "rose@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Java Astrodynamics Toolkit (JAT) is a collection of Java components that aid flight dynamics engineers in performing space mission design; trajectory optimization; and spacecraft navigation, attitude-determination, and control systems analysis. Current capabilities include orbit propagation, orbit determination, maneuver planning, spacecraft attitude simulation, and 3D orbit and attitude visualization.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/JAT/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["David Gaylor"],
		"Labor_Hours": 43872,
		"Categories": [
			"simulation",
			"NASA",
			"GSFC",
			"Operations",
			"Open Source",
			"navigation",
			"JAT",
			"astrodynamics",
			"space mission design"
		],
		"Languages": [],
		"Software": "Java Astrodynamics Toolkit (JAT)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:trajectory",
			"nlp:navigation",
			"nlp:mission planning",
			"nlp:large space structure",
			"nlp:aerospace engineering",
			"nlp:control simulation",
			"nlp:control systems design",
			"nlp:flight control",
			"nlp:trajectory optimization"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/JAT/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Metadata Check is a command-line tool to check Earth Observing System (EOS) metadata with a metadata descriptor. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/metacheck/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/metacheck/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 4928,
		"Categories": [
			"Data Servers Processing and Handling",
			"NASA",
			"metadata",
			"data validation",
			"GSFC",
			"Open Source",
			"EOS"
		],
		"Languages": [],
		"Software": "Metadata Check",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:information system",
			"nlp:computer systems design",
			"nlp:systems engineering",
			"nlp:information retrieval",
			"nlp:computer network",
			"nlp:on-line system",
			"nlp:command and control",
			"nlp:information management",
			"nlp:management information system"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/metacheck/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "MYSTRAN is a Finite Element Analysis (FEA) processor.   MYSTRAN takes NASTRAN data decks as input and processes them to generate results files based on the inputs.   NASTRAN was originally developed at NASA GSFC in the 1960's.   The input files describe the mechanical nature of some piece of hardware and the loads or driving inputs that cause some reaction.   With this input MYSTRAN computes the responses to the driving inputs.  The theory and research for FEA analysis has been developed over decades.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/mystran/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Timothy Carnahan"],
		"Labor_Hours": 126144,
		"Categories": [
			"model analysis",
			"Data and Image Processing",
			"NASA",
			"FEA",
			"Open Source",
			"computer aided engineering",
			"GSFC",
			"Finite Element Analysis"
		],
		"Languages": [],
		"Software": "MYSTRAN",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:load distribution (forces)",
			"nlp:structural analysi",
			"nlp:finite element method",
			"nlp:dynamic response",
			"nlp:loads (forces)",
			"nlp:file maintenance (computers)",
			"nlp:data processing"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/mystran/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "RETRO offers methods and techniques for information retrieval (IR), including vector retrieval and probabilistic retrieval. The technology can be downloaded at: http://opensource.gsfc.nasa.gov/projects/RETRO/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/RETRO/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Jane Hayes"],
		"Labor_Hours": 12736,
		"Categories": [
			"Data and Image Processing",
			"software development",
			"requirements tracing",
			"NASA",
			"Open Source",
			"information retrieval",
			"RETRO",
			"GSFC"
		],
		"Languages": [],
		"Software": "Requirements Tracing On Target (RETRO)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:technology transfer",
			"nlp:information system",
			"nlp:technology utilization",
			"nlp:indexes (documentation)",
			"nlp:computer systems design",
			"nlp:information retrieval",
			"nlp:data retrieval",
			"nlp:technology assessment",
			"nlp:information management",
			"nlp:image processing"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/RETRO/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Worldview is a software tool designed for interactively browsing and downloading imagery from NASA's Earth observing satellites.  Building upon a set of open source mapping and user interface libraries, it provides an environment to visually discover interesting phenomena as observed by NASA satellites, then download the data for further analysis.  It was originally designed to address the needs of the near real time applications community to provide relevant information for time-critical scenarios such as wildfire and flood management.  As such, satellite imagery is available to be viewed in Worldview within four hours of observation, the imagery can be viewed in its highest, or native, resolution, and the imagery can be panned and zoomed rapidly through space and time to find the most relevant/cloud-free/etc information available.",
		"Public Code Repo": "https://github.com/nasa-gibs/worldview",
		"NASA Center": "GSFC",
		"Contributors": ["Ryan Boller"],
		"Labor_Hours": 86144,
		"Categories": [
			"data visualization",
			"imagery",
			"Data and Image Processing",
			"NASA",
			"satellite",
			"Open Source",
			"GSFC"
		],
		"Languages": [],
		"Software": "Worldview satellite imagery browsing and downloading tool",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth observations (from space)",
			"nlp:real time operation",
			"nlp:information system",
			"nlp:environmental monitoring",
			"nlp:satellite-borne photography",
			"nlp:high resolution",
			"nlp:virtual reality",
			"nlp:satellite imagery",
			"nlp:human-computer interface",
			"nlp:satellite observation"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/worldview/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Architecture Adaptive Computing Environment (ACE) is a parallel computing language, compiler, and runtime library. The purpose of ACE is to allow a programmer to more easily write parallel programs for a wide variety of parallel computer architectures.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ace/#software",
		"NASA Center": "GSFC",
		"Contributors": ["John Dorband"],
		"Labor_Hours": 113456,
		"Categories": [
			"Design and Integration Tools",
			"Parallel Programming",
			"NASA",
			"Open Source",
			"ANS C",
			"GSFC",
			"C"
		],
		"Languages": [],
		"Software": "Architecture Adaptive Computing Environment (ACE)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:programming language",
			"nlp:high level language",
			"nlp:run time (computers)",
			"nlp:compiler",
			"nlp:architecture (computers)",
			"nlp:fortran",
			"nlp:parallel programming",
			"nlp:library",
			"nlp:time sharing",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/ace/aCe_Distro_Notes.txt",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Core Flight Executive (cFE) provides software bus, time, event, executive, table, and file services, and it defines the application programming interface (API) for each set function. Applications subscribe to cFE services at runtime, making system modifications easy. Facilitating rapid prototyping, new applications can be compiled, linked, loaded, and started without requiring the entire system to be rebuilt.",
		"Public Code Repo": "https://sourceforge.net/projects/coreflightexec",
		"NASA Center": "GSFC",
		"Contributors": ["Susan Strege"],
		"Labor_Hours": 235312,
		"Categories": [
			"application",
			"programming",
			"Vehicle Management (Space/Air/Ground)",
			"NASA",
			"core flight",
			"Open Source",
			"GSFC",
			"environment"
		],
		"Languages": [],
		"Software": "Core Flight Executive (cFE)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:airborne/spaceborne computer",
			"nlp:real time operation",
			"nlp:operating systems (computers)",
			"nlp:embedded computer system",
			"nlp:avionic",
			"nlp:run time (computers)",
			"nlp:flight control",
			"nlp:file maintenance (computers)",
			"nlp:prototype",
			"nlp:time sharing"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/cfe/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "EMTG is a global trajectory optimization tool intended for interplanetary mission design. The technology automatically searches for the optimal sequence of planetary flybys and propulsive maneuvers for maximizing payload delivery at a destination. Designed for minimal user oversight, EMTG requires only start location, destination, allowable launch-date range, allowable flight time, and minimal spacecraft hardware information.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/emtg/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Jacob Englander"],
		"Labor_Hours": 18000,
		"Categories": [
			"interplanetary space",
			"space science",
			"NASA",
			"trajectory design",
			"Open Source",
			"GSFC",
			"Aeronautics"
		],
		"Languages": [],
		"Software": "Evolutionary Mission Trajectory Generator (EMTG)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:mission planning",
			"nlp:spacecraft trajectory",
			"nlp:spacecraft design",
			"nlp:interplanetary flight",
			"nlp:trajectory planning",
			"nlp:payload",
			"nlp:spacecraft maneuver",
			"nlp:trajectory optimization",
			"nlp:trajectory analysi",
			"nlp:space mission"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/emtg/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "This software library provides uniform access to HDF-EOS2 and HDF-EOS5 files through one set of application program interface (API) calls. Without the library, programs would have to be written twice to cover both HDF-EOS2 and HDF-EOS5 files. http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php#software",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 3328,
		"Categories": [
			"Data Servers Processing and Handling",
			"EOSDIS",
			"NASA",
			"GSFC",
			"Open Source",
			"validator",
			"HDF-EOS5",
			"EOS",
			"HDF-EOS2"
		],
		"Languages": [],
		"Software": "HDF-EOS2 and HDF-EOS5 Compatibility Library",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:graphical user interface",
			"nlp:human-computer interface",
			"nlp:fortran",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:interface",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:access control"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-02-01",
		"Description": "This software retrieves a set of atmospheric/surface/instrument parameters from a simultaneous fit to spectra from multiple absorption bands. The software uses an iterative, non-linear retrieval technique (optimal estimation). After the retrieval process has converged, the software performs an error analysis. The products of the software include all quantities needed to understand the information content of the measurement, its uncertainty, and its dependence on interfering atmospheric properties. Spectra from ground-based or space-based measurement with arbitrary observation geometry can be analyzed. The retrieved parameters can be chosen from a large set of atmospheric (e.g., volume mixing ratio of gases or aerosol optical depth), surface (e.g., Lambertian reflection), and instrument (e.g., spectral shift or instrument line shape parameters) parameters. The software uses an accurate, state-of-the-art, multiple-scattering radiative transfer code combined with an efficient polarization approximation to simulate measured spectra. The software enables fast and highly accurate simulations of broad spectral ranges by an optional parallelization of the frequency processing in the radiative transfer model. The framework was written with flexibility in mind. New algorithms and instruments are added by creating additional classes that implement the defined interfaces. Bindings are available for both Python and Lua.",
		"Public Code Repo": "https://github.com/nasa/RtRetrievalFramework",
		"NASA Center": "JPL",
		"Contributors": ["mcduffie", "mikesmyth"],
		"Labor_Hours": 1764272,
		"Categories": [
			"C++",
			"Earth Science",
			"Atmosphere",
			"Radiative Transfer",
			"NASA",
			"Python",
			"Retrieval",
			"Lua",
			"Framework",
			"Forward Model"
		],
		"Languages": [],
		"Software": "RT Retrieval Framework",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:simulation",
			"nlp:estimating",
			"nlp:data processing",
			"nlp:algorithm",
			"nlp:signal processing",
			"nlp:model",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa/RtRetrievalFramework",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-04-05",
		"Description": "This web application allows inventories of assets to be managed. Assets along with their specifications are added to the system and then used by users via a check-in/check-out function. The inventory can be browsed by category or using search. Users are given various roles within the system to allow them to perform certain functions such as view-only, check-in/check-out, modify, and full-control. Inventory managers can add and track detailed information on all inventory assets including manufacturer, storage location, custom attributes, and relationships with other assets. Assets can be found by browsing by category, search, location, or current user. Assets are checked out to specified locations by users.",
		"Public Code Repo": "https://github.com/nasa/isle",
		"NASA Center": "GRC",
		"Contributors": ["bruffridge", "bggardner"],
		"Labor_Hours": 25968,
		"Categories": ["MySQL", "PHP", "NASA", "Web", "Inventory"],
		"Languages": [],
		"Software": "Inventory System for Lab Equipment (ISLE)",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:user requirement",
			"nlp:human-computer interface",
			"nlp:information system",
			"nlp:computer systems design",
			"nlp:data storage",
			"nlp:information retrieval",
			"nlp:position (location)",
			"nlp:information management",
			"nlp:management information system"
		],
		"External Link": "https://github.com/nasa/isle",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-16",
		"Description": "Framework for mapping physical input devices (joysticks, gaming controllers, custom control panels, etc) to application-specific virtual controller interfaces. Pattern for writing device-independent code.",
		"Public Code Repo": "https://github.com/nasa/idf",
		"NASA Center": "JSC",
		"Contributors": ["dbankieris"],
		"Labor_Hours": 7664,
		"Categories": ["NASA", "Operations", "JSC", "Open Source", "Framework"],
		"Languages": [],
		"Software": "Input Device Framework (IDF)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:numerical control",
			"nlp:process control (industry)",
			"nlp:human-computer interface",
			"nlp:control theory",
			"nlp:control equipment",
			"nlp:controller",
			"nlp:active control",
			"nlp:symbol",
			"nlp:interface",
			"nlp:control systems design"
		],
		"External Link": "https://github.com/nasa/idf",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-07-13",
		"Description": "The Composite Damage (CompDam) Progressive Damage Analysis software is developed for the prediction of damage onset, damage progression and structural collapse of structures manufactured of fiber-reinforced plastic laminates. The emphasis has been on development of an analysis capability for application at the structural level. Hence, modeling of damage progression is undertaken at the meso-scale, where each ply of a laminate is represented as a homogenous orthotropic continuum. All of the composite damage mechanisms (matrix cracking, fiber breaking and kinking, and delamination) and their interactions are represented. The CompDam software is implemented as user written subroutines for use with the Abaqus commercial finite element code.  Input for CompDam includes ply-level material properties, and interface properties obtained from standard material characterization tests.  The output from CompDam includes damage variables associated with each damage mode. These damage variables describe the evolution of damage and are used to generate updated structural constitutive matrices and load redistribution as damage evolves. ",
		"Public Code Repo": "https://github.com/nasa/CompDam_DGD",
		"NASA Center": "LaRC",
		"Contributors": ["Frank Leone", "Andrew Bergan", "Carlos Dávila"],
		"Labor_Hours": 4752,
		"Categories": [
			"Composite Materials",
			"NASA",
			"FEA",
			"Open Source",
			"Abaqus",
			"Continuum Mechanics",
			"LaRC",
			"Progressive Damage",
			"Materials and Processes",
			"Fortran"
		],
		"Languages": [],
		"Software": "Composite Damage (CompDam) Progressive Damage Analysis Software",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:structural analysi",
			"nlp:finite element method",
			"nlp:matrix material",
			"nlp:composite material",
			"nlp:delaminating",
			"nlp:damage assessment",
			"nlp:laminate",
			"nlp:micromechanic",
			"nlp:fiber composite",
			"nlp:damage"
		],
		"External Link": "https://github.com/nasa/CompDam_DGD",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-02-11",
		"Description": "The Kalman Filter Code Augmentation release is a modification of Kalman Filter Toolbox, written by Kevin Murphy, 1998. It extends the existing open source software's capabilities and functionality by bookkeeping more detailed information on internal data structures, as well as ensuring the consistency of mathematical conventions used by subroutines that are part of a third-party tool called ASOS as part of the modification. Additional convergence criteria have also been included, as well as the possibility for establishing additional constraints and modelling paradigms.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/kalman",
		"NASA Center": "ARC",
		"Contributors": ["rodney.martin@nasa.gov"],
		"Labor_Hours": 176,
		"Categories": ["NASA", "model development", "code augmentation"],
		"Languages": [],
		"Software": "Kalman Filter Code Augmentation",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:information theory",
			"nlp:computerized simulation",
			"nlp:information system",
			"nlp:software development tool",
			"nlp:subroutine",
			"nlp:data structure",
			"nlp:symbol",
			"nlp:file maintenance (computers)",
			"nlp:data processing"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/kalman",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-02-11",
		"Description": "ROC (Receiver Operating Characteristic) curve Code Augmentation is a modification of ROC Curve code originally authored by G.C. Cawley that provides additional functionality. The inclusion of more detailed bookkeeping of new and existing internal data structures that provide more visibility into various performance measures is one of the new features.",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/roc",
		"NASA Center": "ARC",
		"Contributors": ["rodney.martin@nasa.gov"],
		"Labor_Hours": 32,
		"Categories": ["NASA", "model development", "code augmentation"],
		"Languages": [],
		"Software": "ROC Curve Code Augmentation",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:inclusion",
			"nlp:radar receiver",
			"nlp:binary code",
			"nlp:receiver",
			"nlp:data transmission",
			"nlp:performance prediction",
			"nlp:radio receiver",
			"nlp:performance test",
			"nlp:data base"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/roc",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2019-02-27",
		"Description": "Podaacpy is a python utility library for interacting with NASA JPL’s PO.DAAC.",
		"Public Code Repo": "https://github.com/nasa/podaacpy",
		"NASA Center": "JPL",
		"Contributors": [
			"lewismc",
			"Omkar20895",
			"jarifibrahim",
			"agoodm",
			"noah-de",
			"kant"
		],
		"Labor_Hours": 720,
		"Categories": [
			"Dataset Search",
			"NASA",
			"Web",
			"Subsetting",
			"Python",
			"Framework",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Podaacpy",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "http://podaacpy.readthedocs.io/en/latest/",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-09-23",
		"Description": "SpaceBirds, a new innovative application intended as both a visual and educational application as well as a powerful tracking tool, can be used by professionals, students, and enthusiasts alike. The app is developed using NASA Web World Wind, and consists of an easy to use interface that allows the user to display all known tracked orbital objects and ground stations, and display their relative information, such as type, orbital period, low, medium, and high earth orbit, country of origin, and use, all in a 3D environment.",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/SpaceBirds",
		"NASA Center": "ARC",
		"Contributors": ["bwstewart389", "Beak-man", "farahsalah", "Gagaus"],
		"Labor_Hours": 223440,
		"Categories": [
			"application",
			"visual simulation",
			"java",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind",
			"worldwind"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: SpaceBirds",
		"License": ["Pending Release", "CC0"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:information system",
			"nlp:computer graphic",
			"nlp:man machine system",
			"nlp:abiogenesi",
			"nlp:extraterrestrial environment",
			"nlp:virtual reality",
			"nlp:biology",
			"nlp:human-computer interface"
		],
		"External Link": "https://github.com/NASAWorldWindResearch/SpaceBirds/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-09-21",
		"Description": "3D visualization of earthquakes using their actual depth below the surface.",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/Quake-Hunter",
		"NASA Center": "ARC",
		"Contributors": [
			"KhaledSharif",
			"Beak-man",
			"farahsalah",
			"Gagaus",
			"bench4ng",
			"PJHogan"
		],
		"Labor_Hours": 1632,
		"Categories": [
			"application",
			"visual simulation",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind",
			"worldwind",
			"earthquake-visualization",
			"earthquakes",
			"earthquake-events",
			"usgs"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: Quake-Hunter",
		"License": ["NASA Open Source", "MIT"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWindResearch/Quake-Hunter/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-14",
		"Description": "The largest three-dimensional web-based interactive browser of satellite, weather, climate, and other time-aware geospatial data on the web, built upon NASA's revolutionary WorldWind technology. ",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/WorldWeather",
		"NASA Center": "ARC",
		"Contributors": ["KhaledSharif", "Beak-man", "farahsalah"],
		"Labor_Hours": 44816,
		"Categories": [
			"application",
			"visual simulation",
			"weather-forecast",
			"aware-geospatial-data",
			"NASA",
			"nasa-revolutionary",
			"satellite",
			"WorldWind",
			"weather",
			"climate",
			"earth",
			"wind",
			"geospatial data"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: WorldWeather",
		"License": ["Pending Release", "MIT"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:satellite sounding",
			"nlp:data acquisition",
			"nlp:meteorological satellite",
			"nlp:weather",
			"nlp:climate",
			"nlp:technology utilization",
			"nlp:technology assessment",
			"nlp:communication satellite"
		],
		"External Link": "https://github.com/NASAWorldWindResearch/WorldWeather/archive/master.zip",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-09-09",
		"Description": "A geo-browser app framework based on NASA Web World Wind",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/WorldWindExplorer",
		"NASA Center": "ARC",
		"Contributors": ["emxsys"],
		"Labor_Hours": 110032,
		"Categories": [
			"application",
			"visual simulation",
			"HTML5",
			"geo",
			"geo-browser",
			"NASA",
			"Javascript",
			"satellite",
			"WorldWind",
			"weather",
			"climate",
			"worldwind",
			"geospatial data"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: WorldWindExplorer",
		"License": ["NASA Open Source", "MIT"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWindResearch/WorldWindExplorer/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-08-06",
		"Description": "Magnetic Field Data Anomaly Detection Analysis Sandbox. Earthquake Signal Precursors, ESP, detection and forecast. This project aims to apply Dr. Friedemann Freund’s theory of earthquake precursor science. Dr. Freund's theory states that as stresses in the Earth’s crust increase during the time leading up to a major earthquake, atomic-scale defects in the mineral grains and along the boundaries between mineral grains become activated. The ultimate goal of this project is to observe live anomalous EM field fluctuations and accurately forecast an earthquake within a specified geographical range.",
		"Public Code Repo": "https://github.com/NASAWorldWindResearch/EarthquakeApp",
		"NASA Center": "ARC",
		"Contributors": [
			"KhaledSharif",
			"farahsalah",
			"Gagaus",
			"bench4ng",
			"PJHogan"
		],
		"Labor_Hours": 53200,
		"Categories": [
			"application",
			"electromagnetic radiation",
			"HTML5",
			"geo",
			"geo-browser",
			"magnetic field data",
			"NASA",
			"Javascript",
			"satellite",
			"WorldWind",
			"worldwind",
			"earthquake"
		],
		"Languages": [],
		"Software": "NASA WorldWind Research: EarthquakeApp",
		"License": ["Pending Release", "CC0"],
		"Categories_NLP": [
			"nlp:geophysic",
			"nlp:variation",
			"nlp:seismic wave",
			"nlp:anomaly",
			"nlp:earthquake",
			"nlp:earth crust",
			"nlp:magnetic anomalie",
			"nlp:geomagnetism",
			"nlp:seismology",
			"nlp:earth (planet)"
		],
		"External Link": "https://github.com/NASAWorldWindResearch/EarthquakeApp/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-12-02",
		"Description": "PyCycle is a novel software library written in the Python Programming language. It allows a user to perform standard engine cycle analysis, while also  providing analytic derivative (sensitivity) calculations to the end user. This allows Pycycle to be very efficiently used by (or incorporated within) external software programs performing broader simulation, analysis, and optimization.",
		"Public Code Repo": "https://github.com/JustinSGray/pyCycle",
		"NASA Center": "ARC",
		"Contributors": [
			"JustinSGray",
			"cheesie67",
			"thearn",
			"kmarsteller",
			"jcchin"
		],
		"Labor_Hours": 3952,
		"Categories": [
			"openmdao",
			"Design and Integration Tools",
			"python",
			"mdao",
			"NASA",
			"GRC",
			"Open Source",
			"modeling",
			"plugin"
		],
		"Languages": [],
		"Software": "PyCycle - An Cycle Modeling Tool For Design With Gradient Based Optimization",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:sensitivity",
			"nlp:computerized simulation",
			"nlp:optimization",
			"nlp:programming language",
			"nlp:simulation",
			"nlp:software development tool",
			"nlp:high level language",
			"nlp:fortran",
			"nlp:library"
		],
		"External Link": "https://github.com/JustinSGray/pyCycle/archive/master.zip",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-01-20",
		"Description": "The Generic Software Architecture for Prognostics (GSAP) is a framework for applying prognostics. It makes applying prognostics easier by implementing many of the common elements across prognostic applications. The standard interface enables reuse of prognostic algorithms and models across using the GSAP framework.",
		"Public Code Repo": "https://github.com/nasa/GSAP",
		"NASA Center": "ARC",
		"Contributors": ["teubert", "matthewjdaigle", "jason-watkins"],
		"Labor_Hours": 7952,
		"Categories": [
			"Health Management",
			"C++",
			"c++",
			"framework",
			"PHM",
			"Health Monitoring",
			"NASA",
			"ARC",
			"library",
			"Prognostics"
		],
		"Languages": [],
		"Software": "GSAP: General Software Architecture for Prognostics",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:finite element method",
			"nlp:software development tool",
			"nlp:architecture (computers)",
			"nlp:interface",
			"nlp:algorithm",
			"nlp:software reuse",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/GSAP/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-03-07",
		"Description": "Sitepod; A Sitemap Generator written in PHP. Sitepod is build using the Fat-Free Framework, a powerful yet easy-to-use PHP micro-framework designed to build dynamic and robust web applications.",
		"Public Code Repo": "https://github.com/nasa/sitepod/",
		"NASA Center": "JPL",
		"Contributors": ["lewismc", "eniad "],
		"Labor_Hours": 1632,
		"Categories": [
			"Sitemap",
			"search-engine",
			"php",
			"PHP",
			"sitemap-builder",
			"WebCrawler",
			"NASA",
			"Web",
			"sitemap",
			"sitemap-generator",
			"sitemap-xml",
			"JPL"
		],
		"Languages": [],
		"Software": "Sitepod",
		"License": ["NASA Open Source", "GPLv3"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:java (programming language)",
			"nlp:internet",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:interactive control",
			"nlp:document markup language",
			"nlp:on-line system",
			"nlp:world wide web",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa/sitepod/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-16",
		"Description": "Python client library that abstracts CMR API calls for search, ingest, update, and deletion of collections and granules.",
		"Public Code Repo": "https://github.com/nasa/pyCMR",
		"NASA Center": "MSFC",
		"Contributors": ["manilmaskey, amarouane"],
		"Labor_Hours": 1056,
		"Categories": [
			"Client SDK",
			"NASA",
			"Python",
			"APL Client Library",
			"CMR",
			"API",
			"client"
		],
		"Languages": [],
		"Software": "pyCMR",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/cmr/wiki",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-03-31",
		"Description": "The Metadata Management Tool is a web application to assist users in managing metadata on various Nasa.gov applications.",
		"Public Code Repo": "https://github.com/nasa/mmt",
		"NASA Center": "ARC",
		"Contributors": ["mreese84"],
		"Labor_Hours": 266128,
		"Categories": ["application", "Ruby", "NASA", "CMR"],
		"Languages": [],
		"Software": "Metadata Management Tool (MMT)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/mmt",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-05-01",
		"Description": "The Core Flight System (CFS) Command and Data Dictionary (CDD) utility, or CCDD, is a software tool for managing the data structures for CFS and CFS applications, including telemetry data structures, command information, and other data pertinent to a CFS project.",
		"Public Code Repo": "https://github.com/nasa/CCDD",
		"NASA Center": "JSC",
		"Contributors": ["KevinMcCluney"],
		"Labor_Hours": 512576,
		"Categories": ["NASA", "CFS", "java", "SQL"],
		"Languages": [],
		"Software": "CFS Command and Data Dictionary Tool (CCDDT)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:biomedical data",
			"nlp:data management",
			"nlp:information system",
			"nlp:software development tool",
			"nlp:data structure",
			"nlp:flight control",
			"nlp:data processing",
			"nlp:telemetry",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/CCDD",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-03-03",
		"Description": "Modeling, Analysis, and Visualization (MAV) of ATM concepts",
		"Public Code Repo": "https://github.com/nasa/MAV",
		"NASA Center": "ARC",
		"Contributors": ["ksutka"],
		"Labor_Hours": 86736,
		"Categories": ["Analysis", "NASA", "Visualization", "Toolkit"],
		"Languages": [],
		"Software": "MAV",
		"License": ["NASA Open Source", "Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/MAV",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2017-02-27",
		"Description": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI) takes in raw Landsat 8 surface reflectance products and produces two maps to be opened in ArcMap that can be used to identify chlorophyll hotspots. It also creates a true color image.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/CBCHI",
		"NASA Center": "LaRC",
		"Contributors": ["kdottiemo"],
		"Labor_Hours": 64,
		"Categories": ["application", "Landsat", "NASA", "imagery"],
		"Languages": [],
		"Software": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:bidirectional reflectance",
			"nlp:thematic mapping",
			"nlp:surface propertie",
			"nlp:spectral reflectance",
			"nlp:remote sensing",
			"nlp:reflectance",
			"nlp:chlorophyll",
			"nlp:water color",
			"nlp:map",
			"nlp:image processing"
		],
		"External Link": "https://github.com/NASA-DEVELOP/CBCHI",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-04-25",
		"Description": "Visualization of CALIPSO (VOCAL). A CALIPSO Cross Cutting tool for visualizing data.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/VOCAL",
		"NASA Center": "LaRC",
		"Contributors": ["kdottiemo, Smewhen"],
		"Labor_Hours": 3600,
		"Categories": ["application", "NASA", "visualization", "python"],
		"Languages": [],
		"Software": "Visualization of CALIPSO (VOCAL)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASA-DEVELOP/VOCAL",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-03-21",
		"Description": "This code removes clouds, cloud shadow, water, and snow pixels from Landsat scenes using the cloud mask layer that is provided with Landsat data.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/MASC",
		"NASA Center": "LaRC",
		"Contributors": ["kdottiemo"],
		"Labor_Hours": 16,
		"Categories": ["application", "Landsat", "NASA", "mask layer"],
		"Languages": [],
		"Software": "Move Away Superfluous Clouds (MASC)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:cloud",
			"nlp:snow",
			"nlp:landsat satellite",
			"nlp:cloud cover",
			"nlp:clouds (meteorology)",
			"nlp:boundary layer",
			"nlp:scene analysi",
			"nlp:snow cover",
			"nlp:cloud physic",
			"nlp:water"
		],
		"External Link": "https://github.com/NASA-DEVELOP/MASC",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-05-05",
		"Description": "This Google Earth Engine software quantifies the decreasing water surface area in Lake Mead and the lower Grand Canyon and assesses the resulting changes in land cover –specifically, riparian vegetation and riparian sediment. The software provides images, statistics, and graphs to understand the drought-induced changes.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/GC-ReDI",
		"NASA Center": "LaRC",
		"Contributors": ["kdottiemo"],
		"Labor_Hours": 928,
		"Categories": ["visualization", "NASA", "imagery", "application"],
		"Languages": [],
		"Software": "GC-ReDI",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:lake",
			"nlp:graph theory",
			"nlp:earth surface",
			"nlp:remote sensing",
			"nlp:vegetation",
			"nlp:fresh water",
			"nlp:graphs (charts)",
			"nlp:sediment",
			"nlp:water"
		],
		"External Link": "https://github.com/NASA-DEVELOP/GC-ReDI",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-05-31",
		"Description": "MultiDop is a Python-based interface between the C-based DDA code developed at University of Oklahoma and the Python Atmospheric Radiation Measurement Radar Toolkit (Py-ART) software developed at Argonne National Lab. Use this software to perform 3D wind analyses using 2-3 independent Doppler radars.",
		"Public Code Repo": "https://github.com/nasa/MultiDop",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 3536,
		"Categories": [
			"Meteorology",
			"Earth Science",
			"NASA",
			"Radar",
			"Winds",
			"Doppler",
			"Toolkit"
		],
		"Languages": [],
		"Software": "Multiple-Doppler Radar Analysis Toolkit (MultiDop)",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:radar measurement",
			"nlp:c (programming language)",
			"nlp:wind velocity measurement",
			"nlp:software reliability",
			"nlp:atmospheric",
			"nlp:software development tool",
			"nlp:radiation measurement",
			"nlp:interface",
			"nlp:wind measurement",
			"nlp:meteorological radar"
		],
		"External Link": "https://github.com/nasa/MultiDop/wiki",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-07-13",
		"Description": "Illustrate using the Flux-Level Transit Injection (FLTI) Tests of the Kepler pipeline for Data Release 25.  This code generates the figures in the documentation of FLTI, Burke, C.J. and Catanzarite, J. 2017, Planet Detection Metrics: Per-Target Flux-Level Transit Injection Tests of TPS for Data Release 25, KSCI-19109-001",
		"Public Code Repo": "https://github.com/nasa/Kepler-FLTI",
		"NASA Center": "ARC",
		"Contributors": ["Christopher J. Burke"],
		"Labor_Hours": 112,
		"Categories": ["NASA", "Kepler"],
		"Languages": [],
		"Software": "Kepler-FLTI",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:solar flux",
			"nlp:spacecraft instrument",
			"nlp:planet",
			"nlp:star",
			"nlp:flux (rate)",
			"nlp:terrestrial planet",
			"nlp:extrasolar planet",
			"nlp:planetary system",
			"nlp:detection",
			"nlp:performance test"
		],
		"External Link": "https://github.com/nasa/Kepler-FLTI",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-07-13",
		"Description": "Illustrate making use of numerous Kepler Planet Occurrence Rate Data Products for Data Release 25 and SOC 9.3 Kepler Pipeline version.  This code generates a detection contour according to the documentation Burke, C.J. and Catanzarite, J. 2017, Planet Detection Metrics: Per-Target Detection Contours for Data Release 25, KSCI-19111-001",
		"Public Code Repo": "https://github.com/nasa/KeplerPORTs",
		"NASA Center": "ARC",
		"Contributors": ["Christopher J. Burke"],
		"Labor_Hours": 224,
		"Categories": ["NASA", "Kepler"],
		"Languages": [],
		"Software": "KeplerPORTs",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:planet",
			"nlp:planetary rotation",
			"nlp:terrestrial planet",
			"nlp:data acquisition",
			"nlp:extrasolar planet",
			"nlp:aerospace science",
			"nlp:planetary system",
			"nlp:detection",
			"nlp:probability theory",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/KeplerPORTs",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-06-12",
		"Description": "The Kepler DR25 Robovetter code. The Robovetter dispositions Kepler Threshold Crossing Events (TCEs) into Planet Candidates (PCs) and False Positives (FPs) using sophisticated vetting metrics and decision-tree logic.",
		"Public Code Repo": "https://github.com/nasa/kepler-robovetter",
		"NASA Center": "ARC",
		"Contributors": ["Jeff Coughlin"],
		"Labor_Hours": 464,
		"Categories": ["Vetting", "NASA", "DR25", "Transits", "Kepler"],
		"Languages": [],
		"Software": "Kepler DR25 Robovetter",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:planet",
			"nlp:aerospace science",
			"nlp:terrestrial planet",
			"nlp:planetary rotation",
			"nlp:extrasolar planet",
			"nlp:nuclear interaction",
			"nlp:planetary system",
			"nlp:brown dwarf star",
			"nlp:planetary orbit",
			"nlp:detection"
		],
		"External Link": "https://github.com/nasa/kepler-robovetter",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-19",
		"Description": "NASA World Wind in Java for HTML5",
		"Public Code Repo": "https://github.com/NASAWorldWind/WebWorldWind",
		"NASA Center": "ARC",
		"Contributors": [
			"balhar-jakub",
			"tag3",
			"servetg",
			"strikerM",
			"revo09",
			"pdavidc",
			"emxsys",
			"GabrielePrestifilippo",
			"zglueck",
			"carla-orru",
			"AkeluX",
			"RandolphKim",
			"revision0"
		],
		"Labor_Hours": 79696,
		"Categories": [
			"visual simulation",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind",
			"web application"
		],
		"Languages": [],
		"Software": "WebWorldWind",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWind/WebWorldWind",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-19",
		"Description": "NASA World Wind organization website",
		"Public Code Repo": "https://github.com/NASAWorldWind/NASAWorldWind.github.io",
		"NASA Center": "ARC",
		"Contributors": ["pdavidc", "zglueck"],
		"Labor_Hours": 80,
		"Categories": [
			"visual simulation",
			"github",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind"
		],
		"Languages": [],
		"Software": "NASAWorldWind.github.io",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWind/NASAWorldWind.github.io",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-19",
		"Description": "NASA World Wind in Java for Android",
		"Public Code Repo": "https://github.com/NASAWorldWind/WorldWindAndroid",
		"NASA Center": "ARC",
		"Contributors": ["pdavidc", "emxsys", "zglueck", "Beak-man"],
		"Labor_Hours": 39104,
		"Categories": [
			"application",
			"visual simulation",
			"android",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind"
		],
		"Languages": [],
		"Software": "WorldWindAndroid",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWind/WorldWindAndroid",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-19",
		"Description": "The NASA WorldWind Server Kit (WWSK) is an open source Java project that assembles GeoServer for easy distribution and implementation.",
		"Public Code Repo": "https://github.com/NASAWorldWind/WorldWindServerKit",
		"NASA Center": "ARC",
		"Contributors": ["pdavidc", "emxsys"],
		"Labor_Hours": 178336,
		"Categories": [
			"visual simulation",
			"server kit",
			"java",
			"orbital dynamics",
			"NASA",
			"satellite",
			"WorldWind",
			"GeoServer",
			"web application"
		],
		"Languages": [],
		"Software": "WorldWindServerKit",
		"License": ["NASA Open Source", "GPLv2"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:queueing theory",
			"nlp:distributed processing",
			"nlp:computerized simulation",
			"nlp:distribution function",
			"nlp:computer network",
			"nlp:project management",
			"nlp:probability distribution function",
			"nlp:statistical distribution",
			"nlp:normal density function"
		],
		"External Link": "https://github.com/NASAWorldWind/WorldWindServerKit",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-19",
		"Description": "The NASA WorldWind Java SDK (WWJ) is for building cross-platform 3D geospatial desktop applications in Java.",
		"Public Code Repo": "https://github.com/NASAWorldWind/WorldWindJava",
		"NASA Center": "ARC",
		"Contributors": ["pdavidc", "emxsys", "zglueck", "tag3", "moovida"],
		"Labor_Hours": 316160,
		"Categories": [
			"visual simulation",
			"imagery",
			"3d",
			"geospatial",
			"java",
			"terrain",
			"globe",
			"orbital dynamics",
			"NASA",
			"graphics",
			"satellite",
			"WorldWind",
			"worldwind",
			"earth",
			"web application",
			"sdk",
			"maps",
			"opengl"
		],
		"Languages": [],
		"Software": "WorldWindJava",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASAWorldWind/WorldWindJava",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-08-12",
		"Description": "Geographic Applications for Transitioning Everglades Regions (GATER). Meant for running within the Google Earth Engine API, this JavaScript code provides an algorithm for cloud removal from Landsat scenes, and runs a classification scheme which classifies mangrove extent within Everglades National Park.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/GATER",
		"NASA Center": "LaRC",
		"Contributors": ["kdottiemo", "egotschalk"],
		"Labor_Hours": 15376,
		"Categories": [
			"algorithm",
			"Google Earth API",
			"NASA",
			"Everglades National Park",
			"Geographic Applications for Transitioning Everglades Regions",
			"classification scheme",
			"Landsat scenes",
			"cloud removal",
			"JavaScript",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "GATER",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"algorithm",
			"classification",
			"scene analysi",
			"cloud cover",
			"clouds (meteorology)",
			"cloud",
			"cloud physic",
			"image classification",
			"satellite-borne photography",
			"landsat satellite"
		],
		"External Link": "https://github.com/NASA-DEVELOP/GATER",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-06-22",
		"Description": "This tool allows users to identify surface water from the most current imagery available, or to monitor temporal changes of surface water in their management area.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/SWIM",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov", "Kathleen Moore"],
		"Labor_Hours": 3456,
		"Categories": [
			"NASA",
			"surface water",
			"temporal changes",
			"current imagery"
		],
		"Languages": [],
		"Software": "SWIM",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:water quality",
			"nlp:water management",
			"nlp:watershed",
			"nlp:imagery",
			"nlp:water resource",
			"nlp:infrared imagery",
			"nlp:resources management",
			"nlp:coastal water",
			"nlp:surface water",
			"nlp:water"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19013-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-23",
		"Description": "Elkhorn Slough Vegetation Imagery Assessment (ESVIA). This suite of Google Earth Engine Javascript code analyzes vegetation change in a historical time-series using Landsat, as well as current-day vegetation productivity using Sentinel 2A imagery. Included in the scripts are operations such as image acquisition, image processing, and application.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/ESVIA",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov", "kdottiemo"],
		"Labor_Hours": 144,
		"Categories": [
			"vegetation imagery",
			"java",
			"vegetation change",
			"vegetation",
			"Sentinel 2A imagery",
			"NASA",
			"Google Earth",
			"landsat"
		],
		"Languages": [],
		"Software": "ESVIA",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth resource",
			"nlp:real time operation",
			"nlp:time series analysi",
			"nlp:vegetation growth",
			"nlp:vegetation",
			"nlp:imagery",
			"nlp:infrared imagery",
			"nlp:satellite imagery",
			"nlp:satellite-borne photography",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19012-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "Pixelwise Correlation-Based Landscape Classification (PiCo). PiCo, an R script, automates and regionalizes the Climate Landscape Response (CLaRe) metrics developed by Wallace et al 2016. This script performs a pixel-wise regression analysis to produce rasters whose correlation values can be evaluated to target buffelgrass.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/PiCo",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov", "kdottiemo"],
		"Labor_Hours": 16,
		"Categories": [
			"usg-artificial-intelligence",
			"correlation-based",
			"pixel-wise regression analysis",
			"NASA",
			"pixel-wise",
			"landscape",
			"climate",
			"buffelgrass",
			"R",
			"classification",
			"machine-learning",
			"algorithm",
			"invasive-species",
			"grass",
			"regression",
			"correlation",
			"buffelgrass"
		],
		"Languages": [],
		"Software": "PiCo",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"correlation",
			"regression analysi",
			"regression analysi",
			"classification",
			"correlation",
			"classification",
			"data correlation",
			"image classification",
			"climate",
			"image classification"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19015-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-23",
		"Description": "Palm Oil Plantation Predictor (POPP). This Python software automates the process of downloading, atmospherically correcting, and processing raster data in order to identify potential palm oil plantations.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/POPP",
		"NASA Center": "LaRC",
		"Contributors": [
			"larc-sra@mail.nasa.gov",
			"kdottiemo",
			"kylepeterson777"
		],
		"Labor_Hours": 32,
		"Categories": [
			"python",
			"atmospherically",
			"NASA",
			"raster",
			"plantation",
			"palm oil"
		],
		"Languages": [],
		"Software": "POPP",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:biomedical data",
			"nlp:data acquisition",
			"nlp:oil slick",
			"nlp:signal processing",
			"nlp:prediction",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18862-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "DON-Federate-HLA2MPC repository",
		"Public Code Repo": "https://github.com/nasa/DON-Federate-HLA2MPC",
		"NASA Center": "KSC",
		"Contributors": ["ksc-dl-software-request@mail.nasa.gov"],
		"Labor_Hours": 9232,
		"Categories": ["NASA", "KSC", "Architecture", "High", "HLA", "Level"],
		"Languages": [],
		"Software": "DON-Federate-HLA2MPC",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/KSC-14109",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "Kodiak is an implementation of a software library for verifying expressions involving nonlinear real arithmetic. The current innovation discloses the implementation of a generic branch and bound algorithm for rigorous computations and prototype implementation of algorithms for solving global optimization problems.",
		"Public Code Repo": "https://github.com/nasa/kodiak",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 5344,
		"Categories": [
			"programming",
			"Open Source",
			"expression",
			"boolean",
			"Global Optimization",
			"API",
			"application",
			"branch",
			"Data and Image Processing",
			"interface",
			"LaRC",
			"Non-linear Arithmetic",
			"bound",
			"Rigurous Polynomial Approximations",
			"non-linear",
			"arithmetic",
			"checker",
			"inequalities",
			"approximation",
			"optimizer",
			"real",
			"algorithm",
			"NASA",
			"Interval Arithmetic"
		],
		"Languages": [],
		"Software": "Kodiak's Boolean Checker Software Module",
		"License": ["NASA Open Source", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical programming",
			"nlp:optimization",
			"nlp:combinatorial analysi",
			"nlp:nonlinear programming",
			"nlp:algorithm",
			"nlp:prototype",
			"nlp:library",
			"nlp:problem solving",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://shemesh.larc.nasa.gov/fm/Kodiak/0",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-10-10",
		"Description": "VirtualADAPT is a high-fidelity, Matlab Simulink-based simulation testbed that emulates the Advanced Diagnostic and Prognostic Testbed (ADAPT) electrical power system hardware for running offline health management experiments. This simulation testbed models all components of the ADAPT hardware within the power storage and power distribution subsystems. The physical components of the testbed, i.e., the batteries, relays, and the loads, are replaced by simulation modules that generate the same dynamic behaviors as the hardware test bed.",
		"Public Code Repo": "https://github.com/nasa/VirtualADAPT",
		"NASA Center": "ARC",
		"Contributors": [
			"arc-sra-team@mail.nasa.gov",
			"indranilroychoudhury",
			"matthewjdaigle"
		],
		"Labor_Hours": 2512,
		"Categories": ["Electrical Power System", "Simulation"],
		"Languages": [],
		"Software": "Virtual ADAPT",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic characteristic",
			"nlp:electric batterie",
			"nlp:electric power supply",
			"nlp:spacecraft power supply",
			"nlp:computerized simulation",
			"nlp:test stand",
			"nlp:simulation",
			"nlp:loads (forces)"
		],
		"External Link": "https://github.com/nasa/VirtualADAPT",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-12-12",
		"Description": "Formerly known as PyTransit. This python package contains routines to create and/or fit a transiting planet model. The underlying model is a Fortran implementation of the Mandel & Agol (2002) limb darkened transit model. The code will calculate a full orbital model and eccentricity can be allowed to vary.",
		"Public Code Repo": "https://github.com/mrtommyb/ktransit",
		"NASA Center": "ARC",
		"Contributors": ["thomas.barclay@nasa.gov"],
		"Labor_Hours": 1184,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "ktransit",
		"License": ["GPLv3"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:planet",
			"nlp:computerized simulation",
			"nlp:extrasolar planet",
			"nlp:planetary system",
			"nlp:solar limb",
			"nlp:subroutine",
			"nlp:planetary orbit",
			"nlp:symbol",
			"nlp:fortran"
		],
		"External Link": "https://github.com/mrtommyb/ktransit",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-26",
		"Description": "kplr provides a lightweight Pythonic interface to the catalogs and data. Below, I'll describe the features provided by kplr but to get things started, let’s see an example of how you would go about finding the published parameters of a KOI and download the light curve data.",
		"Public Code Repo": "http://dfm.io/kplr/",
		"NASA Center": "ARC",
		"Contributors": ["jason.duley@nasa.gov", "dfm"],
		"Labor_Hours": 528,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "kplr",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:human-computer interface",
			"nlp:parameter identification",
			"nlp:computerized simulation",
			"nlp:computer graphic",
			"nlp:pattern recognition",
			"nlp:curve fitting",
			"nlp:interface",
			"nlp:data processing",
			"nlp:graphical user interface",
			"nlp:graphs (charts)"
		],
		"External Link": "http://dan.iel.fm/kplr/",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-05-26",
		"Description": "The search for transiting exoplanets in K2 data.",
		"Public Code Repo": "https://github.com/dfm/ketu",
		"NASA Center": "ARC",
		"Contributors": ["jason.duley@nasa.gov", "dfm"],
		"Labor_Hours": 2432,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "ketu",
		"License": ["MIT"],
		"Categories_NLP": [],
		"External Link": "https://github.com/dfm/ketu",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-10",
		"Description": "Oxford K2 planet search pipeline. Searches for transit-like signals from the k2sc-detrended light curves.",
		"Public Code Repo": "https://github.com/hpparvi/k2ps",
		"NASA Center": "ARC",
		"Contributors": ["hpparvi@gmail.com", "benjaminpope", "hpparvi"],
		"Labor_Hours": 352,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "k2ps",
		"License": ["MIT"],
		"Categories_NLP": [],
		"External Link": "https://github.com/hpparvi/k2ps",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-11-24",
		"Description": "EPIC Variability Extraction and Removal for Exoplanet Science Targets: A pipeline for de-trending K2 light curves with pixel level decorrelation and Gaussian processes. Here you'll find the Python code used to generate the EVEREST catalog, as well as tools for accessing and interacting with the de-trended light curves.",
		"Public Code Repo": "https://github.com/rodluger/everest",
		"NASA Center": "ARC",
		"Contributors": [
			"nicholas.k.saunders@nasa.gov",
			"rodluger",
			"nksaunders",
			"dfm"
		],
		"Labor_Hours": 5568,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "everest",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:coronagraph",
			"nlp:aerospace science",
			"nlp:variability",
			"nlp:light curve",
			"nlp:extrasolar planet",
			"nlp:catalogs (publications)",
			"nlp:astronomical catalog",
			"nlp:stellar radiation",
			"nlp:eclipsing binary star",
			"nlp:survey"
		],
		"External Link": "https://rodluger.github.io/everest/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-11-24",
		"Description": "K2mosaic is a command-line tool that makes it easy to combine CCD pixel data obtained by NASA's Kepler space telescope into wide-field images. The need for this tool arises from the fact that the two-wheeled extended Kepler mission, K2, observed large clusters and moving targets (e.g. planets, comets, and asteroids). ",
		"Public Code Repo": "https://github.com/barentsen/k2mosaic",
		"NASA Center": "ARC",
		"Contributors": ["geert.barentsen@nasa.gov"],
		"Labor_Hours": 352,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "K2mosaic",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:spaceborne telescope",
			"nlp:comet",
			"nlp:image processing",
			"nlp:charge coupled device",
			"nlp:asteroid",
			"nlp:astronomical photography",
			"nlp:image analysi",
			"nlp:telescope",
			"nlp:astronomical spectroscopy",
			"nlp:space mission"
		],
		"External Link": "https://github.com/barentsen/k2mosaic",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-11-24",
		"Description": "Converts raw cadence target data from the Kepler space telescope into astronomer-friendly FITS files.",
		"Public Code Repo": "https://github.com/KeplerGO/kadenza",
		"NASA Center": "ARC",
		"Contributors": ["jessie.dotson@nasa.gov"],
		"Labor_Hours": 736,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "kadenza",
		"License": ["MIT"],
		"Categories_NLP": [],
		"External Link": "https://github.com/KeplerGO/kadenza",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-11-24",
		"Description": "Command-line tool to check whether a Solar System body is (or was) observable by NASA's K2 mission",
		"Public Code Repo": "https://github.com/KeplerGO/K2ephem",
		"NASA Center": "ARC",
		"Contributors": ["jessie.dotson@nasa.gov"],
		"Labor_Hours": 80,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "K2ephem",
		"License": ["MIT"],
		"Categories_NLP": [],
		"External Link": "https://keplerscience.arc.nasa.gov/software.html#k2ephem",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-02-07",
		"Description": "The K2fov Python package allows users to check whether a target is in the field of view of K2. In particular, the package adds the K2onSilicon and K2findCampaigns tools to the command line, which allow the visibility of targets to be checked during one (K2onSilicon) or all (K2findCampaigns) campaigns, respectively.",
		"Public Code Repo": "https://github.com/KeplerGO/K2fov",
		"NASA Center": "ARC",
		"Contributors": ["jessie.dotson@nasa.gov"],
		"Labor_Hours": 8112,
		"Categories": ["Kepler"],
		"Languages": [],
		"Software": "K2fov",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:user manuals (computer programs)",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:target recognition",
			"nlp:software development tool",
			"nlp:on-line system",
			"nlp:command and control",
			"nlp:target acquisition",
			"nlp:graphical user interface",
			"nlp:user requirement"
		],
		"External Link": "https://keplerscience.arc.nasa.gov/software.html#k2fov",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-01-15",
		"Description": "DEVELOP National Program Python package for use with NASA data and GIS. dnppy is a collection of functions and classes for download, format, and analysis of NASA satelite data and anciliary NOAA datasets",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/dnppy",
		"NASA Center": "LaRC",
		"Contributors": ["Jwely"],
		"Labor_Hours": 5888,
		"Categories": ["GIS", "NOAA", "satellite DATA"],
		"Languages": [],
		"Software": "dnppy",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:functions (mathematics)",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:network analysi",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base"
		],
		"External Link": "https://nasa-develop.github.io/dnppy/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-09-05",
		"Description": "Data collected in the CAVE effort are meant for use in validation studies of Clouds & The Earths Radiant Energy System (CERES) instruments operating on the Suomi NPP and Earth Observing Systems(EOS)Terra & Aqua & Tropical Rainfall Measurement Mission (TRMM) satellites.",
		"Public Code Repo": "http://www-cave.larc.nasa.gov/LFLcode/Ed4_LaRC_FuLiou201501.tar.gz",
		"NASA Center": "LaRC",
		"Contributors": ["Seiji.Kato@NASA.gov"],
		"Labor_Hours": 45552,
		"Categories": ["validation", "CERES", "ARM"],
		"Languages": [],
		"Software": "CERES/ARM Validation Experiment (CAVE)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth observations (from space)",
			"nlp:satellite sounding",
			"nlp:measuring instrument",
			"nlp:earth (planet)",
			"nlp:satellite-borne instrument",
			"nlp:satellite observation",
			"nlp:satellite instrument",
			"nlp:artificial satellite"
		],
		"External Link": "http://www-cave.larc.nasa.gov/index.html",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-04",
		"Description": "This is a prototype data processor/publisher for NASA.",
		"Public Code Repo": "https://github.com/vightel/ojo-bot",
		"NASA Center": "GSFC",
		"Contributors": ["dalia.b.kirschbaum@nasa.gov"],
		"Labor_Hours": 93280,
		"Categories": ["earth sciences", "landslides"],
		"Languages": [],
		"Software": "OJO Bot",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/vightel/ojo-bot",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-09-17",
		"Description": "jpf-psyco generates symbolic interfaces for software components using concolic execution.",
		"Public Code Repo": "https://github.com/psycopaths/psyco",
		"NASA Center": "ARC",
		"Contributors": ["dimitra.giannakopoulou@nasa.gov"],
		"Labor_Hours": 5664,
		"Categories": [
			"symbolic learning",
			"temporal interfaces",
			"component methods"
		],
		"Languages": [],
		"Software": "PSYCO: A Predicate-based Symbolic Compositional Reasoning environment",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://ti.arc.nasa.gov/m/groups/rse/papers/Giannakopoulou-CAV12.pdf",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-01-28",
		"Description": "Retools is a set of modifications to the commonly used open source utilities bzip2, gzip, rsync, and tar that automatically selects the Lustre stripe count for created and/or extracted files according to the sizes of the files involved. By striping large files over a higher number of physical disks and small files over a lower number, aggregate I/O bandwidth for large files is maximized and the impact to the file system due to small files is minimized. These tools support the typical workflow in high performance computing environments where users compress large files and/or aggregate multiple small files into a single archive during remote transfers. Once uncompressed/unarchived into their original form, these files will be optimally striped for subsequent operations.",
		"Public Code Repo": "https://github.com/pkolano/retools",
		"NASA Center": "ARC",
		"Contributors": ["Paul.Kolano@nasa.gov"],
		"Labor_Hours": 16,
		"Categories": ["utility", "disk striping", "Lustre file systems"],
		"Languages": [],
		"Software": "Restriping Tools for Lustre (Retools)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:man machine system",
			"nlp:programming environment",
			"nlp:human performance",
			"nlp:performance prediction",
			"nlp:bandwidth",
			"nlp:virtual reality",
			"nlp:file maintenance (computers)",
			"nlp:human-computer interface",
			"nlp:computer systems performance"
		],
		"External Link": "https://pkolano.github.io/projects/retools.html",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2012-05-11",
		"Description": "The NASA Ames Stereo Pipeline (ASP) is a suite of free and open source automated geodesy and stereogrammetry tools designed for processing stereo imagery captured from satellites (around Earth and other planets), robotic rovers, aerial cameras, and historical imagery, with and without accurate camera pose information. It produces cartographic products, including digital elevation models (DEMs), ortho-projected imagery, 3D models, and bundle-adjusted networks of cameras. ASP's data products are suitable for science analysis, mission planning, and public outreach.",
		"Public Code Repo": "https://github.com/neogeographytoolkit/stereopipeline",
		"NASA Center": "ARC",
		"Contributors": [
			"stereo-pipeline@lists.nasa.gov",
			"oleg-alexandrov",
			"ScottMcMichael",
			"broxtronix",
			"novas0x2a",
			"khusmann",
			"ljexplore",
			"anefian",
			"SmithB",
			"dshean",
			"trey0",
			"mstyer",
			"rbeyer",
			"harguess",
			"saravkin",
			"jlaura"
		],
		"Labor_Hours": 104608,
		"Categories": [
			"geodesy",
			"stereogrammetry",
			"tools",
			"satellites imagery"
		],
		"Languages": [],
		"Software": "Neo-Geography Toolkit (NGT)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:camera",
			"nlp:mission planning",
			"nlp:network analysi",
			"nlp:remote sensing",
			"nlp:photogrammetry",
			"nlp:imagery",
			"nlp:pipeline",
			"nlp:three dimensional model",
			"nlp:satellite imagery"
		],
		"External Link": "https://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2011-09-16",
		"Description": "VERVE (Visual Environment for Remote Virtual Exploration) is a collection of software components for visualizing, monitoring, and commanding robots in remote environments. VERVE is developed by the Intelligent Robotics Group at NASA Ames Research Center and is part of the NASA Ensemble software ecosystem.",
		"Public Code Repo": "https://sourceforge.net/projects/irg-verve/files/latest/download",
		"NASA Center": "ARC",
		"Contributors": ["maria.bualat@nasa.gov"],
		"Labor_Hours": 271488,
		"Categories": ["virtual environment", "robots"],
		"Languages": [],
		"Software": "Visual Environment for Remote Virtual Exploration (VERVE)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:group theory",
			"nlp:autonomy",
			"nlp:robotic",
			"nlp:trajectory planning",
			"nlp:robot control",
			"nlp:robot",
			"nlp:programming environment",
			"nlp:remote control",
			"nlp:mobility",
			"nlp:robot dynamic"
		],
		"External Link": "https://sourceforge.net/p/irg-verve/wiki/VERVE%20Wiki%20Home/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "One-class nu-Support Vector machine (SVMs) learning technique maps the input data into a much higher dimensional space and then uses a small portion of the training data (support vectors) to parametrize the decision surface that can linearly separate nu fraction of training points (labeled as anomalies) from the rest.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/nu-anomica/nu-anomica.zip",
		"NASA Center": "ARC",
		"Contributors": ["peter.c.mehlitz@nasa.gov"],
		"Labor_Hours": 272,
		"Categories": [
			"usg-artificial-intelligence",
			"SVM",
			"Support Vector Machine",
			"machine-learning",
			"matlab"
		],
		"Languages": [],
		"Software": "nu-Anomica",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"vectors (mathematics)",
			"decision theory",
			"data reduction",
			"decision support system",
			"decision making",
			"vector space",
			"machine learning",
			"kernel function",
			"topology",
			"neural net"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/nu-anomica/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "The MDP toolbox for Python by Sam Cordwell provides classes and functions for the resolution of descrete-time Markov Decision Processes. The list of algorithms that have been implemented includes backwards induction, linear programming, policy iteration, q-learning and value iteration along with several variations.",
		"Public Code Repo": "https://github.com/nasa/pymdptoolbox",
		"NASA Center": "ARC",
		"Contributors": ["michael.bloem@nasa.gov"],
		"Labor_Hours": 1456,
		"Categories": [
			"Markov Decision Process",
			"MDP",
			"Decision Making",
			"IRL",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "Inverse Reinforcement Learning (IRL) Augmentation for PyMDPToolbox",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"linear programming",
			"algorithm",
			"decision theory",
			"machine learning",
			"iteration",
			"dynamic programming",
			"mathematical programming",
			"policy",
			"decision making",
			"high resolution"
		],
		"External Link": "https://github.com/nasa/pymdptoolbox",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "xGDS (Exploration Ground Data Systems) synthesizes real world data (from sensors, robots, ROVs, mobile devices, etc) and human observations into rich, digital maps and displays for analysis, decision making, and collaboration. xGDS evolved from our work developing tools to control, monitor and collect data from autonomous rovers supporting NASA's terrestrial field science research. xGDS is a highly collaborative, interactive suite of web software.",
		"Public Code Repo": "https://github.com/xgds",
		"NASA Center": "ARC",
		"Contributors": ["terry.fong@nasa.gov"],
		"Labor_Hours": 666480,
		"Categories": ["Ground Data Systems", "Maps", "Decision Making"],
		"Languages": [],
		"Software": "xGDS",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:autonomy",
			"nlp:decision making",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:robotic",
			"nlp:robot",
			"nlp:mobility",
			"nlp:display device",
			"nlp:data reduction",
			"nlp:sensor"
		],
		"External Link": "https://ti.arc.nasa.gov/tech/asr/groups/intelligent-robotics/xgds/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-02-05",
		"Description": "The source code contains the Meta Raster Format (MRF) specification and plugin for GDAL, which is a part of the OnEarth software package. OnEarth consists of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The Meta Raster Format and OnEarth software were originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and GIBS.",
		"Public Code Repo": "https://github.com/nasa-gibs/mrf",
		"NASA Center": "JPL",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 864,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"Tiled WMS",
			"global imagery browse services",
			"gibs",
			"mrf",
			"onearth"
		],
		"Languages": [],
		"Software": "Meta Raster Format (mrf)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:oceanography",
			"nlp:spatial resolution",
			"nlp:image resolution",
			"nlp:high resolution",
			"nlp:imagery",
			"nlp:infrared imagery",
			"nlp:mapping",
			"nlp:satellite imagery",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa-gibs/mrf",
		"creator": "maya@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-08-31",
		"Description": "NASA's Data Curtains from Space is a Google Summer of Code 2015 Project for the Cesium Community developed by Abhishek Potnis under the guidance of Mike McGann and Ryan Boller at NASA. Data Curtains from Space uses Cesium to better visualize data from the CALIPSO satellite, which is used to study clouds and aerosols in the atmosphere.",
		"Public Code Repo": "https://github.com/nasa-gibs/data-curtains",
		"NASA Center": "JPL",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 53584,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"Tiled WMS",
			"global imagery browse services",
			"gibs",
			"onearth",
			"data visualization"
		],
		"Languages": [],
		"Software": "Data Curtains",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data reduction",
			"nlp:data system",
			"nlp:aerosol",
			"nlp:data management",
			"nlp:remote sensing",
			"nlp:symbol",
			"nlp:data processing",
			"nlp:satellite imagery",
			"nlp:satellite observation",
			"nlp:artificial satellite"
		],
		"External Link": "https://github.com/nasa-gibs/data-curtains",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-02-12",
		"Description": "OnEarth is a software package consisting of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The software was originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and Worldview.",
		"Public Code Repo": "https://github.com/nasa-gibs/onearth",
		"NASA Center": "JPL",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 28816,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"global imagery browse services",
			"gibs",
			"onearth",
			"Tiled WMS"
		],
		"Languages": [],
		"Software": "OnEarth",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:oceanography",
			"nlp:spatial resolution",
			"nlp:image resolution",
			"nlp:high resolution",
			"nlp:imagery",
			"nlp:infrared imagery",
			"nlp:mapping",
			"nlp:satellite imagery",
			"nlp:thematic mapping",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa-gibs/onearth",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-02-12",
		"Description": "OnEarth-Boxes is a system that creates VM images for use in running, testing, and experimenting with the OnEarth and MRF tools. It uses Packer to produce a variety of pre-built VMs in different formats. OnEarth-Boxes comes pre-configured with NASA Blue Marble and MODIS Aerosol imagery layers, in 4 separate projections. There are OpenLayers endpoints for testing with WMTS, as well as TWMS/KML and Mapserver endpoints.",
		"Public Code Repo": "https://github.com/nasa-gibs/onearth-boxes",
		"NASA Center": "JPL",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 160,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"global imagery browse services",
			"gibs",
			"onearth",
			"Tiled WMS"
		],
		"Languages": [],
		"Software": "OnEarth Boxes",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:digital technique",
			"nlp:imaging technique",
			"nlp:digital data",
			"nlp:measuring instrument",
			"nlp:imagery",
			"nlp:radar imagery",
			"nlp:image analysi",
			"nlp:image",
			"nlp:satellite imagery",
			"nlp:image processing"
		],
		"External Link": "https://github.com/nasa-gibs/onearth-boxes",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-20",
		"Description": "This project shows how to use GIBS as a tile source for OpenLayers, Leaflet, Cesium, Bing, and Google Maps.",
		"Public Code Repo": "https://github.com/nasa-gibs/gibs-web-examples",
		"NASA Center": "JPL",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 13104,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"global imagery browse services",
			"gibs",
			"onearth",
			"Tiled WMS"
		],
		"Languages": [],
		"Software": "GIBS Web Examples",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:information dissemination",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:project management",
			"nlp:heat source",
			"nlp:diffusion",
			"nlp:configuration management",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa-gibs/gibs-web-examples",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-04-03",
		"Description": "This repository contains changes to OpenLayers 3 used by Worldview.",
		"Public Code Repo": "https://github.com/nasa-gibs/ol3",
		"NASA Center": "GSFC",
		"Contributors": ["support@earthdata.nasa.gov"],
		"Labor_Hours": 64640,
		"Categories": [
			"worldview",
			"earth data science",
			"eosdis",
			"global imagery browse services",
			"gibs",
			"onearth",
			"Tiled WMS"
		],
		"Languages": [],
		"Software": "Open Layers 3",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa-gibs/ol3",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2012-05-22",
		"Description": "GMAT is a software system for mission analysis and trajectory optimization, estimation, and prediction. The technology can be used to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission's trade space.",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 2140848,
		"Categories": ["Design and Integration Tools"],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT), Revision 2012a",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:mission planning",
			"nlp:parameter identification",
			"nlp:spacecraft trajectory",
			"nlp:orbit calculation",
			"nlp:orbit determination",
			"nlp:spacecraft maneuver",
			"nlp:trajectory optimization",
			"nlp:trajectory analysi"
		],
		"External Link": "https://sourceforge.net/projects/gmat/",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-12",
		"Description": "The CCSDS File Delivery Protocol (CFDP) application (CF) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFDP application provides the capability to transmit and receive files to/from the ground. Tables are used to allow flexibility in specifying directory priorities and configurations.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-cfdp/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 41120,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) CCSDS File Delivery Protocol (CFDP)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:protocol (computers)",
			"nlp:distributed processing",
			"nlp:systems engineering",
			"nlp:computer network",
			"nlp:avionic",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:file maintenance (computers)",
			"nlp:configuration management"
		],
		"External Link": "https://sourceforge.net/projects/cfs-cfdp",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-13",
		"Description": "The Checksum application (CS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. Checksum (CS) is one of the reusable applications that make up the Core Flight System (CFS). The technology performs memory integrity management by verifying the contents of critical flight memory regions. Unexpected changes in memory (i.e., due to an SEU) are reported to ground operators.",
		"Public Code Repo": "https://sourceforge.net/projects/cfs-cs/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 37984,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Checksum Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:airborne/spaceborne computer",
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:operators (mathematics)",
			"nlp:data management",
			"nlp:memory (computers)",
			"nlp:technology assessment",
			"nlp:flight control",
			"nlp:technology utilization",
			"nlp:management system"
		],
		"External Link": "https://github.com/nasa/cs",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-08-04",
		"Description": "The Data Storage application (DS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The DS application provides the ability to store data (i.e., messages) into files. Tables are used to provide the flexibility for specifying messages.",
		"Public Code Repo": "https://github.com/nasa/ds",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 24704,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Data Storage (DS) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:computer storage device",
			"nlp:message processing",
			"nlp:data management",
			"nlp:data storage",
			"nlp:data retrieval",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://sourceforge.net/projects/cfs-ds",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-20",
		"Description": "FM provides the user commands to perform the following operations: copy file, move file, rename file, delete file(s), close file, concatenate file, decompress file, delete directory contents, create directory, remove directory, obtain file information, obtain open file listing, and obtain directory listings.",
		"Public Code Repo": "https://github.com/nasa/fm",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 37872,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) File Manager (FM) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:user manuals (computer programs)",
			"nlp:multimedia",
			"nlp:information theory",
			"nlp:information system",
			"nlp:information retrieval",
			"nlp:command and control",
			"nlp:file maintenance (computers)",
			"nlp:information management",
			"nlp:user requirement"
		],
		"External Link": "https://sourceforge.net/projects/cfs-fm",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The plug-and-play CFS Health and Safety application is compatible with the Core Flight Executive (cFE) and uses the Operating System Abstraction Layer (OSAL), both of which were developed by Goddard Space Flight Center in order to provide a reusable, platform-independent, mission-independent, layered architecture for hosting applications. The technology can be used for any government or commercial spacecraft.",
		"Public Code Repo": "https://github.com/nasa/hs",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 20752,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Health and Safety Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:airborne/spaceborne computer",
			"nlp:biomedical data",
			"nlp:mission planning",
			"nlp:operating systems (computers)",
			"nlp:aerospace environment",
			"nlp:onboard data processing",
			"nlp:manned space flight",
			"nlp:flight control",
			"nlp:space mission"
		],
		"External Link": "https://sourceforge.net/projects/cfs-hs",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The Housekeeping application (HK) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS Housekeeping application provides the ability to organize data from various packets into new packets in order to best utilize the telemetry bandwidth available for a mission.",
		"Public Code Repo": "https://github.com/nasa/hk",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 12624,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Housekeeping (HK) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:airborne/spaceborne computer",
			"nlp:spacecraft instrument",
			"nlp:mission planning",
			"nlp:onboard data processing",
			"nlp:bandwidth",
			"nlp:flight control",
			"nlp:packets (communication)",
			"nlp:telemetry"
		],
		"External Link": "https://sourceforge.net/projects/cfs-hk",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The Limit Checker application (LC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Limit Checker (LC) application is responsible for monitoring telemetry values.",
		"Public Code Repo": "https://github.com/nasa/lc",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 43168,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Limit Checker (LC) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:space flight",
			"nlp:airborne/spaceborne computer",
			"nlp:spacecraft instrument",
			"nlp:systems engineering",
			"nlp:flight test",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:technology utilization",
			"nlp:spacecraft component",
			"nlp:telemetry"
		],
		"External Link": "https://sourceforge.net/projects/cfs-lc",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The Memory Dwell application telemeters the contents of table-defined addresses at a table-defined dwell rate. Addresses can be processed using symbols if the target processor/operating system includes symbols.",
		"Public Code Repo": "https://github.com/md",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 18528,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Memory Dwell Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:central processing unit",
			"nlp:operating systems (computers)",
			"nlp:tables (data)",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:target",
			"nlp:time sharing",
			"nlp:multiprocessing (computers)"
		],
		"External Link": "https://sourceforge.net/projects/cfs-md",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-31",
		"Description": "The Scheduler application (SCH) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Scheduler application uses a one-second major timeframe, which is divided into a designer-determined collection of equally divided minor timeframes. The technology is configurable and table-driven to provide greater flexibility.",
		"Public Code Repo": "https://github.com/nasa/sch",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 20752,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Scheduler Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:operating systems (computers)",
			"nlp:data acquisition",
			"nlp:computer systems design",
			"nlp:avionic",
			"nlp:flight simulation",
			"nlp:digital system",
			"nlp:flight control",
			"nlp:technology utilization",
			"nlp:technology assessment"
		],
		"External Link": "https://sourceforge.net/projects/cfs-sch",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The Software Bus Network application (SBN) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The SBN serves as a plug-in to the cFE framework to transfer messages across process/processor interfaces. The technology has three primary functions: to establish and maintain a connection to each peer over available process/processor interfaces; to distribute and maintain a subscription message database for each peer; and to distribute messages to peers that have subscribed to message identifiers.",
		"Public Code Repo": "https://github.com/nasa/sbn",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 2768,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Software Bus Network (SBN) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:message processing",
			"nlp:distributed processing",
			"nlp:computer systems design",
			"nlp:computer network",
			"nlp:network",
			"nlp:avionic",
			"nlp:architecture (computers)",
			"nlp:flight control",
			"nlp:network control",
			"nlp:data base"
		],
		"External Link": "https://sourceforge.net/projects/cfs-sbn",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-17",
		"Description": "The Stored Command application (SC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS SC application provides the ability to execute onboard absolute-time and relative-time command sequences. The technology offers a generic implementation that can be configured by a user to fit the needs of a specific mission.",
		"Public Code Repo": "https://github.com/nasa/sc",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
		"Labor_Hours": 18528,
		"Categories": ["vehicle management (space/air/ground)"],
		"Languages": [],
		"Software": "Core Flight System (CFS) Stored Command (SC) Application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:sequencing",
			"nlp:mission planning",
			"nlp:real time operation",
			"nlp:systems engineering",
			"nlp:command and control",
			"nlp:flight control",
			"nlp:technology utilization",
			"nlp:user requirement"
		],
		"External Link": "https://sourceforge.net/projects/cfs-sc",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2008-06-16",
		"Description": "A home for NASA's open source Ruby software.  funit (Fortran unit testing framework.) fortran (Fortran utilities.) watch-paths (Poor man's file monitoring.) namelists (Generates webpage for creating namelists found in Fortran programs.) uq4sim (Uncertainty quantification for simulation.)",
		"Public Code Repo": "https://github.com/kleb/nasarb",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov"],
		"Labor_Hours": 4080,
		"Categories": ["Data and Image Processing"],
		"Languages": [],
		"Software": "NASA Ruby",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:simulation",
			"nlp:program verification (computers)",
			"nlp:software development tool",
			"nlp:flight simulation",
			"nlp:fortran",
			"nlp:performance test",
			"nlp:file maintenance (computers)"
		],
		"External Link": "https://github.com/kleb/nasarb",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-07-12",
		"Description": "This repository contains the collection of OpenAPI specification APIs within the NASA's research version of the UTM System.",
		"Public Code Repo": "https://github.com/nasa/utm-apis",
		"NASA Center": "ARC",
		"Contributors": ["Joseph Rios"],
		"Labor_Hours": 5696,
		"Categories": ["Aeronautics", "Linear Programming", "Optimization"],
		"Languages": [],
		"Software": "utm-apis",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/utm-apis",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-12-02",
		"Description": "The GTM_DesignSim is a Matlab/Simulink simulation intended for design and analysis of flight control laws. It models the dynamics of a 5.5% scale model of a generic transport aircraft. The simulation was developed to allow fault accommodating control algorithms to be developed and refined in simulation before being tested on an experimental subscale model.",
		"Public Code Repo": "https://github.com/nasa/GTM_DesignSim",
		"NASA Center": "LaRC",
		"Contributors": ["davidecox"],
		"Labor_Hours": 560,
		"Categories": [
			"Framework",
			"Toolkit",
			"Web",
			"Simulation",
			"Flight Control"
		],
		"Languages": [],
		"Software": "Flight Dynamics Simulation of a Generic Transport Model",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:aircraft control",
			"nlp:computerized simulation",
			"nlp:transport aircraft",
			"nlp:control simulation",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:algorithm",
			"nlp:flight mechanic",
			"nlp:aircraft model"
		],
		"External Link": "https://github.com/nasa/GTM_DesignSim/wiki",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-12-02",
		"Description": "NASTRAN is the NASA Structural Analysis System, a finite element analysis program (FEA) completed in the early 1970's. It was the first of its kind and opened the door to computer-aided engineering. Subsections of a design can be modeled and then larger groupings of these elements can again be modeled. NASTRAN can handle elastic stability analysis, complex eigenvalues for vibration and dynamic stability analysis, dynamic response for transient and steady state loads, and random excitation, and static response to concentrated and distributed loads, thermal expansion, and enforced deformations.",
		"Public Code Repo": "https://github.com/nasa/NASTRAN-93",
		"NASA Center": "LaRC",
		"Contributors": ["jason.duley@nasa.gov"],
		"Labor_Hours": 229792,
		"Categories": ["FEA", "Structural Analysis", "CAD", "NASTRAN"],
		"Languages": [],
		"Software": "NASTRAN 93",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:structural analysi",
			"nlp:finite element method",
			"nlp:dynamic response",
			"nlp:structural engineering",
			"nlp:structural vibration",
			"nlp:random load",
			"nlp:eigenvalue",
			"nlp:structural stability",
			"nlp:structural design"
		],
		"External Link": "https://github.com/nasa/NASTRAN-93",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-06-15",
		"Description": "Open MCT is an open source and web-based mission control framework for visualization of data on desktop and mobile devices. Open MCT is designed for analysis, visualization, operation, and support of spacecraft missions. Open MCT provides an extensible plugin system allowing it to be integrated with existing ground systems, and adapted to support multiple missions as well as non-space applications.",
		"Public Code Repo": "https://github.com/nasa/openmctweb",
		"NASA Center": "ARC",
		"Contributors": [
			"VWoeltjen",
			"larkin",
			"charlesh88",
			"brianwyu",
			"akhenry"
		],
		"Labor_Hours": 16000,
		"Categories": ["Framework", "Platform", "Web", "operations"],
		"Languages": [],
		"Software": "Open MCT",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:mission planning",
			"nlp:data acquisition",
			"nlp:interactive control",
			"nlp:large space structure",
			"nlp:onboard data processing",
			"nlp:remote control",
			"nlp:computer systems design",
			"nlp:scientific visualization",
			"nlp:personal computer"
		],
		"External Link": "https://github.com/nasa/openmctweb",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-03-16",
		"Description": "Apache Open Climate Workbench provides a Climate Science library and a suite of tools built on top of it to facilitate multi-model and multi-observation comparisons and visualizations for Climate Scientists.",
		"Public Code Repo": "https://github.com/apache/climate",
		"NASA Center": "JPL",
		"Contributors": [
			"Mr. Michael Joyce",
			"Dr. Chris A. Mattmann",
			"Mr. Paul Ramirez",
			"Dr. Lewis John McGibbney",
			"Dr. Kim Whitehall",
			"Ms. Shakeh Khudikyan",
			"Mr. Maziyar Boustani"
		],
		"Labor_Hours": 15792,
		"Categories": [
			"Climate Science",
			"Climate",
			"Toolkit",
			"Web",
			"Visualization",
			"Analysis"
		],
		"Languages": [],
		"Software": "Apache Open Climate Workbench",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:atmospheric model",
			"nlp:mathematical model",
			"nlp:climate model",
			"nlp:computerized simulation",
			"nlp:climatology",
			"nlp:interactive control",
			"nlp:climate change",
			"nlp:climate",
			"nlp:three dimensional model",
			"nlp:library"
		],
		"External Link": "https://climate.apache.org/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-11-13",
		"Description": "libSPRITE is a set of libraries that have been used on several past projects including flight, technology demonstration, and simulation projects.\n\nlibSPRITE provides a diverse set of functions to attempt to simplify coding and reduce code errors. For example, libSPRITE defines engineering units as types (i.e., Meters or Radians instead of double or int). It includes an engineering unit aware math library.\n\nlibSPRITE includes a task scheduling system that abstracts pthreads and includes a publish subscribe data system for data routing.\n\nIn addition, libSPRITE includes an optional binding to the Lua scripting language for configuring the program, setting parameters, running Lua scripts within C++ tasks and even interacting with the application during runtime.",
		"Public Code Repo": "https://github.com/nasa/libSPRITE",
		"NASA Center": "MSFC",
		"Contributors": ["dheater"],
		"Labor_Hours": 87072,
		"Categories": ["framework", "library", "middleware"],
		"Languages": [],
		"Software": "libSPRITE",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computerized simulation",
			"nlp:error",
			"nlp:scheduling",
			"nlp:programming language",
			"nlp:computer systems design",
			"nlp:systems engineering",
			"nlp:project management",
			"nlp:symbol",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/libSPRITE/wiki",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-10-22",
		"Description": "The X-Plane Communications Toolbox (XPC) is an open source research tool used to interact with the commercial flight simulator software X-Plane. XPC allows users to control aircraft and receive state information from aircraft simulated in X-Plane using functions written in C or MATLAB in real time over the network. This research tool has been used to visualize flight paths, test control algorithms, simulate an active airspace, or generate out-the-window visuals for in-house flight simulation software.",
		"Public Code Repo": "https://github.com/nasa/XPlaneConnect",
		"NASA Center": "ARC",
		"Contributors": ["teubert"],
		"Labor_Hours": 7888,
		"Categories": ["Flight Simulation", "Research Tools"],
		"Languages": [],
		"Software": "X-Plane Communication Toolbox (XPC)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:flight path",
			"nlp:real time operation",
			"nlp:computerized simulation",
			"nlp:simulator",
			"nlp:control simulation",
			"nlp:flight simulator",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:algorithm"
		],
		"External Link": "https://github.com/nasa/XPlaneConnect/wiki",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-08-26",
		"Description": "This plug-in allows users to create satellites in MCT and track their orbits, in real-time, through various views: Satellite Orbits in 3D via the Earth View plug-in. Real-time locations on a 2D Mercator Projection (A new to MCT; created within this plug-in). All of the views that come standard with the core-MCT distribution (i.e.: MultiColumn View, Plots over time, Alpha, etc.).",
		"Public Code Repo": "https://github.com/nasa/MCT-Plugins",
		"NASA Center": "GSFC",
		"Contributors": ["VWoeltjen", "harleigh", "DanBerrios", "danielpacak"],
		"Labor_Hours": 11888,
		"Categories": [
			"MCT",
			"Mission Critical Technologies",
			"plug-in",
			"telemetry",
			"tracking",
			"satellite",
			"imagery"
		],
		"Languages": [],
		"Software": "MCT-Plugins",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:standard",
			"nlp:alpha particle",
			"nlp:position (location)",
			"nlp:three dimensional model",
			"nlp:space law",
			"nlp:human-computer interface",
			"nlp:communication satellite",
			"nlp:data base",
			"nlp:user requirement"
		],
		"External Link": "https://github.com/nasa/MCT-Plugins/wiki",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-07-10",
		"Description": "Mission Control Technologies is a real-time monitoring and visualization platform.",
		"Public Code Repo": "https://github.com/nasa/mct",
		"NASA Center": "ARC",
		"Contributors": [
			"VWoeltjen",
			"DanBerrios",
			"alpearson",
			"harleigh",
			"adamcrume",
			"kptran",
			"danielpacak",
			"dtran320",
			"phallbic",
			"bhong",
			"chriswebster"
		],
		"Labor_Hours": 99248,
		"Categories": [
			"monitoring",
			"visualization",
			"MCT",
			"control",
			"application",
			"spacelfight",
			"mission"
		],
		"Languages": [],
		"Software": "mct",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/mct/wiki",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-07-30",
		"Description": "The SCRD is a flexible system that can be easily updated or modified for ongoing legislative mandates and is able to provide robust accounting tools for posting and adjusting payments.",
		"Public Code Repo": "https://github.com/nasa/SCRD",
		"NASA Center": "COE",
		"Contributors": ["rsial2"],
		"Labor_Hours": 197552,
		"Categories": [
			"repository",
			"deposits",
			"re-deposits",
			"payment",
			"tracking"
		],
		"Languages": [],
		"Software": "SCRD",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:knowledge based system",
			"nlp:computer systems design",
			"nlp:systems engineering",
			"nlp:management method",
			"nlp:computer network",
			"nlp:information retrieval",
			"nlp:systems analysi",
			"nlp:management system",
			"nlp:management information system"
		],
		"External Link": "https://github.com/nasa/SCRD",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-09-17",
		"Description": "Machine-readable schema for NASA's response to the president's digital strategy.",
		"Public Code Repo": "https://github.com/nasa/digital-strategy",
		"NASA Center": "ARC",
		"Contributors": ["jasonduley", "seanherron"],
		"Labor_Hours": 1168,
		"Categories": [
			"repository",
			"citizen",
			"developer",
			"digital strategy"
		],
		"Languages": [],
		"Software": "Digital-Strategy",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/digital-strategy",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-01",
		"Description": "Code from the Healthcare Fraud Prevention Partnership (HFPP) through United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed software that supports a data exchange network that enables healthcare insurance-paying entities in both the public and private sector to safely and securely share information for purposes of prevention and detection of fraud, waste and abuse across partners.",
		"Public Code Repo": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
		"NASA Center": "COE",
		"Contributors": ["nasarader", "rsial2"],
		"Labor_Hours": 47280,
		"Categories": [
			"HFPP",
			"Medicare & Medicaid Services",
			"fraud prevention",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "CoECI-CMS-Healthcare-Fraud-Prevention",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"symbol",
			"information dissemination",
			"computer network",
			"detection",
			"information theory",
			"network",
			"communication network",
			"information system",
			"distributed processing",
			"data transmission"
		],
		"External Link": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-01-14",
		"Description": "This is the Medicaid Provider Enrollment Screening Portal Project multi-state, multi-program provider screening application capable of risk scoring, credentialing validation, identify authentication, and sanction checks, that lowered the burden on providers and reduced administrative and infrastructure expenses for states and federal programs.",
		"Public Code Repo": "https://github.com/nasa/coeci-cms-mpsp",
		"NASA Center": "COE",
		"Contributors": ["cyberjag", "alamora", "ksirmons"],
		"Labor_Hours": 335984,
		"Categories": ["medicaid", "enrollment", "screening"],
		"Languages": [],
		"Software": "coeci-cms-mpsp",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:medical service",
			"nlp:risk",
			"nlp:research management",
			"nlp:nasa program",
			"nlp:systems engineering",
			"nlp:project management",
			"nlp:project planning",
			"nlp:computer information security",
			"nlp:technology assessment"
		],
		"External Link": "https://github.com/nasa/coeci-cms-mpsp",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-31",
		"Description": "Cassini Structured Homepages uses LDAP authorization to provide a security layer to webpage content.",
		"Public Code Repo": "https://github.com/nasa/cash",
		"NASA Center": "COE",
		"Contributors": ["dlconner"],
		"Labor_Hours": 944,
		"Categories": ["Cassini", "security"],
		"Languages": [],
		"Software": "cash",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/cash",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-31",
		"Description": "The Automatic Documentation software creates Microsoft Documents automatically using Text and Template files.",
		"Public Code Repo": "https://github.com/nasa/autodoc",
		"NASA Center": "ARC",
		"Contributors": ["dlconner"],
		"Labor_Hours": 640,
		"Categories": ["document", "templates", "application", "automation"],
		"Languages": [],
		"Software": "autodoc",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/autodoc",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-03",
		"Description": "Code from the United States Agency for International Development (USAID) and Humanity United (HU) challenge for Atrocity Prevention Modeling in collaboration with NASA's Center of Excellence for Collaboration (CoECI). This package contains the top 5 solutions submitted for the 'Tech Challenge for Atrocity Prevention' competition.",
		"Public Code Repo": "https://github.com/NASA-Tournament-Lab/CoECI-USAID-Atrocity-Prevention-Model",
		"NASA Center": "COE",
		"Contributors": ["rsial2", "AetBoston", "nasarader"],
		"Labor_Hours": 2944,
		"Categories": ["Analytics", "algorithm", "data mining", "prediction"],
		"Languages": [],
		"Software": "COECI-USAID-Atrocity-Prevention-Model",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical programming",
			"nlp:dynamic model",
			"nlp:computerized simulation",
			"nlp:product development",
			"nlp:c++ (programming language)",
			"nlp:binary code",
			"nlp:symbol",
			"nlp:research and development",
			"nlp:three dimensional model"
		],
		"External Link": "https://community.topcoder.com/longcontest/?module=ViewProblemStatement&rd=15761&pm=12634",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2013-11-06",
		"Description": "Code from the United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed an iPhone app and reporting web application used to track and compile transfers of value (e.g. gift, meal, speaking fee) from industry manufacturers (e.g. pharmaceutical companies) to physicians.",
		"Public Code Repo": "https://github.com/NASA-Tournament-Lab/coeci-cms-mpsp",
		"NASA Center": "COE",
		"Contributors": ["nasarader"],
		"Labor_Hours": 335984,
		"Categories": ["Analytics", "reporting", "tracking", "application"],
		"Languages": [],
		"Software": "CoECI-CMS-Open-Payment",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:government/industry relation",
			"nlp:technology transfer",
			"nlp:marketing",
			"nlp:document markup language",
			"nlp:industrial management",
			"nlp:symbol",
			"nlp:industry",
			"nlp:world wide web"
		],
		"External Link": "https://github.com/nasa/CoECI-CMS-Open-Payment",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-09-03",
		"Description": "This repository consists of the various scripts required to make our VADER system work. The variable emissivity radiator aerogel insulation blanket dual zone thermal control experiment suite for responsive space (STP-H3-VADER) investigation tests a variable emissivity radiator and a new form of multilayer insulation that uses Aerogel as the thermal isolator in order to protect the spacecraft from the harsh extremes of the space environment. The Aerogel material provides a more durable, lighter and cheaper alternative to traditional spacecraft thermal blankets. The use of this material could reduce the costs related to spaceflight by reducing the required spacecraft mass and increasing design efficiency.",
		"Public Code Repo": "https://github.com/nasa/VADER",
		"NASA Center": "JSC",
		"Contributors": ["pmosbach", "ecabuhay", "jdtunage"],
		"Labor_Hours": 43184,
		"Categories": ["software", "operations", "VADER"],
		"Languages": [],
		"Software": "VADER",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:large space structure",
			"nlp:cost",
			"nlp:systems engineering",
			"nlp:low cost",
			"nlp:cost reduction",
			"nlp:active control",
			"nlp:cost effectivenes",
			"nlp:automatic control",
			"nlp:control systems design"
		],
		"External Link": "https://github.com/nasa/VADER/wiki",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2013-06-14",
		"Description": "This is the source code for the WordPress theme that powers data.nasa.gov. Data.nasa.gov is NASA's flagship platform for sharing information about the vast data we collect and store over 100 years of U.S. aeronautics and space data. Developers, technologists, entrepreneurs, citizen scientists, and many others can contribute directly to the exploration of space and Earth by helping to create new ways of looking at this data.",
		"Public Code Repo": "https://github.com/nasa/data.nasa.gov",
		"NASA Center": "HQ",
		"Contributors": ["seanherron"],
		"Labor_Hours": 5584,
		"Categories": [
			"software",
			"operations",
			"open source",
			"datasets",
			"NASA"
		],
		"Languages": [],
		"Software": "data.nasa.gov",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:aerospace science",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:data management",
			"nlp:remote sensing",
			"nlp:space exploration",
			"nlp:data storage",
			"nlp:data processing",
			"nlp:information management",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/data.nasa.gov",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-14",
		"Description": "This is the source code for the WordPress theme that powers code.nasa.gov. Code.nasa.gov expands NASA's open source activities, surfaces existing activities, and guides internal and external groups in open development, release, and contribution. In doing so, NASA hopes to lower barriers to building open technology in partnership with the public.",
		"Public Code Repo": "https://github.com/nasa/code.nasa.gov",
		"NASA Center": "HQ",
		"Contributors": ["seanherron"],
		"Labor_Hours": 5456,
		"Categories": ["software", "operations", "open source", "code", "NASA"],
		"Languages": [],
		"Software": "code.nasa.gov",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:technology utilization",
			"nlp:research and development",
			"nlp:group theory",
			"nlp:computerized simulation",
			"nlp:product development",
			"nlp:symbol",
			"nlp:computation",
			"nlp:java (programming language)",
			"nlp:defense program",
			"nlp:technology assessment"
		],
		"External Link": "https://code.nasa.gov",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2011-12-21",
		"Description": "The NASA Ames Stereo Pipeline is a suite of automated geodesy & stereogrammetry tools designed for processing planetary imagery captured from orbiting and landed robotic explorers on other planets.",
		"Public Code Repo": "https://github.com/nasa/StereoPipeline",
		"NASA Center": "ARC",
		"Contributors": [
			"zmoratto",
			"broxtronix",
			"novas0x2a",
			"khusmann",
			"anefian",
			"trey0",
			"mstyer",
			"rbeyer",
			"mdhancher",
			"harguess",
			"saravkin"
		],
		"Labor_Hours": 31504,
		"Categories": [
			"NGT",
			"Neo-Geography Toolkit",
			"NASA",
			"open source",
			"geodesy",
			"stereogrammetry",
			"imagery"
		],
		"Languages": [],
		"Software": "StereoPipeline",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:pipelining (computers)",
			"nlp:stereoscopic vision",
			"nlp:planet",
			"nlp:extrasolar planet",
			"nlp:planetary system",
			"nlp:imagery",
			"nlp:pipeline",
			"nlp:geodesy",
			"nlp:satellite imagery"
		],
		"External Link": "https://github.com/nasa/StereoPipeline",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2011-06-30",
		"Description": "Space weather media viewer.",
		"Public Code Repo": "https://github.com/nasa/NASA-Space-Weather-Media-Viewer",
		"NASA Center": "ARC",
		"Contributors": ["MatthewValverde"],
		"Labor_Hours": 6480,
		"Categories": [
			"media",
			"viewer",
			"imagery",
			"space",
			"weather",
			"Google",
			"Android"
		],
		"Languages": [],
		"Software": "NASA-Space-Weather-Media-Viewer",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://play.google.com/store/apps/details?id=air.NasaSpaceViewer",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-09-10",
		"Description": "Tool for Analysis of Surface Cracks (TASC) is a computer program created in MATLAB to enable easy computation of nonlinear J-integral solutions for surface cracked plates in tension by accessing and interpolating between the 600 nonlinear surface crack solutions documented in NASA/TP-2011-217480. The only required inputs are the surface crack dimensions (2c and a), plate cross-section dimensions (W and B), and linear plus power law material properties of elastic modulus, yield strength, and strain hardening coefficient. With the geometry and material parameters entered, TASC interpolates to the appropriate J(Φ) vs. crack mouth opening displacement (CMOD) and far-field tension stress, σ, vs. CMOD solution, providing the full solution as CMOD ranges from zero out to the CMOD limit of the solution space for the given input parameters. TASC was developed by the Material and Processes Laboratory at NASA's Marshall Space Flight Center.",
		"Public Code Repo": "https://sourceforge.net/projects/tascnasa",
		"NASA Center": "MSFC",
		"Contributors": ["pa-allen"],
		"Labor_Hours": 16,
		"Categories": [
			"technology",
			"tool",
			"analysis",
			"surface",
			"cracks",
			"displacement"
		],
		"Languages": [],
		"Software": "Tool for Analysis of Surface Cracks (TASC)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:stress analysi",
			"nlp:modulus of elasticity",
			"nlp:plates (structural members)",
			"nlp:yield strength",
			"nlp:crack opening displacement",
			"nlp:mechanical propertie",
			"nlp:crack",
			"nlp:crack geometry",
			"nlp:metal plate",
			"nlp:cracking (fracturing)"
		],
		"External Link": "https://sourceforge.net/projects/tascnasa/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2011-11-20",
		"Description": "Datacasting is a RSS publish-subscribe method for delivering Earth Science data. A Feed Reader provides feed filtering, data download, and the ability to mash-up data with information related to geophysical events.",
		"Public Code Repo": "https://sourceforge.net/projects/datacasting/files/latest/download",
		"NASA Center": "JPL",
		"Contributors": ["jplsr"],
		"Labor_Hours": 30,
		"Categories": [
			"datacasting",
			"RSS",
			"data",
			"filter",
			"geophysical events",
			"geophysics",
			"earth science"
		],
		"Languages": [],
		"Software": "Earth Science Datacasting",
		"License": ["BSD-3-Clause"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:information theory",
			"nlp:remote sensing",
			"nlp:information retrieval",
			"nlp:data processing",
			"nlp:information management",
			"nlp:earth (planet)",
			"nlp:data base"
		],
		"External Link": "http://datacasting.jpl.nasa.gov/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-07-08",
		"Description": "The Interplanetary Overlay Network (ION) software distribution is an implementation of Delay-Tolerant Networking (DTN) architecture as described in Internet RFC 4838. It includes implementations of the DTN Bundle Protocol, the Licklider Transmission Protocol, and two CCSDS application protocols that have been adapted to run over the BP/LTP stack: the CCSDS File Delivery Protocol and Asynchronous Message Service.",
		"Public Code Repo": "https://sourceforge.net/projects/ion-dtn/files/latest/download",
		"NASA Center": "JPL",
		"Contributors": ["jplsr", "hkruse", "sburleig", "shawnostermann"],
		"Labor_Hours": 372512,
		"Categories": [
			"software",
			"distribution",
			"network",
			"interplanetary overlay network",
			"ION",
			"earth science"
		],
		"Languages": [],
		"Software": "Interplanetary Overlay Network (ION) Software Distribution (DTN)",
		"License": ["BSD-3-Clause"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:internet",
			"nlp:message processing",
			"nlp:distributed processing",
			"nlp:data transmission",
			"nlp:computer network",
			"nlp:network",
			"nlp:communication network",
			"nlp:architecture (computers)"
		],
		"External Link": "https://sourceforge.net/projects/ion-dtn/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2011-12-05",
		"Description": "The Data Productivity Toolkit is a collection of linux command-line tools designed to facilitate the analysis of text-based data sets. Modeled after the general linux pipeline tools such as awk, grep, and sed, the kit provides powerful tools for selecting/combining data, performing statistics, and visualizing results. The tools are all written in python and in many instances provide a command-line API to basic python and numpy/scipy/matplotlib routines.",
		"Public Code Repo": "https://sourceforge.net/projects/dptoolkit/files/latest/download",
		"NASA Center": "JPL",
		"Contributors": ["jplsr"],
		"Labor_Hours": 80,
		"Categories": ["data", "productivity", "toolkit", "data collection"],
		"Languages": [],
		"Software": "Data Productivity Toolkit",
		"License": ["BSD-3-Clause"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:productivity",
			"nlp:data acquisition",
			"nlp:statistical analysi",
			"nlp:software development tool",
			"nlp:on-line system",
			"nlp:pipeline",
			"nlp:data structure",
			"nlp:data processing",
			"nlp:data reduction"
		],
		"External Link": "https://sourceforge.net/projects/dptoolkit/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2014-09-08",
		"Description": "The SunPy project is an effort to create an open-source software library for solar physics using the Python programming language. More information at http://www.sunpy.org.",
		"Public Code Repo": "https://github.com/sunpy/sunpy",
		"NASA Center": "GSFC",
		"Contributors": [
			"segfaulthunter",
			"Cadair",
			"khughitt",
			"ehsteve",
			"wafels",
			"derdon",
			"ayshih",
			"DanRyanIrish",
			"aringlis",
			"rhewett",
			"drewleonard42",
			"kaichogami",
			"dpshelio",
			"VaticanCameos",
			"nabobalis",
			"mattearnshaw",
			"gunner272",
			"amras1",
			"CyclingNinja",
			"ndchorley",
			"quintusdias",
			"mjm159",
			"rubendv",
			"rajul-iitkgp",
			"Hypnus1803",
			"ankit-maverick",
			"ToyDragon",
			"larrymanley",
			"JordanBallew",
			"transientlunatic",
			"mateoi",
			"examon",
			"astrofrog",
			"bmampaey",
			"jaylenw",
			"airyens",
			"freekv"
		],
		"Labor_Hours": 19840,
		"Categories": ["libary", "repository", "solar", "physics"],
		"Languages": [],
		"Software": "SunPy",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:education",
			"nlp:radiation source",
			"nlp:aerospace science",
			"nlp:radio sources (astronomy)",
			"nlp:nuclear interaction",
			"nlp:point source",
			"nlp:anisotropy",
			"nlp:astronomical spectroscopy",
			"nlp:solar physic",
			"nlp:data base"
		],
		"External Link": "http://www.sunpy.org",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2013-05-01",
		"Description": "Mutil is a set of standard utilities that employ multiple types of parallelism and other optimizations to achieve maximum performance on modern file systems. Multi-threading is used to ensure that nodes are kept as busy as possible. Double buffering allows individual operations within a single task to be overlapped using asynchronous I/O. Multi-node cooperation allows different nodes to take part in the same task. Split file processing allows multiple threads to operate concurrently on the same file. Finally, additional optimizations such as buffer management help eliminate other bottlenecks that can reduce performance. Mutil currently includes drop-in replacements for cp and md5sum from GNU coreutils, which have achieved 10/30x rates on one/many nodes.",
		"Public Code Repo": "https://sourceforge.net/projects/mutil/files/latest/download",
		"NASA Center": "ARC",
		"Contributors": ["pkolano"],
		"Labor_Hours": 16,
		"Categories": [
			"file",
			"processing",
			"utilities",
			"nodes",
			"multi-thread",
			"optimization",
			"parallelism"
		],
		"Languages": [],
		"Software": "Multi-Threaded Multi-Node Utilities (Mutil)",
		"License": ["GPLv3"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:optimization",
			"nlp:buffer storage",
			"nlp:task",
			"nlp:human performance",
			"nlp:task complexity",
			"nlp:replacing",
			"nlp:file maintenance (computers)",
			"nlp:management system",
			"nlp:parallel processing (computers)"
		],
		"External Link": "http://mutil.sourceforge.net",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2012-09-06",
		"Description": "Mesh is a secure, lightweight grid middleware that is based on the addition of a single sign-on capability to the built-in public key authentication mechanism of SSH using system call interposition. Resources may be added to a Mesh-based grid in a matter of minutes using just five small files and two environment variable settings. Mesh adheres to fundamental security principles and was designed to be compatible with strong security mechanisms including two-factor authentication, SSH bastions, and restrictive firewalls. Mesh uses a remote command model, which is based on stock SSH clients and the syntax and commands already understood by users, thus requires no additional software or knowledge to utilize effectively. Several existing services have been integrated with Mesh to provide resource discovery and query, high performance file transfer, and job management.",
		"Public Code Repo": "https://sourceforge.net/projects/mesh/files/latest/download",
		"NASA Center": "ARC",
		"Contributors": ["pkolano"],
		"Labor_Hours": 86005,
		"Categories": ["middleware", "ssh", "host"],
		"Languages": [],
		"Software": "Middleware Using Existing SSH Hosts (MESH)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:distributed processing",
			"nlp:operating systems (computers)",
			"nlp:information system",
			"nlp:computational grid",
			"nlp:security",
			"nlp:resource allocation",
			"nlp:computer information security",
			"nlp:file maintenance (computers)",
			"nlp:human-computer interface",
			"nlp:query language"
		],
		"External Link": "http://mesh.sourceforge.net",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-05-13",
		"Description": "Ballast is a tool for balancing user load across SSH servers based on configurable criteria such as CPU load and system availability. Ballast is invoked as part of the SSH login process, hence has access to the user name, which is not available in traditional load balancers. This gives ballast the unique ability to perform user-specific load balancing, which has several benefits including separating users who have historically generated high loads and providing a common login interface to users who may be separated based on other criteria such as system accessibility. Ballast includes a simple client, a lightweight data server, and a data collection agent.",
		"Public Code Repo": "https://sourceforge.net/projects/ballast/files/latest/download",
		"NASA Center": "ARC",
		"Contributors": ["pkolano"],
		"Labor_Hours": 688,
		"Categories": ["ballast", "ssh", "host", "clustering"],
		"Languages": [],
		"Software": "Balancing Load Across Systems (Ballast)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data management",
			"nlp:distributed processing",
			"nlp:data acquisition",
			"nlp:loads (forces)",
			"nlp:personal computer",
			"nlp:data processing",
			"nlp:human-computer interface",
			"nlp:data base"
		],
		"External Link": "http://ballast.sourceforge.net",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2014-08-12",
		"Description": "Software implementation of JPL published paper for performing lossless hyper-spectral and milti-spectral data compression. The implementation was executed to confirm the results obtained by JPL independently. Implemented JPL published paper and its revised version presented to the CCSDS hyper/multi-spectral data compression working group. The implementation follows every step listed in the relevant papers and usess C-code for simplicity. The software takes 3-dimensional test data provided by the CCSDS working group and created predictor error results that can be further encoded with other known techniques.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/LHD/LHD.zip",
		"NASA Center": "GSFC",
		"Contributors": ["pkolano"],
		"Labor_Hours": 192,
		"Categories": [
			"lossless",
			"hyper-spectral",
			"milti-spectral",
			"data",
			"compression",
			"CCSDS"
		],
		"Languages": [],
		"Software": "Lossless Hyper-multi-spectral data compression software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:error correcting code",
			"nlp:evaluation",
			"nlp:c (programming language)",
			"nlp:error",
			"nlp:data compression",
			"nlp:symbol",
			"nlp:algorithm",
			"nlp:data reduction",
			"nlp:error analysi"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/LHD",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2013-03-08",
		"Description": "The Simple, Scalable, Script-based Science Processor for Measurements (S4PM) is a system for highly automated processing of science data, scalable up to large processing systems and scalable down to small, special-purpose processing strings.",
		"Public Code Repo": "https://sourceforge.net/projects/s4pm/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["btrivedi", "clynnes", "sberrick"],
		"Labor_Hours": 14608,
		"Categories": [
			"science",
			"process",
			"automation",
			"data",
			"simple",
			"scalable",
			"script-based",
			"measurements"
		],
		"Languages": [],
		"Software": "Simple, Scalable, Script-based Science Processor for Measurements (S4PM)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:data processing equipment",
			"nlp:distributed processing",
			"nlp:central processing unit",
			"nlp:data acquisition",
			"nlp:signal processing",
			"nlp:data processing",
			"nlp:optical data processing",
			"nlp:multiprocessing (computers)",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://sourceforge.net/projects/s4pm",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-09-16",
		"Description": "G-SDSU core modules enables users to insert their own satellite simulator to convert model-simulated atmosphere states to various types of satellite observable signals (radiance or backscattering signals), and to compare such data with comparable measurements collected by corresponding satellite level-1 measurement.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/G-SDSU-core.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["opensource@gsfc.nasa.gov"],
		"Labor_Hours": 3344,
		"Categories": [
			"modeling",
			"GPM",
			"satellite",
			"mission",
			"observation",
			"atmoshpere",
			"algorithm",
			"measurements"
		],
		"Languages": [],
		"Software": "Goddard Satellite Data Simulation Unit (G-SDSU)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:simulator",
			"nlp:state estimation",
			"nlp:state vector",
			"nlp:signal processing",
			"nlp:satellite imagery",
			"nlp:human-computer interface"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2013-04-24",
		"Description": "ViSBARD (Visual System for Browsing, Analysis, and Retrieval of Data) is an interactive visualization and analysis tool for space physics data. It provides an integrated 3-D/2-D environment to analyze measurements across many spacecraft and MHD models.",
		"Public Code Repo": "https://sourceforge.net/projects/visbard/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["boller8"],
		"Labor_Hours": 325264,
		"Categories": [
			"visual",
			"system",
			"browse",
			"analysis",
			"retrieval",
			"data",
			"tool",
			"space",
			"physics",
			"MHD",
			"models"
		],
		"Languages": [],
		"Software": "Visual System for Browsing, Analysis and Retrieval of Data (ViSBARD)",
		"License": ["Apache-2.0", "GPLv3"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:mathematical model",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:interactive control",
			"nlp:information retrieval",
			"nlp:scientific visualization",
			"nlp:data retrieval",
			"nlp:data reduction"
		],
		"External Link": "https://spdf.gsfc.nasa.gov/research/visualization/visbard/index.html",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2013-04-24",
		"Description": "This software enables easy comparison of ground- and space-based radar observations. The software was initially designed to compare ground radar reflectivity from operational, ground-based, S- and C-band meteorological radars with comparable measurements from the Tropical Rainfall Measuring Mission satellite's Precipitation Radar instrument. The software is also applicable to other ground-based and space-based radars. The software allows both ground and space based radar data to be compared for validation purposes.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GSRadar/GS-Radar.tar",
		"NASA Center": "GSFC",
		"Contributors": [
			"kenneth.r.morris@nasa.gov",
			"mathew.r.schwaller@nasa.gov"
		],
		"Labor_Hours": 6608,
		"Categories": [
			"ground",
			"space",
			"radar",
			"validation",
			"volume",
			"matching",
			"comparison",
			"software"
		],
		"Languages": [],
		"Software": "Ground and space radar volume matching and comparison software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spaceborne experiment",
			"nlp:methodology",
			"nlp:data acquisition",
			"nlp:environmental monitoring",
			"nlp:astronaut",
			"nlp:long duration space flight",
			"nlp:manned space flight",
			"nlp:exobiology",
			"nlp:extraterrestrial environment",
			"nlp:anthropometry"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/GSRadar/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-09-16",
		"Description": "The Global Modeling and Assimilation Office (GMAO) has delivered the next generation general circulation model, GEOS-5. This system represents a new paradigm for systems development, in that GEOS-5 has been developed with the Earth System Modeling Framework (ESMF) for its internal architecture using the MAPL software toolkit developed for GEOS-5.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/GEOSagcm-Eros_7_24.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Steven Pawson"],
		"Labor_Hours": 239968,
		"Categories": [
			"Stand-alone",
			"Atmosphere",
			"Land",
			"Ocean",
			"Coupled",
			"CGM",
			"Climate",
			"Biology",
			"Model",
			"Numerical",
			"Weather",
			"Prediction",
			"Experimental",
			"Seasonal",
			"Forecasting",
			"GEOS-5",
			"software",
			"earth science",
			"circulation",
			"analysis"
		],
		"Languages": [],
		"Software": "GEOS-5 GCM Modeling Software",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:atmospheric model",
			"nlp:mathematical model",
			"nlp:dynamic model",
			"nlp:computerized simulation",
			"nlp:atmospheric circulation",
			"nlp:software development tool",
			"nlp:systems engineering",
			"nlp:architecture (computers)",
			"nlp:assimilation"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-10-26",
		"Description": "The General Mission Analysis Tool (GMAT), developed at the Goddard Space Flight Center, is the world’s only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2016a/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["stevenhughes"],
		"Labor_Hours": 33152,
		"Categories": [
			"Simulations",
			"visualization",
			"mathematics",
			"physics",
			"mission",
			"planning",
			"tool"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT R2016a)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:evaluation",
			"nlp:aerospace system",
			"nlp:mission planning",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:systems engineering",
			"nlp:software development tool",
			"nlp:systems analysi",
			"nlp:flight control"
		],
		"External Link": "http://gmat.gsfc.nasa.gov/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-11-02",
		"Description": "The General Mission Analysis Tool (GMAT), developed at the Goddard Space Flight Center, is the world’s only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2015a/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": [
			"djcinsb",
			"jjkparker",
			"qure0013",
			"space_egd",
			"stevenhughes",
			"wendys-dev",
			"dcooley",
			"dktkgks",
			"hykim9501",
			"jbez",
			"lindajun",
			"mhkim0522",
			"shawnhoffman",
			"tgrubb",
			"tnguye2"
		],
		"Labor_Hours": 438592,
		"Categories": [
			"Simulations",
			"visualization",
			"mathematics",
			"physics",
			"mission",
			"planning",
			"tool"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT R2015a)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:evaluation",
			"nlp:aerospace system",
			"nlp:mission planning",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:systems engineering",
			"nlp:software development tool",
			"nlp:systems analysi",
			"nlp:flight control"
		],
		"External Link": "http://gmat.gsfc.nasa.gov/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2021-05-06",
		"Description": "The Goddard Mission Services Evolution Center (GMSEC) program was established in 2001 to coordinate ground data systems development and services at GSFC with the ultimate goal to efficiently support current and future GSFC mission services. The GMSEC architecture is a ground systems architecture that spans the full mission lifecycle from development through operations. The architecture provides a secure, scalable and extensible communications and data system that supports all aspects of a mission from onboard processing through the Mission Operations Center (MOC) to public access on the Internet. The architecture includes an Application Programming Interface (API) and message bus to provide a publish and subscribe communication mechanism. The GMSEC architecture and source code are based on an enterprise architecture approach with a message-oriented cross-platform enterprise middleware (information software bus).",
		"Public Code Repo": "https://github.com/nasa/GMSEC_API/releases/tag/API-4.8-release",
		"NASA Center": "GSFC",
		"Contributors": [
			"bwiegand",
			"mhandy",
			"dwhitney",
			"david.m.whitney@nasa.gov",
			"dmwhitne-583"
		],
		"Labor_Hours": 475120,
		"Categories": [
			"mission",
			"support",
			"GMSEC",
			"API",
			"MOC",
			"ground",
			"data",
			"systems",
			"middleware"
		],
		"Languages": [],
		"Software": "Goddard Mission Services Evolution Center Architecture (GMSEC) API",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:telecommunication",
			"nlp:data system",
			"nlp:channels (data transmission)",
			"nlp:architecture (computers)",
			"nlp:information system",
			"nlp:data processing",
			"nlp:communication network",
			"nlp:distributed processing",
			"nlp:onboard data processing"
		],
		"External Link": "https://github.com/nasa/GMSEC_API",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "BigView allows for interactive panning and zooming of images of arbitrary size on desktop PCs running linux. Additionally, it can work in a multi-screen environment where multiple PCs cooperate to view a single large image. Using this software, one can explore -- on relatively modest machines -- images such as the Mars Orbiter Camera mosaic [92160x33280 pixels].",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/bigView.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 24928,
		"Categories": [
			"image processing",
			"composite",
			"image",
			"linux",
			"PC",
			"bigview"
		],
		"Languages": [],
		"Software": "BigView",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:camera",
			"nlp:color",
			"nlp:imaging technique",
			"nlp:measuring instrument",
			"nlp:programming environment",
			"nlp:computer vision",
			"nlp:image analysi",
			"nlp:video signal",
			"nlp:personal computer",
			"nlp:image processing"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/bigview/",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Block GP is a Gaussian Process regression framework for multimodal data, that can be an order of magnitude more scalable than existing state-of-the-art nonlinear regression algorithms. The framework builds local Gaussian Processes on semantically meaningful partitions of the data and provides higher prediction accuracy than a single global model with very high confidence.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/BlockGP.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 960,
		"Categories": [
			"guassian",
			"regression",
			"data",
			"multimodal",
			"algorithm",
			"block-GP",
			"scalable"
		],
		"Languages": [],
		"Software": "Block-GP: Scalable Gaussian Process Regression",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:statistical analysi",
			"nlp:prediction analysis technique",
			"nlp:random process",
			"nlp:accuracy",
			"nlp:performance prediction",
			"nlp:data processing",
			"nlp:algorithm",
			"nlp:regression analysi"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/block-gp/",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2004-01-26",
		"Description": "CODE is a software framework for control and observation in distributed environments. The basic functionality of the framework allows a user to observe a distributed set of resources, services, and applications. A user can also use the framework to manage distributed resources, services, and applications.",
		"Public Code Repo": "http://www.nas.nasa.gov/Resources/Software/Open-Source/Downloads/Code/code-1_0b1.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 12640,
		"Categories": [
			"observation",
			"control",
			"distributed environments",
			"application"
		],
		"Languages": [],
		"Software": "CODE software framework",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphical user interface",
			"nlp:network control",
			"nlp:operating systems (computers)",
			"nlp:distributed processing",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:resource allocation",
			"nlp:active control",
			"nlp:automatic control",
			"nlp:human-computer interface"
		],
		"External Link": "http://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-04",
		"Description": "The purpose of this Opensource forum is to promote the development of a JAVA based Application Programming Interface for the field of Mass Properties Engineering.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MPE_E_Std_API_Distribution_2010_08_25.zip",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 1216,
		"Categories": [
			"java",
			"data object manipulation",
			"mass",
			"properties",
			"engineering"
		],
		"Languages": [],
		"Software": "E-Standards for Mass Properties Engineering",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:research and development",
			"nlp:dynamic programming",
			"nlp:mathematical programming",
			"nlp:graphical user interface",
			"nlp:product development",
			"nlp:programming environment",
			"nlp:magnetic field",
			"nlp:interface",
			"nlp:human-computer interface"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "The Geometry Manipulation Protocol (GMP) is a library which serializes datatypes between XML and ANSI C data structures to support CFD applications. This library currently provides a description of geometric configurations, general moving-body scenarios (prescribed and/or 6-DOF), and control surface settings.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/gmp-1.0.0.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 20432,
		"Categories": [
			"earth science",
			"geometry",
			"XML",
			"CFD",
			"ANSI C",
			"library",
			"GMP"
		],
		"Languages": [],
		"Software": "Geometry Manipulation Protocol (GMP)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:configuration management",
			"nlp:flow geometry",
			"nlp:geometry",
			"nlp:topology",
			"nlp:computational geometry",
			"nlp:data structure",
			"nlp:library",
			"nlp:surface geometry"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/gmp/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Growler is a C++-based distributed object and event architecture. It is written in C++, and supports serialization of C++ objects as part of its Remote Method Invocation, Event Channels, and in its Interface Definition Language. Its primary application has been in support of interactive, distributed visualization, computational steering, and concurrent visualization, but it is a general purpose system for distributed programming.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/growler-0.3.5.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 102032,
		"Categories": [
			"data visualization",
			"distributed",
			"object",
			"remote method invocation",
			"event channels",
			"IDL",
			"C++",
			"GMP"
		],
		"Languages": [],
		"Software": "Growler",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:graphical user interface",
			"nlp:object-oriented programming",
			"nlp:interactive control",
			"nlp:programming language",
			"nlp:language",
			"nlp:computer systems design",
			"nlp:high level language",
			"nlp:architecture (computers)",
			"nlp:human-computer interface"
		],
		"External Link": "http://growler.sourceforge.net/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "IND is applicable to most data sets consisting of independent instances, each described by a fixed length vector of attribute values. An attribute value may be a number, one of a set of attribute specific symbols, or omitted. One of the attributes is delegated the 'target' and IND grows trees to predict the target. Prediction can then be done on new data or the decision tree printed out for inspection.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/IND2.1.2.1-NASA-OSA.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 14144,
		"Categories": [
			"IND",
			"decision tree",
			"prediction",
			"data processing",
			"manipulation"
		],
		"Languages": [],
		"Software": "IND: Creation and Manipulation of Decision Trees from Data",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:decision theory",
			"nlp:trees (mathematics)",
			"nlp:vectors (mathematics)",
			"nlp:binary data",
			"nlp:prediction analysis technique",
			"nlp:set theory",
			"nlp:data structure",
			"nlp:symbol",
			"nlp:data processing",
			"nlp:data reduction"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/ind/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "The Execution Service allows users to submit, monitor, and cancel complex jobs. Each job consists of a set of tasks that perform actions such as executing applications and managing data. Each task is executed based on a starting condition that is an expression on the states of other tasks. This formulation allows tasks to be executed in parallel and also allows a user to specify tasks to execute when other tasks succeed, fail or are cancelled.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-es-1.0.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 25856,
		"Categories": [
			"IPG",
			"execution service",
			"data management",
			"data processing",
			"parallel"
		],
		"Languages": [],
		"Software": "IPG Execution Service",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:user requirement",
			"nlp:distributed processing",
			"nlp:response time (computers)",
			"nlp:steady state",
			"nlp:data processing",
			"nlp:human-computer interface",
			"nlp:query language",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/ipg/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "JavaGenes is a fairly general purpose evolutionary software system written in Java. It implements several versions of the genetic algorithm, simulated annealing, stochastic hill climbing and other search techniques. JavaGenes has been used to evolve molecules, atomic force field parameters, digital circuits, Earth Observing Satellite schedules, and antennas.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/JavaGenes.0.7.68.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 205936,
		"Categories": [
			"java",
			"javagenes",
			"genetic",
			"algorithm",
			"search",
			"EOS",
			"usg-artificial-intelligence",
			"evolutionary-algorithms",
			"evolutionary",
			"machine-learning",
			"annealing"
		],
		"Languages": [],
		"Software": "JavaGenes",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"genetic algorithm",
			"simulated annealing",
			"circuit",
			"algorithm"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Libibvpp is a C++ wrapper around libibverbs, which is part of the OpenFabrics software suite (www.openfabrics.org).",
		"Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/libibvpp",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 24304,
		"Categories": [
			"libibvpp",
			"openfabrics",
			"C++",
			"wrapper",
			"libibverbs"
		],
		"Languages": [],
		"Software": "Libibvpp",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/libibvpp/",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Livingstone2 is a reusable artificial intelligence (AI) software system designed to assist spacecraft, life support systems, chemical plants or other complex systems in operating robustly with minimal human supervision, even in the face of hardware failures or unexpected events. Livingstone2 diagnoses the current state of the spacecraft or other system and recommends commands or repair actions that will allow the system to continue operations.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/L2-OSA-unix_2.7.8.2.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 436176,
		"Categories": [
			"livingstone2",
			"artificial intelligence",
			"AI",
			"spacecraft",
			"life support",
			"autonomous",
			"diagnostics",
			"operation"
		],
		"Languages": [],
		"Software": "Livingstone2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spacecraft control",
			"nlp:airborne/spaceborne computer",
			"nlp:complex system",
			"nlp:failure analysi",
			"nlp:system failure",
			"nlp:artificial intelligence",
			"nlp:command and control",
			"nlp:reliability engineering",
			"nlp:hardware",
			"nlp:maintenance"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/livingstone2/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Mariana is an algorithm that efficiently optimizes the hyperparameters for Support Vector Machines for regression and classification.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/Mariana_.tgz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 3456,
		"Categories": [
			"mariana",
			"algorithm",
			"classification",
			"regression",
			"hyperparameters"
		],
		"Languages": [],
		"Software": "Mariana",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/mariana/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "The MST is a simulation framework, supporting the development of autonomy technology for planetary exploration vehicles. The MST provides a software test bed which includes simulated robotic platforms, sensors, and environments.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MST_v1-0b.tgz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 63872,
		"Categories": [
			"mission simulation toolkit",
			"MST",
			"autonomous",
			"planetary exploration",
			"robotics",
			"sensor",
			"test bed"
		],
		"Languages": [],
		"Software": "Mission Simulation ToolKit (MST)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:autonomy",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:robotic",
			"nlp:simulation",
			"nlp:flight simulation",
			"nlp:autonomous navigation",
			"nlp:multisensor application",
			"nlp:technology assessment",
			"nlp:sensor"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Multi-Fidelity Simulator, MFSim is a pluggable framework for creating an air traffic flow simulator at multiple levels of fidelity. The framework is designed to allow low-fidelity simulations of the entire US Airspace to be completed very quickly (on the order of seconds). The framework allows higher-fidelity plugins to be added to allow higher-fidelity simulations to occur in certain regions of the airspace concurrently with the low-fidelity simulation of the full airspace.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MFSim1_0.zip",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 993056,
		"Categories": [
			"multi-fidelity",
			"simulator",
			"MFS",
			"MFSim",
			"air traffic flow",
			"airspace",
			"aviation"
		],
		"Languages": [],
		"Software": "Multi-Fidelity Simulator (MFSim)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:air traffic control",
			"nlp:computerized simulation",
			"nlp:systems simulation",
			"nlp:air traffic",
			"nlp:simulation",
			"nlp:airspace",
			"nlp:simulator",
			"nlp:traffic"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/mfsim/",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "NodeMon is a resource utilization monitor tailored to the Altix architecture, but is applicable to any Linux system or cluster. It allows distributed resource monitoring via the Growler software infrastructure. It is modular, with existing modules for monitoring of cpu, memory, network, and numalink activity.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/nodemon-0.3.3.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 23456,
		"Categories": [
			"nodemon",
			"resource",
			"utilization",
			"monitor",
			"growler",
			"modular"
		],
		"Languages": [],
		"Software": "NodeMon",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:distributed processing",
			"nlp:memory (computers)",
			"nlp:neural net",
			"nlp:computer systems design",
			"nlp:computer network",
			"nlp:data storage",
			"nlp:resource allocation",
			"nlp:architecture (computers)",
			"nlp:time sharing"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/nodemon/",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Pour is a general-purpose information service framework designed to accommodate a wide variety of information types with support for high volume, low frequency periodic updates, user-specified updates, and automatic updates collected on-demand when needed. Information is stored exclusively in XML and retrieved using standard XPath queries over a single unified namespace independent of the information's source.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-pour-1.0.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 7920,
		"Categories": ["pour", "xml", "xpath", "information service"],
		"Languages": [],
		"Software": "Pour",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:finite volume method",
			"nlp:document markup language",
			"nlp:information retrieval",
			"nlp:standard",
			"nlp:information management",
			"nlp:user requirement"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/pour/",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "The ROBUS-2 Protocol Processor (RPP) is a custom-designed hardware component implementing the functionality of the ROBUS-2 fault-tolerant communication system. The Reliable Optical Bus (ROBUS) is the core communication system of the Scalable Processor-Independent Design for Enhanced Reliability (SPIDER), a general-purpose fault-tolerant integrated modular architecture currently under development at NASA Langley Research Center. ROBUS is a time-division multiple access (TDMA) broadcast communication system with medium access control by means of time-indexed communication schedule. ROBUS-2 is a developmental version of the ROBUS providing guaranteed fault-tolerant services to the attached processing elements (PEs), in the presence of a bounded number of faults.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/robus2.zip",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 7408,
		"Categories": [
			"robus-2",
			"robus",
			"rpp",
			"spider",
			"processing elements",
			"TDMA",
			"fault tolerant",
			"fault-tolerant"
		],
		"Languages": [],
		"Software": "ROBUS-2",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:protocol (computers)",
			"nlp:fault tolerance",
			"nlp:distributed processing",
			"nlp:real time operation",
			"nlp:channels (data transmission)",
			"nlp:computer systems design",
			"nlp:computer systems performance",
			"nlp:architecture (computers)",
			"nlp:digital system",
			"nlp:multiprocessing (computers)"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/robus-2/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "sequenceMiner was developed to address the problem of detecting and describing anomalies in large sets of high-dimensional symbol sequences. sequenceMiner works by performing unsupervised clustering (grouping) of sequences using the normalized longest common subsequence (LCS) as a similarity measure, followed by a detailed analysis of outliers to detect anomalies. sequenceMiner utilizes a new hybrid algorithm for computing the LCS that has been shown to outperform existing algorithms by a factor of five. sequenceMiner also includes new algorithms for outlier analysis that provide comprehensible indicators as to why a particular sequence was deemed to be an outlier. This provides analysts with a coherent description of the anomalies identified in the sequence, and why they differ from more 'normal' sequences.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/SequenceMiner.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 1120,
		"Categories": [
			"sequenceMiner",
			"detection",
			"cluster",
			"longest common sequence",
			"LCS",
			"algorithm",
			"outlier"
		],
		"Languages": [],
		"Software": "sequenceMiner",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:sequencing",
			"nlp:cluster analysi",
			"nlp:set theory",
			"nlp:symbol",
			"nlp:algorithm",
			"nlp:problem solving"
		],
		"External Link": "https://c3.ndc.nasa.gov/dashlink/algorithm/sequenceminer-algorithm/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Shift is a lightweight framework for high performance local and remote file transfers that provides resiliency across a wide variety of failure scenarios through various techniques. These include end-to-end integrity via cryptographic hashes, throttling of transfers to prevent resource exhaustion, balancing transfers across resources based on load and availability, and parallelization of transfers across multiple source and destination hosts for increased redundancy and performance.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/shift-3.1.tgz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 6112,
		"Categories": [
			"shift",
			"file transfer",
			"data transfer",
			"parallel",
			"Self-Healing Independent File Transfer"
		],
		"Languages": [],
		"Software": "Self-Healing Independent File Transfer (Shift)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:computer storage device",
			"nlp:failure analysi",
			"nlp:redundancy",
			"nlp:system failure",
			"nlp:loads (forces)",
			"nlp:performance prediction",
			"nlp:resource allocation",
			"nlp:reliability analysi",
			"nlp:file maintenance (computers)"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/projects/shift/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Surfer is an extensible framework designed to select and rank grid resources where a resource is defined to be anything that may need selecting such as compute resources, storage resources, data resources, etc.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-surfer-1.0.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 17296,
		"Categories": ["surfer", "resource", "data", "ranking"],
		"Languages": [],
		"Software": "Surfer",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:data management",
			"nlp:optical memory (data storage)",
			"nlp:message processing",
			"nlp:computational grid",
			"nlp:data storage",
			"nlp:resource allocation",
			"nlp:data sampling",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "http://www.nas.nasa.gov/~kolano/projects/surfer.html",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Swim is a software information service for the grid built on top of Pour, which is an information service framework developed at NASA. Swim provides true software resource discovery integrated with the tools used by administrators to install software.",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-swim-1.0.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 2192,
		"Categories": ["swim", "resource", "discovery", "information service"],
		"Languages": [],
		"Software": "Swim",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:information dissemination",
			"nlp:message processing",
			"nlp:information system",
			"nlp:computational grid",
			"nlp:software reliability",
			"nlp:software development tool",
			"nlp:resource allocation",
			"nlp:information management",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "http://people.nas.nasa.gov/~kolano/projects/swim.html",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "IKOS is a C++ library designed to facilitate the development of sound static analyzers based on Abstract Interpretation. Specialization of a static analyzer for an application or family of applications is critical for achieving both precision and scalability. Developing such an analyzer is arduous and requires significant expertise in Abstract Interpretation. ",
		"Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ikos/ikos_arbos.0.1.tar.gz",
		"NASA Center": "ARC",
		"Contributors": ["Dennis Koga"],
		"Labor_Hours": 9616,
		"Categories": [
			"C++",
			"library",
			"IKOS",
			"static analyzer",
			"application",
			"abstract interpretation"
		],
		"Languages": [],
		"Software": "Inference Kernel for Open Static Analyzers (IKOS)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:knowledge based system",
			"nlp:expert system",
			"nlp:subroutine",
			"nlp:numerical analysi",
			"nlp:library",
			"nlp:data base",
			"nlp:graphs (charts)"
		],
		"External Link": "https://ti.arc.nasa.gov/opensource/ikos/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2009-02-03",
		"Description": "This is the dataset used for the SIAM 2007 Text Mining Competition. This is a subset of the Aviation Safety Reporting System (ASRS) dataset.",
		"Public Code Repo": "https://github.com/Buzz-Beater/SIAM-2007-Text-Mining",
		"NASA Center": "ARC",
		"Contributors": ["Nikunj Oza"],
		"Labor_Hours": 240,
		"Categories": [
			"aviation",
			"safety",
			"reporting",
			"system",
			"text mining"
		],
		"Languages": [],
		"Software": "SIAM 2007 Text Mining Competition data set",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data mining",
			"nlp:safety",
			"nlp:air transportation",
			"nlp:information retrieval",
			"nlp:air law",
			"nlp:civil aviation",
			"nlp:systems engineering",
			"nlp:set theory",
			"nlp:natural language processing",
			"nlp:data processing"
		],
		"External Link": "https://c3.nasa.gov/dashlink/resources/138/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Land Information System Verification Toolkit (LVT) is a hybrid Fortran90 and C software tool designed to enable the evaluation, analysis and comparison of outputs generated by the Land Information System (LIS). LIS is a software framework to support land surface modeling and data assimilation.",
		"Public Code Repo": "https://lis.gsfc.nasa.gov/sites/default/files/LIS/LIS_public_release_7_2r/LDT_public_release_7.2r.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Christa Peters-Lidard"],
		"Labor_Hours": 63296,
		"Categories": [
			"LVT",
			"LIS",
			"land surface",
			"verification",
			"data analysis"
		],
		"Languages": [],
		"Software": "Land Information System Verification Toolkit (LVT)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:earth surface",
			"nlp:software development tool",
			"nlp:management information system",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:assimilation"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/LVT/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Matlab-CodeV toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/CodeV%20v2007a.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Joseph Howard"],
		"Labor_Hours": 880,
		"Categories": [
			"matlab",
			"CodeV",
			"optical",
			"modeling",
			"data conversion"
		],
		"Languages": [],
		"Software": "Matlab-CodeV Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:automatic control",
			"nlp:software development tool",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:control",
			"nlp:distributed parameter system",
			"nlp:control systems design"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Matlab-OSLO toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab/Matlab_OSLO.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Joseph Howard"],
		"Labor_Hours": 464,
		"Categories": [
			"matlab",
			"OSLO",
			"optical",
			"modeling",
			"data conversion"
		],
		"Languages": [],
		"Software": "Matlab-OSLO Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:automatic control",
			"nlp:software development tool",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:control",
			"nlp:distributed parameter system",
			"nlp:control systems design"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Matlab-Zemax toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/15151%20ZEMAX%20v2007a.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Joseph Howard"],
		"Labor_Hours": 96,
		"Categories": [
			"matlab",
			"zemax",
			"optical",
			"modeling",
			"data conversion"
		],
		"Languages": [],
		"Software": "Matlab-zemax Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:automatic control",
			"nlp:software development tool",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:control",
			"nlp:distributed parameter system",
			"nlp:control systems design"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Converts an HDF-EOS ODL metadata file into appropriate XML. Written in Java.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/odl_java.tgz",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 10096,
		"Categories": ["data conversion", "XML", "ODL"],
		"Languages": [],
		"Software": "ODL to XML Converter",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "PARAMESH is a package of Fortran 90 subroutines designed to provide an application developer with an easy route to extend an existing serial code which uses a logically cartesian structured mesh into a parallel code with adaptive mesh refinement (AMR).",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/paramesh/paramesh3.3_beta.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Peter MacNiece"],
		"Labor_Hours": 83648,
		"Categories": ["data conversion", "adaptive mesh refinement", "AMR"],
		"Languages": [],
		"Software": "PARAMESH",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:error correcting code",
			"nlp:computerized simulation",
			"nlp:finite element method",
			"nlp:computational grid",
			"nlp:binary code",
			"nlp:signal encoding",
			"nlp:subroutine",
			"nlp:symbol",
			"nlp:fortran",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "pFunit is a Fortran analog to various other xUnit testing frameworks which have been developed within the software community,and is intended to enable test driven development (TDD) within the scientific/technical programming community.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/FUNIT/pFUnit.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Thomas Clune"],
		"Labor_Hours": 2272,
		"Categories": [
			"testing",
			"test driven development",
			"software development"
		],
		"Languages": [],
		"Software": "pFUnit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:mathematical programming",
			"nlp:electronic equipment test",
			"nlp:automatic test equipment",
			"nlp:software reliability",
			"nlp:statistical test",
			"nlp:software development tool",
			"nlp:program verification (computers)",
			"nlp:fortran",
			"nlp:performance test"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/FUNIT/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The User-friendly Metadata (UFM) tool functions as a filter, taking input from standard input (STDIN) and writing output to standard output (STDOUT) and/or standard error (STDERR).",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/UFM/UFM.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 22384,
		"Categories": [
			"UFM",
			"metadata",
			"STDIN",
			"standard",
			"input",
			"output"
		],
		"Languages": [],
		"Software": "User Friendly Metadata (UFM)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:transfer function",
			"nlp:recursive function",
			"nlp:functions (mathematics)",
			"nlp:error",
			"nlp:linear filter",
			"nlp:nonlinear filter",
			"nlp:siso (control systems)",
			"nlp:digital filter",
			"nlp:error analysi",
			"nlp:user requirement"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/UFM/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Program that takes an XML representation of the contents of an HDF-EOS file and recreates the file from that description.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2he/xml2he5.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 1856,
		"Categories": ["XML", "HDF", "EOS", "converter", "data conversion"],
		"Languages": [],
		"Software": "XML to HDF-EOS Converter",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:information dissemination",
			"nlp:computer storage device",
			"nlp:computerized simulation",
			"nlp:fortran",
			"nlp:document markup language",
			"nlp:knowledge representation",
			"nlp:data retrieval",
			"nlp:file maintenance (computers)",
			"nlp:graphs (charts)"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "Converts an XML file to an HDF-EOS ODL metadata file.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2odl/xml2odl.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 592,
		"Categories": ["XML", "ODL", "converter", "data conversion"],
		"Languages": [],
		"Software": "XML to ODL Converter",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-10",
		"Description": "CFITSIO is a library of C and Fortran subroutines for reading and writing data files in FITS (Flexible Image Transport System) data format. CFITSIO provides simple high-level routines for reading and writing FITS files that insulate the programmer from the internal complexities of the FITS format. CFITSIO also provides many advanced features for manipulating and filtering the information in FITS files.",
		"Public Code Repo": "ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio_latest.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 115248,
		"Categories": [
			"data validation",
			"FITS",
			"flexible image transport system"
		],
		"Languages": [],
		"Software": "CFITSIO",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:imaging technique",
			"nlp:digital data",
			"nlp:information management",
			"nlp:pattern recognition",
			"nlp:subroutine",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:library",
			"nlp:image processing",
			"nlp:data base management system"
		],
		"External Link": "http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-10",
		"Description": "This is a small C library for FITS I/O originally written by John Roll at SAO. It is now maintained and distributed as part of the FUNTOOLS utility package.",
		"Public Code Repo": "https://github.com/ericmandel/funtools",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 139248,
		"Categories": [
			"data validation",
			"FITS",
			"flexible image transport system",
			"SAO",
			"FUNTOOLS"
		],
		"Languages": [],
		"Software": "fitsy/funtools",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:java (programming language)",
			"nlp:c (programming language)",
			"nlp:user manuals (computer programs)",
			"nlp:computerized simulation",
			"nlp:operators (mathematics)",
			"nlp:c++ (programming language)",
			"nlp:subroutine",
			"nlp:library",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/ericmandel/funtools",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2007-01-22",
		"Description": "The qfits library is a small, portable C library that provides low level support for accessing FITS images, headers and tables.",
		"Public Code Repo": "ftp://ftp.eso.org/pub/eclipse/latest/eclipse-main-5.0.0.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 49264,
		"Categories": [
			"data validation",
			"FITS",
			"flexible image transport system",
			"qfits"
		],
		"Languages": [],
		"Software": "qfits",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:tables (data)",
			"nlp:c (programming language)",
			"nlp:imaging technique",
			"nlp:image reconstruction",
			"nlp:medical equipment",
			"nlp:image analysi",
			"nlp:support system",
			"nlp:image resolution",
			"nlp:library",
			"nlp:image processing"
		],
		"External Link": "http://www.eso.org/sci/software/eclipse/qfits/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2011-12-09",
		"Description": "The CCfits library is build on top of CFITSIO and provides an interface that allows the user to manipulate FITS data through high-level object-oriented building blocks.",
		"Public Code Repo": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/CCfits-2.4.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Phil Newman"],
		"Labor_Hours": 58112,
		"Categories": [
			"data validation",
			"data",
			"CFITSIO",
			"FITS",
			"flexible image transport system",
			"SAO",
			"CCfits"
		],
		"Languages": [],
		"Software": "CCfits Library",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:interface stability",
			"nlp:human-computer interface",
			"nlp:data management",
			"nlp:hydroelectricity",
			"nlp:object-oriented programming",
			"nlp:computer graphic",
			"nlp:library",
			"nlp:interface",
			"nlp:graphical user interface"
		],
		"External Link": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "1997-10-01",
		"Description": "The AIPS++ FITS library is available separately from the AIPS++ distribution.  Currently there is limited documentation.  This defines a set of C++ objects to read and write FITS files.",
		"Public Code Repo": "http://www.cv.nrao.edu/fits/src/c++fits-09.076.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 5680,
		"Categories": [
			"data validation",
			"data",
			"FITS",
			"flexible image transport system",
			"AIPS++FITS",
			"AIPS++"
		],
		"Languages": [],
		"Software": "AIPS++FITS Library",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:distribution function",
			"nlp:set theory",
			"nlp:probability distribution function",
			"nlp:statistical distribution",
			"nlp:normal density function",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:data base",
			"nlp:graphs (charts)"
		],
		"External Link": "http://www.cv.nrao.edu/fits/src/",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2013-11-30",
		"Description": "TThe IDL Astronomy Library contains four different sets of procedures for reading, writing, and modifying FITS files. The reason for having four different methods of FITS I/O with IDL is partly historical, as different groups developed the software independently. However, each method also has its own strengths and weakness for any particular task. For example, the procedure MRDFITS() -- which can read a FITS table into an IDL structure --is the easiest procedure for analyzing FITS files at the IDL prompt level (provided that one is comfortable with IDL structures). But mapping a table into an IDL structure includes extra overhead, so that when performing FITS I/O at the procedure level, it may be desirable to use more efficient procedures such as FITS_READ and FTAB_EXT.",
		"Public Code Repo": "https://github.com/wlandsman/IDLAstro",
		"NASA Center": "GSFC",
		"Contributors": ["Theodore Gull"],
		"Labor_Hours": 32768,
		"Categories": [
			"data conversion",
			"data",
			"MRDFITS",
			"MWRFITS",
			"FITS",
			"flexible image transport system",
			"IDL",
			"IDLAstro",
			"FX*",
			"FITS_*",
			"FTAB_*",
			"READFITS",
			"WRITEFITS"
		],
		"Languages": [],
		"Software": "IDLAstro",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:tables (data)",
			"nlp:statistical analysi",
			"nlp:input/output routine",
			"nlp:data structure",
			"nlp:fine structure",
			"nlp:o star",
			"nlp:astronomy",
			"nlp:file maintenance (computers)",
			"nlp:library"
		],
		"External Link": "http://idlastro.gsfc.nasa.gov/fitsio.html",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "A full function 100% Java library for reading and writing FITS files.",
		"Public Code Repo": "https://github.com/nom-tam-fits/nom-tam-fits",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 35632,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"java"
		],
		"Languages": [],
		"Software": "nom-tam-fits",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/java/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2008-05-16",
		"Description": "STIL/starlink is a pure Java library for generic input, output and processing of tabular data. It presents to the application programmer a view of a table which looks the same regardless of whether it came from a FITS file, a VOTable, an ASCII text file, a query on a relational database, or whatever.",
		"Public Code Repo": "https://github.com/Starlink/starjava",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 2145056,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"java",
			"binary",
			"STIL",
			"starlink"
		],
		"Languages": [],
		"Software": "Starlink/starjava",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:tables (data)",
			"nlp:information retrieval",
			"nlp:input/output routine",
			"nlp:data retrieval",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:library",
			"nlp:query language",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://github.com/Starlink/starjava",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-04-16",
		"Description": "A standalone JavaScript library for reading the FITS astronomical file format. This library is built for modern browsers supporting the DataView object. These include at least Chrome 9, Firefox 15, and Safari 6. This library may be used to read various forms of the FITS format. This implementation is under active development. In its current state it supports the following: reading of multiple header data units, reading of FITS images, reading of data cubes, reading of binary tables, reading of ASCII Tables, and decompressing images using the Rice algorithm. ",
		"Public Code Repo": "https://github.com/astrojs/fitsjs",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 4432,
		"Categories": [
			"data compression",
			"data",
			"FITS",
			"flexible image transport system",
			"javascript",
			"binary",
			"ASCII",
			"rice algorithm"
		],
		"Languages": [],
		"Software": "fitsjs",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:imaging technique",
			"nlp:object-oriented programming",
			"nlp:digital data",
			"nlp:binary data",
			"nlp:data structure",
			"nlp:digital system",
			"nlp:algorithm",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:image processing"
		],
		"External Link": "https://github.com/astrojs/fitsjs/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2013-06-06",
		"Description": "A Perl module incorporating the CFITSIO library has been developed using XS wrappers. Most useful CFITSIO calls have direct Perl counterparts. Users will need the C version of CFITSIO to link to.",
		"Public Code Repo": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/CFITSIO.pm",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 5088,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"CFITSIO",
			"perl"
		],
		"Languages": [],
		"Software": "CFITSIO.pm",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:user manuals (computer programs)",
			"nlp:c (programming language)",
			"nlp:human-computer interface",
			"nlp:computerized simulation",
			"nlp:subroutine",
			"nlp:library",
			"nlp:graphs (charts)",
			"nlp:graphical user interface",
			"nlp:data base",
			"nlp:user requirement"
		],
		"External Link": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-12-30",
		"Description": "A FITS reader is provided within the Perl Data Language module.  It handles FITS images and binary tables. PDL is a Perl module providing mechanisms to manipulate arrays of data efficiently.",
		"Public Code Repo": "http://www.cpan.org/modules/by-module/PDL/Data-Frame-0.003.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 352,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"CFITSIO",
			"perl",
			"binary"
		],
		"Languages": [],
		"Software": "PDL FITS capabilities",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:tables (data)",
			"nlp:digital data",
			"nlp:programming language",
			"nlp:language",
			"nlp:high level language",
			"nlp:data structure",
			"nlp:data retrieval",
			"nlp:data processing",
			"nlp:image processing",
			"nlp:data base management system"
		],
		"External Link": "http://www.cpan.org/modules/by-module/PDL/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-05-06",
		"Description": "Damian Eads (at Los Alamos at that time) wrote a MatLab interface to the CFITSIO library using a tool called 'mex'. MFITSIO supports reading and writing FITS images, image subsets, and headers. (UPDATE, June 2013: MFITSIO is no longer available from the Los Alamos web site, however, the last version (1.2.4) of the MFITSIO source code .tar file has been retrieved from the Internet Archive WayBack Machine and made available here. The mfitsio interface has not been maintained for many years, and some users have reported problems with installing the software.)",
		"Public Code Repo": "http://fits.gsfc.nasa.gov/software/mfitsio-1.2.4-src.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 944,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"MFITSIO",
			"matlab"
		],
		"Languages": [],
		"Software": "MFITSIO",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:internet",
			"nlp:human-computer interface",
			"nlp:document markup language",
			"nlp:software development tool",
			"nlp:library",
			"nlp:world wide web",
			"nlp:file maintenance (computers)",
			"nlp:graphical user interface",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#mfitsio",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-30",
		"Description": "George Gatling (NRL, email = george.gatling  'at' nrl.navy.mil) wrote an interface to the CFITSIO library for LabVIEW 2013 or later under Microsoft Windows . It supports reading and writing FITS images and ASCII and binary tables.",
		"Public Code Repo": "http://fits.gsfc.nasa.gov/software/gfitsio_v5.2_Apr_2014.zip",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 3216,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"GFITSIO",
			"binary",
			"Labview"
		],
		"Languages": [],
		"Software": "GFITSIO",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphical user interface",
			"nlp:human-computer interface",
			"nlp:imaging technique",
			"nlp:image reconstruction",
			"nlp:electronic mail",
			"nlp:image analysi",
			"nlp:interface",
			"nlp:satellite imagery",
			"nlp:library",
			"nlp:image processing"
		],
		"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#LabVIEW",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-07-17",
		"Description": "PyFITS is a set of Python modules which read and write most FITS formats.",
		"Public Code Repo": "http://docs.astropy.org/en/stable/io/fits/index.html#module-astropy.io.fits",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 11728,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"python",
			"binary"
		],
		"Languages": [],
		"Software": "PyFITS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "http://www.stsci.edu/institute/software_hardware/pyfits/",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-04-17",
		"Description": "fitsio is a full featured python library to read and write data to FITS files. This is a python extension written in c and python. Data are read into numerical python arrays. A version of cfitsio is bundled with this package, which is used, in particular, to read and write images in tile-compressed format.",
		"Public Code Repo": "https://github.com/esheldon/fitsio",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 118336,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"python",
			"cfitsio",
			"fitsio"
		],
		"Languages": [],
		"Software": "Python/fitsio",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:user manuals (computer programs)",
			"nlp:imaging technique",
			"nlp:digital data",
			"nlp:radar imagery",
			"nlp:subroutine",
			"nlp:data retrieval",
			"nlp:file maintenance (computers)",
			"nlp:data reduction",
			"nlp:library",
			"nlp:image processing"
		],
		"External Link": "https://github.com/esheldon/fitsio",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2009-04-08",
		"Description": "This package uses the CFITSIO library to interface to FITS files from Python. Particular attention has been paid to supporting ASCII and BINARY tables with fixed and variable-length entries. Data I/O is handled through numpy arrays. Note: this library appears to not have been updated since 2009 and may no longer be supported.",
		"Public Code Repo": "https://pypi.python.org/packages/source/p/pfits/pfits-0.0.2.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 70416,
		"Categories": [
			"data conversion",
			"data",
			"FITS",
			"flexible image transport system",
			"python",
			"ASCII",
			"PFITS",
			"binary"
		],
		"Languages": [],
		"Software": "PFITS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data base management system",
			"nlp:tables (data)",
			"nlp:digital data",
			"nlp:binary data",
			"nlp:subroutine",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://pypi.python.org/pypi/pfits",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-26",
		"Description": "FITSio is a contributed R package for reading and writing FITS images and reading binary tables within the R software environment. It has no dependencies other than the base R installation. The FITSio contributed package source code is available directly from the R project web site under the 'contributed extension packages' link.",
		"Public Code Repo": "http://www.astro.umd.edu/~harris/r/FITSio_2.0-0.zip",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 32,
		"Categories": [
			"data visualization",
			"data",
			"FITS",
			"flexible image transport system",
			"R language",
			"FITSio"
		],
		"Languages": [],
		"Software": "fitsio",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data link",
			"nlp:computerized simulation",
			"nlp:document markup language",
			"nlp:programming environment",
			"nlp:software development tool",
			"nlp:project management",
			"nlp:symbol",
			"nlp:world wide web",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#Rlang",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2012-02-21",
		"Description": "Liberator is a free plug-in for Adobe Photoshop or Photoshop Elements 2 for manipulating FITS images with those programs. A color composite 'Action' file is also available to simplify the process of creating color composite images from 3 separate red, green, and blue images.",
		"Public Code Repo": "https://www.spacetelescope.org/static/projects/fits_liberator/v301files/FITSLiberator3.zip",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 256,
		"Categories": [
			"data visualization",
			"image processing",
			"data",
			"FITS",
			"flexible image transport system",
			"ESA",
			"ESO",
			"liberator",
			"adobe"
		],
		"Languages": [],
		"Software": "ESA/ESO/NASA FITS Liberator",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:color",
			"nlp:composite material",
			"nlp:color photography",
			"nlp:image enhancement",
			"nlp:image",
			"nlp:data retrieval",
			"nlp:file maintenance (computers)",
			"nlp:image processing"
		],
		"External Link": "http://www.spacetelescope.org/projects/fits_liberator/",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-02-12",
		"Description": "Package fits reads and processes FITS files. It is written in pure golang and is not a wrapper around another library or a direct translation of another library to golang. The main purpose is to provide a native golang solution to reading FITS file and to assess the suitability of golang for scientific and numerical applications.",
		"Public Code Repo": "https://github.com/siravan/fits",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 544,
		"Categories": [
			"data processing",
			"data",
			"FITS",
			"flexible image transport system",
			"golang",
			"go"
		],
		"Languages": [],
		"Software": "golang fits reader",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:convexity",
			"nlp:subroutine",
			"nlp:numerical analysi",
			"nlp:graphs (charts)",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:data base management system"
		],
		"External Link": "https://github.com/siravan/fits",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-07-09",
		"Description": "A set of CGo bindings to some of the most commonly used routines in the CFITSIO library (written in C).",
		"Public Code Repo": "https://github.com/astrogo/cfitsio",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 4176,
		"Categories": [
			"data processing",
			"data",
			"FITS",
			"flexible image transport system",
			"golang",
			"wrapper",
			"C",
			"CFITSIO",
			"go"
		],
		"Languages": [],
		"Software": "golang wrapper",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:c (programming language)",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:theorem proving",
			"nlp:convexity",
			"nlp:set theory",
			"nlp:subroutine",
			"nlp:library",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/astrogo/cfitsio",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-06",
		"Description": "Go package to read and write FITS files. It is written in pure golang and is not a wrapper around another library.",
		"Public Code Repo": "https://github.com/astrogo/fitsio",
		"NASA Center": "GSFC",
		"Contributors": ["William D. Pence"],
		"Labor_Hours": 5984,
		"Categories": [
			"data processing",
			"data",
			"FITS",
			"flexible image transport system",
			"golang",
			"go"
		],
		"Languages": [],
		"Software": "native golang fits package",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:computer storage device",
			"nlp:user manuals (computer programs)",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:c++ (programming language)",
			"nlp:subroutine",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/astrogo/fitsio",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Advanced Land Image Assessment Systems (ALIAS) supports radiometric and geometric image processing for the Advanced Land Imager (ALI) instrument on board NASA’s Earth Observing-1 (EO-1) satellite. ALIAS consists of two processing subsystems for radiometric and geometric processing of the ALI’s multispectral imagery. The radiometric processing subsystem characterizes and corrects, where possible, radiometric qualities including: detector operability; gain; bias; coherent, impulse and random noise; signal-to-noise ratios (SNR); saturation levels; striping and banding; and the stability of detector performance. The geometric processing subsystem and analysis capabilities support sensor alignment calibrations; sensor chip assembly (SCA)-to-SCA alignments and related issues; geodetic accuracy assessments; modulation transfer function (MTF) characterizations; and perform image-to-image characterizations. The ALIAS also characterizes and corrects band-to-band registration, and performs systematic, precision and terrain correction of ALI images. The ALIAS can geometrically correct and automatically mosaic the SCA image strips into a seamless, map-projected image. The ALIAS was developed through collaboration between NASA and the U.S. Geological Survey (USGS).",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Alias/alias2_1.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Vicki Zanoni"],
		"Labor_Hours": 315552,
		"Categories": ["image processing", "Advanced Land Imager", "EO-1"],
		"Languages": [],
		"Software": "ALIAS",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spectral band",
			"nlp:calibrating",
			"nlp:remote sensor",
			"nlp:geometric rectification (imagery)",
			"nlp:radiometric correction",
			"nlp:image analysi",
			"nlp:image resolution",
			"nlp:satellite imagery",
			"nlp:satellite-borne instrument",
			"nlp:image processing"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/Alias/Alias.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The ut-assert unit test tools provide a unit test framework and a collection of utilities that are designed to facilitate unit testing.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ut-assert/ut-assert%20v1_0%2011-24-14.zip",
		"NASA Center": "GSFC",
		"Contributors": ["David McComas"],
		"Labor_Hours": 1616,
		"Categories": ["regression testing", "unit test", "assert"],
		"Languages": [],
		"Software": "Assert-Based Unit Test Tools (UT-Assert)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:evaluation",
			"nlp:electronic equipment test",
			"nlp:automatic test equipment",
			"nlp:data acquisition",
			"nlp:failure analysi",
			"nlp:statistical test",
			"nlp:program verification (computers)",
			"nlp:software development tool",
			"nlp:performance test"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "A gateway using OPeNDAP, implemented as a plug-in to the Hyrax server, for accessing WCS data.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/CEOP/CEOP.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["Christopher Lynnes"],
		"Labor_Hours": 23488,
		"Categories": ["networking", "opendap", "ACCESS", "earth science data"],
		"Languages": [],
		"Software": "CEOP Satellite Data Server",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/CEOP/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The RHSEG software provides hierarchical segmentation (pre-processing) of image and image-like data. The software significantly improves the extraction of patterns from complex data sets and is optimized for speed and accuracy. This algorithm provides the user with precise control for selecting the desired level of detail from the hierarchy of results.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HSEG/core_rhsegV1.47.tar.gz",
		"NASA Center": "GSFC",
		"Contributors": ["James Tilton"],
		"Labor_Hours": 17184,
		"Categories": [
			"image processing",
			"RHSEG",
			"application",
			"object based image analysis"
		],
		"Languages": [],
		"Software": "Core RHSEG Software Package",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:multivariable control",
			"nlp:imaging technique",
			"nlp:remote sensing",
			"nlp:pattern recognition",
			"nlp:medical equipment",
			"nlp:hierarchy",
			"nlp:image analysi",
			"nlp:algorithm",
			"nlp:data processing",
			"nlp:image processing"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/HSEG/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Data Quality Screening Service (DQSS) is designed to help automate the filtering of remote sensing data on behalf of science users.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/DQSS/dqss_64.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Christopher Lynnes"],
		"Labor_Hours": 10544,
		"Categories": ["data filtering", "remote sensing", "quality"],
		"Languages": [],
		"Software": "Data Quality Screening Service (DQSS)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:data system",
			"nlp:information dissemination",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:data processing",
			"nlp:data base",
			"nlp:user requirement"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/DQSS/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The ECS Schema Validation tool validates an XML Document based on the BMGT Granule or Collection Schema, and generate reports listing all invalid elements.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/schemavalidator.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 13792,
		"Categories": ["data validation", "validator", "EOS"],
		"Languages": [],
		"Software": "ECS Metadata Validator",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computerized simulation",
			"nlp:data acquisition",
			"nlp:finite element method",
			"nlp:program verification (computers)",
			"nlp:document markup language",
			"nlp:software development tool",
			"nlp:proving",
			"nlp:graphs (charts)"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The Earth Observing System Data Gateway (EDG) was developed in response to the earth science community's need for a one-stop-shopping interface to search for data and order data granules from distributed data archives. This innovation enables users to explore, discover, and order available data from geographically distributed data providers through a standard interface.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/edg/edg.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Robert Harberts"],
		"Labor_Hours": 233888,
		"Categories": ["data interchange", "interface", "Earth science"],
		"Languages": [],
		"Software": "EDG",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth science",
			"nlp:user requirement",
			"nlp:data system",
			"nlp:data base management system",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:data storage",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/edg/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The NFMW reads Earth science models and produces web pages that display the desired area, time, and elevation, using WMS (Web Map Service).",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/NFMW/nfmw-20081204.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Eric Sokolowsky"],
		"Labor_Hours": 24304,
		"Categories": [
			"web map service",
			"earth science",
			"data visualization"
		],
		"Languages": [],
		"Software": "Forecast Model Web Map Service (NFMW)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:geophysic",
			"nlp:atmospheric model",
			"nlp:real time operation",
			"nlp:time dependence",
			"nlp:relief map",
			"nlp:topography",
			"nlp:mapping",
			"nlp:elevation",
			"nlp:earth (planet)",
			"nlp:map"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The GPM displays grand- and space-based radar observations for easy comparison and validation. Inteded for meteorologists and other sciences; not end users.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPMV/GPM_VN_visualization_master.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Mathew Schwaller"],
		"Labor_Hours": 6128,
		"Categories": [
			"meteorology",
			"earth science",
			"data visualization",
			"GVS",
			"GPM"
		],
		"Languages": [],
		"Software": "Global Precipitation Mission (GPM) Visualization Tool for Validation Network Geometrically-Matched Ground- and Space-based Radar Data",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:geophysic",
			"nlp:doppler radar",
			"nlp:radar measurement",
			"nlp:earth observations (from space)",
			"nlp:radar echoe",
			"nlp:spaceborne photography",
			"nlp:radar tracking",
			"nlp:radar imagery",
			"nlp:proving",
			"nlp:meteorological radar"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/GPMV/index.php",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The GPM Collects various data sets from TRMM spacecraft, re-samples it, and generates statistics.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPM/GPMGV_VN_IDL_CODE.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Mathew Schwaller"],
		"Labor_Hours": 5712,
		"Categories": [
			"TRMM",
			"earth science",
			"data processing",
			"GVS",
			"GPM"
		],
		"Languages": [],
		"Software": "Global Precipitation Radar (GPM) Space and Ground Radar Comparison",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/GPM/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "HDF-EOS Metadata Updater updates metadata inside an HDF-EOS file.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hemu/HEMU.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 10432,
		"Categories": [
			"updater",
			"HDF-EOS",
			"EOS",
			"EOSDIS",
			"data file manipulator"
		],
		"Languages": [],
		"Software": "HDF-EOS Metadata Updater",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/hemu/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The HDF-EOS to netCDF Convertor takes an HDF-EOS dataset and outputs a netCDF file that preserves as much as possible of the dataset's data and metadata using the CF conventions for netCDF.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/hdfeos5-netcdf.tar",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 544,
		"Categories": [
			"updater",
			"HDF-EOS",
			"EOS",
			"EOSDIS",
			"data conversion"
		],
		"Languages": [],
		"Software": "HDF-EOS to netCDF Convertor",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:message processing",
			"nlp:data management",
			"nlp:data storage",
			"nlp:data retrieval",
			"nlp:graphs (charts)",
			"nlp:file maintenance (computers)",
			"nlp:data sampling",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The HDF-EOS Web Server converts HDF-EOS metadata into human-readable HTML and publishes it to a local web server (which must be pre-configured).",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/heserve/heserve.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 1248,
		"Categories": ["server", "HDF-EOS", "EOS", "EOSDIS", "data conversion"],
		"Languages": [],
		"Software": "HDF-EOS Web Server",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:internet",
			"nlp:data management",
			"nlp:interactive control",
			"nlp:buffer storage",
			"nlp:document markup language",
			"nlp:human performance",
			"nlp:on-line system",
			"nlp:world wide web",
			"nlp:human-computer interface",
			"nlp:graphs (charts)"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/heserve/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "The HDFEOS XML DTD and Schemas is a set of DTD and schemas for HDFEOS files.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/schemavalidator.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Richard Ullman"],
		"Labor_Hours": 13792,
		"Categories": ["server", "HDF-EOS", "EOS", "EOSDIS", "data validation"],
		"Languages": [],
		"Software": "HDFEOS XML DTD and Schemas",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-27",
		"Description": "This is a Java language software plug-in to The HDF Group's (formerly of NCSA at University of Illinois at Urbana-Champaign) HDFView which provides an HDF-EOS interface for both versions of HDF (4 and 5) of HDF-EOS. Browse and edit functions are provided.",
		"Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF/HDF.zip",
		"NASA Center": "GSFC",
		"Contributors": ["Dan Marinelli"],
		"Labor_Hours": 208,
		"Categories": ["HDF-EOS", "EOS", "EOSDIS", "data validation"],
		"Languages": [],
		"Software": "HDFView HDF-EOS Plug-in",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:group theory",
			"nlp:functions (mathematics)",
			"nlp:evaluation",
			"nlp:human-computer interface",
			"nlp:programming language",
			"nlp:language",
			"nlp:software development tool",
			"nlp:high level language",
			"nlp:interface",
			"nlp:graphical user interface"
		],
		"External Link": "https://opensource.gsfc.nasa.gov/projects/HDF/index.php",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-06",
		"Description": "MINX, which stands for MISR INteractive eXplorer, is an interactive visualization and analysis program written in IDL and designed to make MISR data more accessible to science users. Its principal use is to retrieve heights and motion for aerosol plumes and clouds using stereoscopic methods.",
		"Public Code Repo": "https://github.com/nasa/MINX",
		"NASA Center": "JPL",
		"Contributors": ["David Nelson", "Sebastian Val"],
		"Labor_Hours": 31056,
		"Categories": ["Toolkit", "Visualization", "Analysis"],
		"Languages": [],
		"Software": "MINX",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:aerosol",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:cloud cover",
			"nlp:clouds (meteorology)",
			"nlp:height",
			"nlp:plume",
			"nlp:scientific visualization",
			"nlp:data processing",
			"nlp:data reduction"
		],
		"External Link": "http://misr.jpl.nasa.gov/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2019-02-27",
		"Description": "A meta-repository which essentially lists code related to all tools and services software for NASA JPL's PO.DAAC",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services",
		"NASA Center": "JPL",
		"Contributors": ["lewismc"],
		"Labor_Hours": 1,
		"Categories": [
			"podaac",
			"tools",
			"services",
			"oceanography",
			"ocean-surface-topography",
			"ost",
			"sea-surface-temperature",
			"sst",
			"ocean-winds",
			"sea-surface-salinity",
			"sss",
			"gravity",
			"ocean-circulation",
			"sea",
			"sea-ice",
			"physical-oceanography"
		],
		"Languages": [],
		"Software": "PO.DAAC Tools and Services",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/podaac_tools_and_services",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-28",
		"Description": "A simple python testing framework that can run unit tests under MPI (or not).",
		"Public Code Repo": "https://github.com/OpenMDAO/testflo",
		"NASA Center": "ARC",
		"Contributors": ["naylor-b", "swryan", "kmarstellar"],
		"Labor_Hours": 752,
		"Categories": ["python", "openmdao", "unit testing", "MPI"],
		"Languages": [],
		"Software": "OpenMDAO: testflo",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/testflo/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2016-09-28",
		"Description": "OpenMDAO is a high-performance computing platform for systems analysis and optimization that enables you to decompose your models, making them easier to build and maintain, while still solving them in a tightly-coupled manner with efficient parallel numerical methods.",
		"Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO",
		"NASA Center": "ARC",
		"Contributors": [
			"naylor-b",
			"swryan",
			"kmarstellar",
			"Kenneth-T-Moore",
			"dwmunster",
			"JustinSGray",
			"hschilling",
			"crobinsonut",
			"thearn",
			"adamnagel",
			"relf",
			"timothy-thomas",
			"fcapristan",
			"fzahle",
			"jaredthomas68",
			"volgy",
			"amoondra",
			"ksmyth",
			"shamsheersc19",
			"pziegfeld",
			"sanbales",
			"lattmann",
			"jonathonw"
		],
		"Labor_Hours": 58912,
		"Categories": [
			"python",
			"openmdao",
			"systems analysis",
			"optimization"
		],
		"Languages": [],
		"Software": "OpenMDAO",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:structural analysi",
			"nlp:complex system",
			"nlp:computerized simulation",
			"nlp:optimization",
			"nlp:statistical analysi",
			"nlp:performance prediction",
			"nlp:systems analysi",
			"nlp:parallel processing (computers)"
		],
		"External Link": "https://github.com/OpenMDAO/OpenMDAO/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-09-14",
		"Description": "Prototype of a benchmarking/regression tool.",
		"Public Code Repo": "https://github.com/OpenMDAO/benchmark",
		"NASA Center": "ARC",
		"Contributors": ["swryan", "kmarstellar"],
		"Labor_Hours": 656,
		"Categories": ["python", "openmdao", "benchmark", "regression"],
		"Languages": [],
		"Software": "OpenMDAO: benchmark",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/benchmark/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-08-11",
		"Description": "OpenMDAO plug-in.",
		"Public Code Repo": "https://github.com/OpenMDAO/CADRE",
		"NASA Center": "ARC",
		"Contributors": ["swryan", "kmarstellar"],
		"Labor_Hours": 2496,
		"Categories": ["python", "openmdao", "benchmark", "regression"],
		"Languages": [],
		"Software": "OpenMDAO: Cadre",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/CADRE/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-10",
		"Description": "An old problem used for NREL Training, converted to OpenMDAO 1.x",
		"Public Code Repo": "https://github.com/OpenMDAO/NRELTraining",
		"NASA Center": "ARC",
		"Contributors": ["jcchin", "thearn", "Kenneth-T-Moore"],
		"Labor_Hours": 3968,
		"Categories": ["python", "openmdao", "NREL", "training"],
		"Languages": [],
		"Software": "OpenMDAO: NRELTraining",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/NRELTraining/archive/master.zip",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-04-11",
		"Description": "MBI sub-branch of the OpenMDAO repository.",
		"Public Code Repo": "https://github.com/OpenMDAO/MBI",
		"NASA Center": "ARC",
		"Contributors": [
			"hwangjt",
			"naylor-b",
			"JustinSGray",
			"hschilling",
			"thearn"
		],
		"Labor_Hours": 320,
		"Categories": ["fortran", "openmdao", "NAS", "supercomputer"],
		"Languages": [],
		"Software": "OpenMDAO: MBI",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/MBI/archive/master.zip",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-01-20",
		"Description": "OpenMDAO component wrapper for FLOPS.",
		"Public Code Repo": "https://github.com/OpenMDAO/flops_wrapper",
		"NASA Center": "ARC",
		"Contributors": [
			"fcapristan",
			"kmarsteller",
			"setowns1",
			"hschilling",
			"Kenneth-T-Moore",
			"pziegfeld"
		],
		"Labor_Hours": 2416,
		"Categories": ["python", "openmdao", "flops"],
		"Languages": [],
		"Software": "OpenMDAO: flops_wrapper",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/flops_wrapper/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-09-03",
		"Description": "A python based open-source (Apache 2.0) engineering analysis framework designed to facilitate the use of MDAO. To add issues, visit our user forums at http://www.openmdao.org/forum . NOTE: this version is no longer being developed. The current active version can be found here: https://github.com/OpenMDAO/OpenMDAO.",
		"Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO-Framework",
		"NASA Center": "ARC",
		"Contributors": [
			"naylor-b",
			"swryan",
			"setowns1",
			"hschilling",
			"Kenneth-T-Moore",
			"pziegfeld",
			"JustinSGray",
			"justinopenmdao",
			"thearn",
			"crobinsonut",
			"cnkavanaugh",
			"cwmine",
			"jcchin",
			"dykeag",
			"eshendricks",
			"relf",
			"andrewning",
			"fzahle",
			"youngklee"
		],
		"Labor_Hours": 102368,
		"Categories": ["python", "openmdao", "framework", "MDAO"],
		"Languages": [],
		"Software": "OpenMDAO: OpenMDAO-Framework",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:user manuals (computer programs)",
			"nlp:human-computer interface",
			"nlp:computerized simulation",
			"nlp:hydroelectricity",
			"nlp:network analysi",
			"nlp:graphs (charts)",
			"nlp:linguistic",
			"nlp:graphical user interface",
			"nlp:user requirement"
		],
		"External Link": "https://github.com/OpenMDAO/OpenMDAO-Framework/archive/dev.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2015-03-24",
		"Description": "Procedures for OpenMDAO maintainers.",
		"Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO-Procedures",
		"NASA Center": "ARC",
		"Contributors": [
			"kmarsteller",
			"naylor-b",
			"Kenneth-T-Moore",
			"pziegfeld"
		],
		"Labor_Hours": 256,
		"Categories": [
			"python",
			"openmdao",
			"mdao",
			"procedures",
			"maintainers"
		],
		"Languages": [],
		"Software": "OpenMDAO: OpenMDAO-Procedures",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/OpenMDAO-Procedures/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2015-02-17",
		"Description": "Airline allocation problem.",
		"Public Code Repo": "https://github.com/OpenMDAO/airline-allocation",
		"NASA Center": "ARC",
		"Contributors": ["swryan", "crobinsonut", "hschilling"],
		"Labor_Hours": 1040,
		"Categories": ["python", "openmdao", "mdao", "airline", "allocation"],
		"Languages": [],
		"Software": "OpenMDAO: OpenMDAO-airline-allocation",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/airline-allocation/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2014-08-20",
		"Description": "Web app to manage openmdao automated testing.",
		"Public Code Repo": "https://github.com/OpenMDAO/openmdao_testapp",
		"NASA Center": "ARC",
		"Contributors": ["swryan", "crobinsonut", "hschilling"],
		"Labor_Hours": 272,
		"Categories": ["python", "openmdao", "mdao", "application", "testing"],
		"Languages": [],
		"Software": "OpenMDAO: openmdao_testapp",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/openmdao_testapp/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-07-16",
		"Description": "Aero-Velo Marathon Aircraft.",
		"Public Code Repo": "https://github.com/OpenMDAO/marathon-aircraft",
		"NASA Center": "ARC",
		"Contributors": ["treforevans", "JustinSGray"],
		"Labor_Hours": 224,
		"Categories": ["python", "openmdao", "mdao", "aeronautics", "aircraft"],
		"Languages": [],
		"Software": "OpenMDAO: marathon-aircraft",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/marathon-aircraft/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2014-04-18",
		"Description": "Python web-based geometry viewer.",
		"Public Code Repo": "https://github.com/OpenMDAO/pyV3D",
		"NASA Center": "ARC",
		"Contributors": ["treforevans", "JustinSGray"],
		"Labor_Hours": 9440,
		"Categories": ["C", "openmdao", "mdao", "geometry", "viewer"],
		"Languages": [],
		"Software": "OpenMDAO: pyV3D",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/pyV3D/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2014-04-18",
		"Description": "Python wrappers for the GEM libraries diamond and quartz.",
		"Public Code Repo": "https://github.com/OpenMDAO/pygem",
		"NASA Center": "ARC",
		"Contributors": ["naylor-b", "Kenneth-T-Moore"],
		"Labor_Hours": 13248,
		"Categories": ["C", "openmdao", "mdao", "gem", "wrapper"],
		"Languages": [],
		"Software": "OpenMDAO: pygem",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/pygem/archive/master.zip",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-05",
		"Description": "Geometry Environment for MDAO.",
		"Public Code Repo": "https://github.com/OpenMDAO/GEM",
		"NASA Center": "ARC",
		"Contributors": ["naylor-b", "JustinSGray"],
		"Labor_Hours": 17024,
		"Categories": ["C", "openmdao", "mdao", "gem", "wrapper"],
		"Languages": [],
		"Software": "OpenMDAO: GEM",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/GEM/archive/master.zip",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2013-01-24",
		"Description": "EGADS: Engineering Geometry Aerospace Design System.",
		"Public Code Repo": "https://github.com/OpenMDAO/EGADS",
		"NASA Center": "ARC",
		"Contributors": ["haimes", "JustinSGray"],
		"Labor_Hours": 34128,
		"Categories": [
			"C",
			"openmdao",
			"mdao",
			"geometry",
			"wrapper",
			"aerospace"
		],
		"Languages": [],
		"Software": "OpenMDAO: EGADS",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/EGADS/archive/master.zip",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-04",
		"Description": "Simple script to create virtual environment with numpy, scipy, matplotlib and ipython.",
		"Public Code Repo": "https://github.com/OpenMDAO/SimplePylab",
		"NASA Center": "ARC",
		"Contributors": ["kmarsteller"],
		"Labor_Hours": 816,
		"Categories": ["python", "openmdao", "mdao", "gem", "geometry"],
		"Languages": [],
		"Software": "OpenMDAO: SimplePylab",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/SimplePylab/archive/master.zip",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-04",
		"Description": "ESP: The Engineering Sketch Pad.",
		"Public Code Repo": "https://github.com/OpenMDAO/EngSketchPad",
		"NASA Center": "ARC",
		"Contributors": ["JustinSGray"],
		"Labor_Hours": 48432,
		"Categories": ["python", "openmdao", "mdao"],
		"Languages": [],
		"Software": "OpenMDAO: EngSketchPad",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/OpenMDAO/EngSketchPad/archive/master.zip",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-11-09",
		"Description": "The RandomVariable Library is an C++ open source library for representing statistical uncertainty in a precise, readable, and usable manner. Value uncertainty can be represented with a parametric distribution such as Gaussian or a nonparametric distribution such as a weighted sample set. The library enables sampling from a parametric or fitting to a parametric distribution. Calculations may also be performed on multiple RandomVariable objects by sampling/overlaying techniques.",
		"Public Code Repo": "https://github.com/nasa/RVLib",
		"NASA Center": "ARC",
		"Contributors": ["cullo7", "shankarsankararaman", "teubert"],
		"Labor_Hours": 544,
		"Categories": ["c++", "library", "statistics", "uncertainty"],
		"Languages": [],
		"Software": "C++ Random Variable Library",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:object-oriented programming",
			"nlp:sampling",
			"nlp:statistical analysi",
			"nlp:distribution function",
			"nlp:library",
			"nlp:probability distribution function",
			"nlp:statistical distribution",
			"nlp:probability theory",
			"nlp:normal density function"
		],
		"External Link": "https://github.com/nasa/RVLib/archive/master.zip",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-12-08",
		"Description": "The OpenVSP3Plugin is a JAVA software tool that allows for the interface between OpenVSP and an analysis framework such as Phoenix Integration’s ModelCenter or the NASA developed OpenMDAO software. The OpenVSP3Plugin is designed to work on any computer desktop platform (Mac, Linux, and Windows) that has a local installation of JAVA.",
		"Public Code Repo": "https://github.com/nasa/openvsp3plugin",
		"NASA Center": "LaRC",
		"Contributors": ["jrwelstead", "jfenbert"],
		"Labor_Hours": 1392,
		"Categories": ["OpenVSP", "Geometry", "OpenMDAO", "ModelCenter"],
		"Languages": [],
		"Software": "OpenVSP3Plugin",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:dynamic structural analysi",
			"nlp:numerical control",
			"nlp:human-computer interface",
			"nlp:computerized simulation",
			"nlp:measure and integration",
			"nlp:software development tool",
			"nlp:interface",
			"nlp:personal computer",
			"nlp:graphical user interface"
		],
		"External Link": "https://github.com/nasa/openvsp3plugin",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-06-23",
		"Description": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI) takes in raw Landsat 8 surface reflectance products and produces two maps to be opened in ArcMap that can be used to identify chlorophyll hotspots. It also creates a true color image.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/CBCHI",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov", "kdottiemo"],
		"Labor_Hours": 64,
		"Categories": ["Chesapeake Bay", "chlorophyll", "Landsat 8", "ArcMap"],
		"Languages": [],
		"Software": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:bidirectional reflectance",
			"nlp:thematic mapping",
			"nlp:surface propertie",
			"nlp:spectral reflectance",
			"nlp:remote sensing",
			"nlp:reflectance",
			"nlp:chlorophyll",
			"nlp:water color",
			"nlp:map",
			"nlp:image processing"
		],
		"External Link": "https://software.nasa.gov/software/LAR-18794-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-07-16",
		"Description": "This project provides Fortran templates for defining software containers.   Of necessity the capabilities are a bit manual as compared to C++ STL, but still quite useful.  Container types supported for now are Vector, Set, and Map.   Contained objects can be specified as any intrinsic type or derived type.   This includes deferred length strings and/or unlimited polymorphic entities.   The container can contain a single static type or allow for subtypes.   In the polymorphic case, the container can either keep deep copies (allocatable) or shallow references (pointer).",
		"Public Code Repo": "https://github.com/Goddard-Fortran-Ecosystem/gFTL",
		"NASA Center": "GSFC",
		"Contributors": ["tclune", "doronf-cortica"],
		"Labor_Hours": 6832,
		"Categories": ["Templates", "Fortran", "Containers"],
		"Languages": [],
		"Software": "The Goddard Fortran Template Library",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:user manuals (computer programs)",
			"nlp:object-oriented programming",
			"nlp:vectors (mathematics)",
			"nlp:set theory",
			"nlp:mapping"
		],
		"External Link": "https://github.com/Goddard-Fortran-Ecosystem/gFTL/wiki",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-12-01",
		"Description": "Software Architecture Framework for Extensibility using Dynamic Assembly of Reflective Types (SAFE-DART) is a framework for Qt-based C++ applications which simplifies the process of writing modular object-oriented code.",
		"Public Code Repo": "https://github.com/nasa/SAFE-DART",
		"NASA Center": "GRC",
		"Contributors": ["JordanRHiggins"],
		"Labor_Hours": 960,
		"Categories": ["C++", "Framework", "Qt"],
		"Languages": [],
		"Software": "SAFE-DART",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:java (programming language)",
			"nlp:computerized simulation",
			"nlp:object-oriented programming",
			"nlp:c++ (programming language)",
			"nlp:software reliability",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:symbol",
			"nlp:architecture (computers)"
		],
		"External Link": "https://github.com/nasa/SAFE-DART",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-01-18",
		"Description": "Python software library that facilitates the geolocation of photographs and video frames from the International Space Station (ISS).",
		"Public Code Repo": "https://github.com/nasa/ISS_Camera_Geolocate",
		"NASA Center": "MSFC",
		"Contributors": ["tjlang"],
		"Labor_Hours": 384,
		"Categories": [
			"Earth Science",
			"Toolkit",
			"Meteorology",
			"Cameras",
			"ISS",
			"Photographs"
		],
		"Languages": [],
		"Software": "ISS Camera Geolocate",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/ISS_Camera_Geolocate/wiki",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-01-30",
		"Description": "GFR (Glenn Flux Reconstruction) is a high-order computational fluid dynamics (CFD) Fortran code for large-eddy simulations. It is based on the simple and efficient flux reconstruction method and accurate to arbitrary order through a user-supplied input parameter. It is currently capable of using unstructured grids containing quadrilateral and hexahedra elements. The current release only supports UNIX-like operating systems.",
		"Public Code Repo": "https://github.com/nasa/gfr",
		"NASA Center": "GRC",
		"Contributors": ["scspiegel"],
		"Labor_Hours": 38464,
		"Categories": ["CFD", "LES", "Flux Reconstruction", "Fortran"],
		"Languages": [],
		"Software": "GFR",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:dynamic structural analysi",
			"nlp:computerized simulation",
			"nlp:finite element method",
			"nlp:computational grid",
			"nlp:digital simulation",
			"nlp:unstructured grids (mathematics)",
			"nlp:three dimensional model",
			"nlp:computational fluid dynamic",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://github.com/nasa/gfr",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-03-08",
		"Description": "misr_view is a graphical user interface-driven display and analysis tool for use with MISR files that use the HDF-EOS 'grid' interface. The display and analysis tools include simultaneous display of several data planes through color assignment, contrast enhancement, pseudo coloring, data value query, image rotation, creation of stereo anaglyphs, zooming, linked analysis and view windows, vector overlays and map projections.",
		"Public Code Repo": "https://github.com/nasa/MISR-View",
		"NASA Center": "JPL",
		"Contributors": ["Charles Thompson", "Jeffery Hall"],
		"Labor_Hours": 15920,
		"Categories": ["Visualization", "Analysis", "Earth Science"],
		"Languages": [],
		"Software": "MISR View",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:color",
			"nlp:human-computer interface",
			"nlp:imaging technique",
			"nlp:computer graphic",
			"nlp:image enhancement",
			"nlp:image analysi",
			"nlp:display device",
			"nlp:graphical user interface",
			"nlp:query language",
			"nlp:image processing"
		],
		"External Link": "http://misr.jpl.nasa.gov/",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-03-13",
		"Description": "Apache SensSoft is a user activity logging and analytics system that enables developers to instrument and extract design and user insights from their applications. SensSoft incorporates a number of components that work together to provide user-experience researchers, project managers and software developers insights about how web applications are used. UserALE.js is an open source tool to quickly and efficiently instrument a JavaScript frontend application.",
		"Public Code Repo": "http://senssoft.incubator.apache.org/releases/",
		"NASA Center": "JPL",
		"Contributors": ["Lewis.J.Mcgibbney@jpl.nasa.gov"],
		"Labor_Hours": 576,
		"Categories": ["Logging", "Analytics", "Instrumentation"],
		"Languages": [],
		"Software": "Apache SensSoft (Incubating) UserALE.js",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:distributed processing",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:computer systems design",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:project management",
			"nlp:human-computer interface",
			"nlp:user requirement"
		],
		"External Link": "http://senssoft.incubator.apache.org/",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2019-12-09",
		"Description": "SWEET is a highly modular ontology suite with ~6000 concepts in ~200 separate ontologies covering Earth system science. SWEET is a mid-level ontology and consists of nine top-level concepts that can be used as a foundation for domain-specific ontologies that extend these top-level SWEET components. SWEET’s own domain-specific ontologies, which extend the upper level ontologies, can provide users interested in further developing a particular domain with a solid set of concepts to get started. SWEET ontologies are written in W3C Turtle; the Terse RDF Triple Language and are publicly available under the Apache License v2.0.",
		"Public Code Repo": "https://github.com/ESIPFed/sweet",
		"NASA Center": "JPL",
		"Contributors": ["Lewis.J.Mcgibbney@jpl.nasa.gov"],
		"Labor_Hours": 96,
		"Categories": [
			"Ontology",
			"Earth System Science",
			"ESIPFed",
			"Semantic"
		],
		"Languages": [],
		"Software": "SWEET Ontology Suite",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:evaluation",
			"nlp:distributed processing",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:computer systems design",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:project management",
			"nlp:human-computer interface",
			"nlp:user requirement"
		],
		"External Link": "https://github.com/ESIPFed/sweet",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-11-16",
		"Description": "The Normalized Difference Vegetation Index (NDVI) for the study time period is calculated and then compared to the maximum and minimum NDVI from a baseline range of years in order to calculate Relative Greenness (RG). The change in RG from the previous year is found, and this allows the user to identify abrupt change in vegetation.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/LCD",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 500,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "LCD",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:refractivity",
			"nlp:finite difference theory",
			"nlp:time dependence",
			"nlp:time series analysi",
			"nlp:change detection",
			"nlp:vegetation growth",
			"nlp:vegetation",
			"nlp:climate change",
			"nlp:vegetative index",
			"nlp:periodic variation"
		],
		"External Link": "https://github.com/NASA-DEVELOP/LCD",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "We used the Google Earth Engine Code interface to create a classification of land use on the United States Virgin Islands (USVI). We used six classes: water, low density residential, high-density residential, forest/shrub, agriculture and barren. We included DEM, classification points, and landsat imagery bands to analyze the imagery.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/LUCT",
		"NASA Center": "LaRC",
		"Contributors": ["JDilger"],
		"Labor_Hours": 208,
		"Categories": [
			"usg-artificial-intelligence",
			"Data & Image Processing",
			"classification",
			"machine-learning",
			"land-use",
			"landsat",
			"imagery",
			"google-earth-engine"
		],
		"Languages": [],
		"Software": "LUCT",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"land use",
			"forest",
			"classification",
			"agriculture",
			"forest management",
			"image classification",
			"satellite-borne photography",
			"landsat 1",
			"imagery",
			"water"
		],
		"External Link": "https://github.com/NASA-DEVELOP/LUCT",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-01-08",
		"Description": "Beta version of the Skyglow Estimation Toolbox. Documentation -> https://nasa-develop.github.io/SET/",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/SET",
		"NASA Center": "LaRC",
		"Contributors": [
			"rba.eos@gmail.com",
			"Stanley Yu",
			"kenton.w.ross@nasa.gov",
			"Margaret Mulhern"
		],
		"Labor_Hours": 20320,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "SET",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASA-DEVELOP/SET",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-08-12",
		"Description": "This code develops calibration models using linear regression models with in-situ field data. The calibration models are then used to predict biomass (log), nitrogen percent, and nitrogen content for Landsat images from 2006-2016. Model results and data tables are output as separate files for each field season (i.e. winter and spring seasons).",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/COVER",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 90,
		"Categories": [
			"Data & Image Processing",
			"usg-artificial-intelligence",
			"satellite",
			"landsat",
			"imagery"
		],
		"Languages": [],
		"Software": "COVER",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"biomas",
			"regression analysi",
			"calibrating",
			"season",
			"ground truth",
			"annual variation"
		],
		"External Link": "https://github.com/NASA-DEVELOP/COVER",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2018-02-02",
		"Description": "For the AcoFixDual_Tool: Geolocates and rescales ACOLITE output to make it useful in ArcMap.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/WRIT",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "WRIT",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/NASA-DEVELOP/WRIT",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-11-17",
		"Description": "SAVeTrEE is a script within Google Earth Engine for classifying areas of vegetation mortality. It prompts the user for a year, duration, and spectral index for which a mortality map should be produced, then fits a trend line to an imagery time sequence of vegetative spectral index values calculated from Landsat multispectral data.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/SAVeTrEE",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 160,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "SAVeTrEE",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:earth resource",
			"nlp:real time operation",
			"nlp:vegetation growth",
			"nlp:landsat satellite",
			"nlp:vegetation",
			"nlp:imagery",
			"nlp:vegetative index",
			"nlp:mapping",
			"nlp:satellite imagery",
			"nlp:map"
		],
		"External Link": "https://github.com/NASA-DEVELOP/SAVeTrEE",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-11-20",
		"Description": "This software was created to address concerns of fire managers in the Missouri River Basin. Previously, fire managers inferred a regional fire risk from separate sources, (i.e. temperature maps, drought indices, and precipitation averages).",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/RIFRAF",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 100,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "RIFRAF",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:risk",
			"nlp:biomedical data",
			"nlp:information system",
			"nlp:environmental monitoring",
			"nlp:body temperature",
			"nlp:ecosystem",
			"nlp:prediction",
			"nlp:temperature",
			"nlp:occupation",
			"nlp:temperature control"
		],
		"External Link": "https://github.com/NASA-DEVELOP/RIFRAF",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-30",
		"Description": "Using the cloud-based computing power of Google Earth Engine (GEE), the Hydrologic Anomaly Index (HAE) is capable of uploading and analyzing large amounts of Earth observation climate data for the purpose of hydrologic analysis and monitoring. The end-user will be able to pull from and modify a library of scripts that are stored in Earth Engine, as well as upload and access data stored on a private data catalog. The final stage of development of the tool will include a more user-friendly application built using Google’s App Engine, in which users will be able to display data products and interactive maps.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/HAE",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 500,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "HAE",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:graphical user interface",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:climate",
			"nlp:personal computer",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://github.com/NASA-DEVELOP/HAE",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-07",
		"Description": "Cover Crop Remotely Observed Performance (CCROP): The Maryland Department of Agriculture (MDA) is interested in verifying winter cover crop implementation and analyzing cover crop productivity using satellite imagery.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/CCROP",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 30,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "CCROP",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:satellite observation",
			"nlp:agriculture",
			"nlp:crop inventory",
			"nlp:crop identification",
			"nlp:winter",
			"nlp:infrared imagery",
			"nlp:crop growth",
			"nlp:farm crop",
			"nlp:satellite imagery",
			"nlp:satellite-borne photography"
		],
		"External Link": "https://github.com/NASA-DEVELOP/CCROP",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-07",
		"Description": "Flood Analysis Utilizing Landsat and ArcMap Tools (FAULT): This product was created in an effort to automate flood analysis throughout the Mississippi River Basin.",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/FAULT",
		"NASA Center": "LaRC",
		"Contributors": ["jordan.s.vaa@nasa.gov"],
		"Labor_Hours": 120,
		"Categories": ["Data & Image Processing"],
		"Languages": [],
		"Software": "FAULT",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:geomorphology",
			"nlp:river basin",
			"nlp:watershed",
			"nlp:flood",
			"nlp:geological fault",
			"nlp:structural basin",
			"nlp:tectonic",
			"nlp:chemical analysi",
			"nlp:hydrology",
			"nlp:river"
		],
		"External Link": "https://github.com/NASA-DEVELOP/FAULT",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2013-12-05",
		"Description": "Tiled WMS is a software package consisting of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The software was originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool (http://podaac-tools.jpl.nasa.gov/soto/), the Lunar Mapping and Modeling Project (LMMP) (http://lmmp.nasa.gov), and GIBS. Tiled WMS has also been used to serve data from JPL for NASA WorldWind and to produce movies at the Hayden Planetarium.",
		"Public Code Repo": "https://github.com/nasajpl/tiledwms",
		"NASA Center": "JPL",
		"Contributors": ["jtroberts", "jeffreyrhall"],
		"Labor_Hours": 2144,
		"Categories": ["Global Imagery Browse Services", "GIBS"],
		"Languages": [],
		"Software": "tiledwms",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:oceanography",
			"nlp:spatial resolution",
			"nlp:high resolution",
			"nlp:imagery",
			"nlp:infrared imagery",
			"nlp:mapping",
			"nlp:satellite imagery",
			"nlp:thematic mapping",
			"nlp:image processing",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasajpl/tiledwms",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-04-12",
		"Description": "Extracting structured information from PDFs - and later, diagrams",
		"Public Code Repo": "https://github.com/nasa-jpl/T-ENTacle",
		"NASA Center": "JPL",
		"Contributors": [
			"wmb@waynemosesburke.com",
			"adidier17",
			"asitang",
			"vlall"
		],
		"Labor_Hours": 2496,
		"Categories": ["Extract information"],
		"Languages": [],
		"Software": "T-ENTacle",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa-jpl/T-ENTacle",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-09-12",
		"Description": "Automatic Semantic Search Engine for Suitable Standards (ASSESS)",
		"Public Code Repo": "https://github.com/nasa-jpl/ASSESS",
		"NASA Center": "JPL",
		"Contributors": [
			"wmb@waynemosesburke.com",
			"adidier17",
			"giuseppetotaro"
		],
		"Labor_Hours": 8208,
		"Categories": ["Automatic", "Semantic", "Search Engine"],
		"Languages": [],
		"Software": "ASSESS",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa-jpl/ASSESS",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-04-16",
		"Description": "LiveView2 is a Qt frontend GUI for cuda_take, it displays focal plane data and basic analysis (such as the std. dev, dark subtraction, FFT, Spectral Profile, and Video Savant*-like* playback). Plots are implemented using the QCustomPlot library, which generates live color maps, bar graphs, and line graphs within the Qt C++ environment.",
		"Public Code Repo": "https://github.com/nasa-jpl/LiveView",
		"NASA Center": "JPL",
		"Contributors": ["Elliott Liggett", "jackiryan"],
		"Labor_Hours": 27072,
		"Categories": [
			"Qt frontend GUI",
			"focal plane",
			"QCustomPlot",
			"Qt",
			"C++"
		],
		"Languages": [],
		"Software": "LiveView",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:color",
			"nlp:graph theory",
			"nlp:computer graphic",
			"nlp:on-line system",
			"nlp:video signal",
			"nlp:mapping",
			"nlp:data reduction",
			"nlp:library",
			"nlp:image processing",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa-jpl/LiveView",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-02",
		"Description": "The ontology analysis workflow is intended for validating ontologies based on the core IMCE ontologies. It uses OWL ontologies (TODO: OML AS INPUT) as input, and produces test reports in the quasi-standard JUnit format. The following will walk through the environment setup, and give instructions on how to run the workflow (a) locally and (b) on a CI system such as Jenkins.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analysis",
		"NASA Center": "JPL",
		"Contributors": ["StevenJenkinsJPL", "sjiherzig"],
		"Labor_Hours": 336,
		"Categories": [
			"ontology analysis",
			"OWL ontologies",
			"ontology",
			"JUint",
			"Jenkins",
			"local",
			"JRuby",
			"SBT",
			"Java 8 (JDK)",
			"Make"
		],
		"Languages": [],
		"Software": "Ontology Analysis",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer assisted instruction",
			"nlp:electronic equipment test",
			"nlp:computerized simulation",
			"nlp:systems analysi",
			"nlp:digital system"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analysis",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-01-31",
		"Description": "JPL's IMCE ontologies for Model-Based Systems Engineering",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.public",
		"NASA Center": "JPL",
		"Contributors": ["StevenJenkinsJPL", "sjiherzig", "NicolasRouquette"],
		"Labor_Hours": 177232,
		"Categories": [
			"ontology",
			"model-based",
			"systems engineering",
			"engineering"
		],
		"Languages": [],
		"Software": "Ontology Public",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.public",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-04-14",
		"Description": "The ontology processing and profile generation workflow is intended for validating and generating MagicDraw-compatible SysML profiles for core IMCE ontologies. It uses OWL ontologies (TODO: OML AS INPUT) as input. The following will walk through the environment setup, and give instructions on how to run the workflow (a) locally and (b) on a CI system such as Jenkins.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.workflow",
		"NASA Center": "JPL",
		"Contributors": [
			"StevenJenkinsJPL",
			"sjiherzig",
			"NicolasRouquette",
			"bsatoriu"
		],
		"Labor_Hours": 5536,
		"Categories": [
			"MagicDraw-compatible",
			"SysML profiles",
			"OWL ontologies",
			"ontology processing",
			"ontology profile generation"
		],
		"Languages": [],
		"Software": "Ontology Workflow",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer assisted instruction",
			"nlp:computerized simulation",
			"nlp:man machine system",
			"nlp:programming environment",
			"nlp:digital system",
			"nlp:natural language processing",
			"nlp:system effectivenes",
			"nlp:data processing",
			"nlp:optical data processing",
			"nlp:grid generation (mathematics)"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.workflow",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-04-12",
		"Description": "Eclipse Tycho-based organization of the Ontological Modeling Language (OML)",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "dyates"],
		"Labor_Hours": 151232,
		"Categories": [
			"Eclipse Tycho-based organization",
			"Ontological Modeling Language",
			"OML"
		],
		"Languages": [],
		"Software": "Ontological Modeling Language (OML) Platform & Core Features",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-04-11",
		"Description": "Definition of the normalized schema tables for JPL's Ontological Modeling Framework (OMF) at https://jpl-imce.github.io/gov.nasa.jpl.imce.oml.tables/.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.tables",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 16400,
		"Categories": [
			"normalized schema tables",
			"Ontological Modeling Framework (OMF)",
			"OML"
		],
		"Languages": [],
		"Software": "Normalized Database Schema Tables for JPL's Ontological Modeling Language (OML)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.tables",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-04-11",
		"Description": "The Xcore OMF metamodel/schema is intended to be a single source for several derived artifacts whose contents is a projection of the OMF metamodel/schema. Among such artifacts, the cross-platform normalized database schema tables provide a single source specification for normalized database schema tables cross-compiled for several environments, including JVM (pure Java, pure Scala, mixed Java+Scala), JavaScript (Node.js), mixed (ScalaJS).",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.development.generators",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 10336,
		"Categories": [
			"cross-platform",
			"normalized database schema",
			"tables",
			"Ontological Modeling Framework (OMF)",
			"OML"
		],
		"Languages": [],
		"Software": "Xtend generators for JPL's Ontological Modeling Framework (OMF)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:specification",
			"nlp:tables (data)",
			"nlp:computer systems design",
			"nlp:programming environment",
			"nlp:data structure",
			"nlp:functional design specification",
			"nlp:query language",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.development.generators",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-04-10",
		"Description": "This is an enhancement of the Apache XML Commons Resolver library implementation of the OASIS XML Catalog 1.1 specification. OML uses an OASIS XML Catalog to establish a mapping between external URI references (i.e., http URIs) and corresponding local URI references (i.e., file URIs). Stanford's Protege Desktop uses OASIS XML Catalogs for the same purpose.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.xml.catalog.scope",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 288,
		"Categories": ["Apache", "XML", "Commons", "Resolver", "Library"],
		"Languages": [],
		"Software": "gov.nasa.jpl.imce.xml.catalog.scope",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:specification",
			"nlp:hardware description language",
			"nlp:document markup language",
			"nlp:standard",
			"nlp:functional design specification",
			"nlp:mapping",
			"nlp:file maintenance (computers)",
			"nlp:library",
			"nlp:conformal mapping"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.xml.catalog.scope",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-03-08",
		"Description": "This Scala library provides a strongly typed API for processing Ontological Modeling Language data on Apache Spark using the expressive type extensions provided by Frameless.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.frameless",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 7072,
		"Categories": [
			"Scala",
			"API",
			"Library",
			"Ontological Modeling Framework",
			"OMF"
		],
		"Languages": [],
		"Software": "Scala/Frameless-based API for the Ontological Modeling Language",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:programming language",
			"nlp:language",
			"nlp:high level language",
			"nlp:subroutine",
			"nlp:data structure",
			"nlp:linguistic",
			"nlp:data processing",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.frameless",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2018-03-08",
		"Description": "The OWL API binding for OMF implements the OMF Core functional API using the OWL API. This particular binding captures the conventions and restrictions on the use of OWL2-DL adopted for the development of JPL's Integrated Model-Centric Engineering (IMCE) ontologies.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.binding.owlapi",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 10080,
		"Categories": [
			"OWL",
			"API",
			"binding",
			"Ontological Modeling Language",
			"OML"
		],
		"Languages": [],
		"Software": "OWL API binding for OMF (Ontological Modeling Framework)",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:product development",
			"nlp:computerized simulation",
			"nlp:concurrent engineering",
			"nlp:systems engineering",
			"nlp:standard",
			"nlp:structural design",
			"nlp:three dimensional model",
			"nlp:model"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.binding.owlapi",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-03-08",
		"Description": "The OMG core functional API adopts techniques from the field of functional programming languages, particularly Scala, for specifying the vocabulary of ontological modeling as a set of abstract types (that is, no commitment implied or assumed about any implementation of these abstract types) and a set of functional operations on these abstract types (that is, operations in the mathematical sense of pure functions that compute output values based on input values). This functional paradigm for specifying a domain allows a clean separation between the domain of ontological modeling (i.e., the focus of the OMF Core Functional API) from specific bindings for standards-based technology frameworks such as W3C's OWL, OMG's UML/SysML and, potentially, others. More importantly, the functional nature of this OMF Core API allows decoupling algorithms for analyzing, constructing, auditing, verifying, reasoning about OMF ontological models independently of the particular technology in which these ontological models are represented.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.core",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 4656,
		"Categories": [
			"functional programming",
			"API",
			"ontological modeling",
			"abstract types",
			"ontological models"
		],
		"Languages": [],
		"Software": "OMF (Ontological Modeling Framework) Core Functional API",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:programming language",
			"nlp:language",
			"nlp:input/output routine",
			"nlp:algorithm",
			"nlp:linguistic",
			"nlp:model"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.core",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-03-08",
		"Description": "This library provides an implementation of the OML Resolver API.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.resolver",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 3392,
		"Categories": [
			"library",
			"symbol table",
			"resolver",
			"JSON",
			"serialization",
			"ontological models"
		],
		"Languages": [],
		"Software": "Symbol table resolver for the JSON serialization of JPL's Ontological Modeling Framework Schema.",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.resolver",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-03-01",
		"Description": "The documentation about the Ontological Modeling Language specification",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.doc",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 992,
		"Categories": ["Ontological Modeling Language", "OML", "document"],
		"Languages": [],
		"Software": "JPL's Ontological Modeling Language Specification Document",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.doc",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-02-06",
		"Description": "Configuration for setting up a Fuseki server for the IMCE ontology workflows",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.fuseki",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "StevenJenkinsJPL"],
		"Labor_Hours": 32,
		"Categories": [
			"server",
			"configuration",
			"Fuseki",
			"IMCE",
			"ontology",
			"workflow"
		],
		"Languages": [],
		"Software": "Configuration for setting up a Fuseki server for the IMCE ontology workflows",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.fuseki",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-12-28",
		"Description": "Aggregate of Akka, Play, Scalaz, ScalaCheck, ScalaTest, Spray libraries",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.other_scala_libraries",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 32,
		"Categories": ["aggregate", "library", "libraries"],
		"Languages": [],
		"Software": "IMCE Third-Party Other Scala Libraries",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/imce.third_party.other_scala_libraries",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-11-29",
		"Description": "This sbt plugin aggregates a few community plugins used across several projects in JPL's Integrated Model-Centric Engineering initiative and in OMG's Tool Infrastructure Working Group. There is an inherent tradeoff between maintaining slight variations of similar build configurations across multiple projects (i.e. no common sbt plugin) and defining a common sbt plugin reused across multiple projects to simplify their build configurations. Conceptually, the scope and purpose of this sbt plugin is very similar to the elegant nice-sbt-settings. Practically, nice-sbt-settings is indeed nicer.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.sbt.plugin",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig", "dwijnand"],
		"Labor_Hours": 688,
		"Categories": ["aggregate", "sbt plugin", "community plugin"],
		"Languages": [],
		"Software": "JPL's IMCE SBT Plugin for Java, Scala, AspectJ projects",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:group theory",
			"nlp:computation",
			"nlp:engineer",
			"nlp:mathematical model",
			"nlp:computerized simulation",
			"nlp:product development",
			"nlp:concurrent engineering",
			"nlp:systems engineering",
			"nlp:project management",
			"nlp:configuration management"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.sbt.plugin",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-10-18",
		"Description": "This project builds an aggregate of the OWL API published by several organizations, including: net.sourceforge.owlapi (the official OWL API as the de-facto reference implementation of the W3C OWL Functional Syntax Specification), and org.openrdf.sesame (the Eclipse RDF4J Sesame implementation of W3C Resource Description Framework, RDF)",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.owlapi_libraries",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 16,
		"Categories": ["aggregate", "libraries"],
		"Languages": [],
		"Software": "IMCE Third-Party OWLAPI Libraries",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:specification",
			"nlp:formalism",
			"nlp:hardware description language",
			"nlp:model reference adaptive control",
			"nlp:semantic",
			"nlp:resource allocation",
			"nlp:project management",
			"nlp:standard",
			"nlp:functional design specification"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.third_party.owlapi_libraries",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-10-06",
		"Description": "This project builds an aggregates of several Scala libraries for graph data structures published by several organizations: com.assembla.scala-incubator (In-memory graph library intended to fit seamlessly into the Scala Collection Library), and net.liftweb (The JSON library from the Lift web framework for Scala).",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.scala_graph_libraries",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 32,
		"Categories": ["aggregate", "libraries", "scala", "graph"],
		"Languages": [],
		"Software": "IMCE Third-Party Scala Graph Libraries",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data acquisition",
			"nlp:graph theory",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:data structure",
			"nlp:world wide web",
			"nlp:data reduction",
			"nlp:library",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.third_party.scala_graph_libraries",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-09-28",
		"Description": "There is no description for this software",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analyzed",
		"NASA Center": "JPL",
		"Contributors": ["none listed"],
		"Labor_Hours": 96,
		"Categories": ["ontologies"],
		"Languages": [],
		"Software": "gov.nasa.jpl.imce.ontologies.loadprod",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analyzed",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-03-01",
		"Description": "The IMCE Dynamic Scripts plugin is compatible with any edition of MagicDraw 18.0.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.plugin",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 4992,
		"Categories": ["IMCE", "dynamic", "scripts", "plugin", "MagicDraw"],
		"Languages": [],
		"Software": "IMCE Dynamic Scripts plugin for MagicDraw 18",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.plugin",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-05-01",
		"Description": "Apache Open Climate Workbench is an effort to develop software that performs climate model evaluation using model outputs from a variety of different sources the Earth System Grid Federation, the Coordinated Regional Climate Downscaling Experiment, the U.S. National Climate Assessment and the North American Regional Climate Change Assessment Program and temporal/spatial scales with remote sensing data from NASA, NOAA and other agencies. The toolkit includes capabilities for rebinning, metrics computation and visualization.",
		"Public Code Repo": "http://www.apache.org/dyn/closer.lua/climate/1.3.0/climate-1.3.0-rc1.zip",
		"NASA Center": "JPL",
		"Contributors": ["lewis.j.mcgibbney@jpl.nasa.gov"],
		"Labor_Hours": 15232,
		"Categories": [
			"climate",
			"climate change",
			"model",
			"NOAA",
			"earth",
			"downscaling",
			"assessment"
		],
		"Languages": [],
		"Software": "Apache Open Climate Workbench 1.3.0",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:evaluation",
			"nlp:computerized simulation",
			"nlp:remote sensing",
			"nlp:computer graphic",
			"nlp:computational grid",
			"nlp:computer program integrity",
			"nlp:software development tool",
			"nlp:scientific visualization",
			"nlp:data reduction"
		],
		"External Link": "http://www.apache.org/dyn/closer.lua/climate/1.3.0/climate-1.3.0-rc1.zip",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-09-05",
		"Description": "This launcher application follows the guidelines for starting MagicDraw 18.5 in a configuration for running MagicDraw 18.5 with the IMCE DynamicScripts plugin for MagicDraw 18.5. installed outside of the MagicDraw installation folder.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.launcher",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 208,
		"Categories": [
			"launcher",
			"IMCE",
			"MagicDraw",
			"DynamicScripts",
			"plugin"
		],
		"Languages": [],
		"Software": "Launcher for IMCE's MagicDraw DynamicScripts Plugin",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:response time (computers)",
			"nlp:elastic propertie",
			"nlp:signal encoding",
			"nlp:industry",
			"nlp:technology utilization",
			"nlp:configuration management",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.launcher",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-02-28",
		"Description": "To enable these enhancements at runtime in MD, this library uses the so-called load-time weaving strategy. AspectJ is an aspect-oriented extension to Java. Because AspectJ operates at the level of bytecode, it is also applicable to other languages like Scala that compile to the JVM.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.magicdraw.library.enhanced_api#imce-magicdraw-library-for-aspectj-based-md-api-enhancements",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 176,
		"Categories": [
			"AspectJ",
			"IMCE",
			"MagicDraw",
			"enhancement",
			"browser",
			"diagram",
			"load-time",
			"weaving"
		],
		"Languages": [],
		"Software": "IMCE MagicDraw Library for AspectJ-based MD API enhancements",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:response time (computers)",
			"nlp:time dependence",
			"nlp:programming language",
			"nlp:loads (forces)",
			"nlp:high level language",
			"nlp:run time (computers)",
			"nlp:compiler",
			"nlp:library",
			"nlp:time sharing"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.magicdraw.library.enhanced_api#imce-magicdraw-library-for-aspectj-based-md-api-enhancements",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-30",
		"Description": "A textual DSL for specifying browser, diagram & contextualized actions in a modeling tool. This project defines a tool-neutral, generic DSL for specifying 'dynamic scripts'. A dynamic script specifies the location of a modeling function compiled for the JVM that can be invoked for modeling elements matching the applicability criteria specified in the script. The genericity of this DSL is that the applicability criteria can be specified in terms of references to tool-neutral identifiers of metaclasses, stereotypes and library types and the context where scripts are to be made available to users is specified in terms of generic notions of model browser and diagrams; user-interface notions that are widely common to graphical modeling tools.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.generic_dsl",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 480,
		"Categories": [
			"tool-neutral",
			"generic",
			"DSL",
			"dynamic scripts",
			"browser",
			"diagram",
			"modeling",
			"textual"
		],
		"Languages": [],
		"Software": "JPL Dynamic Scripts Generic DSL",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:functions (mathematics)",
			"nlp:graphical user interface",
			"nlp:mathematical model",
			"nlp:model",
			"nlp:computerized simulation",
			"nlp:interactive control",
			"nlp:finite element method",
			"nlp:interface",
			"nlp:position (location)",
			"nlp:human-computer interface"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.generic_dsl",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-08-29",
		"Description": "This program will execute the profile generator application (gov.nasa.jpl.imce.profileGenerator.application), and will package the results. It depends on both the profile generator application and the ontology bundles produced.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.batch",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig"],
		"Labor_Hours": 80,
		"Categories": [
			"profile",
			"generator",
			"batch",
			"execution",
			"application"
		],
		"Languages": [],
		"Software": "Profile Generator - Batch Execution",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:convexity",
			"nlp:fortran",
			"nlp:magnetic storage",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.batch",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-06-27",
		"Description": "This repository contains the files required for creating a docker image with required software for ontology processing.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 128,
		"Categories": ["docker", "image", "ontology", "processing"],
		"Languages": [],
		"Software": "Ontology Processor",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-06-01",
		"Description": "This repository provides mapping from OTI models (i.e., OMG Tool-neutral Interface for UML) to generic OMF (Ontological Modeling Framework).",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 1488,
		"Categories": [
			"mapping",
			"OTI",
			"OMG",
			"tool-neutral",
			"UML",
			"generic",
			"OMF",
			"Ontological",
			"Modeling",
			"Framework"
		],
		"Languages": [],
		"Software": "Mapping from OTI models to Generic OMF",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:mathematical model",
			"nlp:human-computer interface",
			"nlp:computerized simulation",
			"nlp:interface",
			"nlp:mapping",
			"nlp:three dimensional model",
			"nlp:model",
			"nlp:conformal mapping"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-05-09",
		"Description": "This repository provides simplified OML for exercising Xcore/Xtext/Xtend code generation and building using gradle.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 87104,
		"Categories": [
			"Xcore",
			"Xtext",
			"Xtend",
			"gradle",
			"OML",
			"Ontological",
			"Modeling",
			"Language"
		],
		"Languages": [],
		"Software": "Ontological Modeling Language core build (Xcore, Xtext, Xtend)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-04-18",
		"Description": "Generator from Ontological Modeling Framework (OMF) vocabularies to profiles extending UML/SysML",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.application",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig"],
		"Labor_Hours": 1168,
		"Categories": [
			"UML/SysML",
			"profiles",
			"vocabularies",
			"generator",
			"OMF",
			"Ontological",
			"Modeling",
			"Framework"
		],
		"Languages": [],
		"Software": "A MagicDraw DynamicScript application for executing the IMCE profile generator from OMF bundles",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.application",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-04-04",
		"Description": "The IMCE Project Template is a Giter8 template project serving as the basis for new Scala projects within the IMCE build ecosystem. Meant for developers familiar with or new to the IMCE platform, this repository contains reference guides and general purpose build and publish scripts for integration with IMCE accounts on Travis CI, Bintray and Github.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.templates.scala.g8",
		"NASA Center": "JPL",
		"Contributors": ["sjiherzig"],
		"Labor_Hours": 48,
		"Categories": [
			"Giter8",
			"template",
			"project",
			"IMCE",
			"Scala",
			"TravisCI",
			"Bintray",
			"GitHub"
		],
		"Languages": [],
		"Software": "IMCE Project Template",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:numerical integration",
			"nlp:user manuals (computer programs)",
			"nlp:computerized simulation",
			"nlp:measure and integration",
			"nlp:standardization",
			"nlp:model reference adaptive control",
			"nlp:project management",
			"nlp:configuration management",
			"nlp:data base management system"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.templates.scala.g8",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2017-03-01",
		"Description": "This is a multi-project of mostly Xcore/Xtext/Xtend sources used to generate several components (abstract syntax metamodel; concrete syntax parser, doc, ...). There are several Xtend-based code generators that produce Scala source code.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.specification.parent",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 6496,
		"Categories": [
			"Xtend",
			"generator",
			"scala",
			"composite",
			"IMCE",
			"integrated",
			"model",
			"centric",
			"engineering",
			"OML",
			"ontological",
			"modeling",
			"language"
		],
		"Languages": [],
		"Software": "Composite project for JPL's Integrated Model-Centric Engineering (IMCE) Ontological Modeling Language (OML) Specification",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:error correcting code",
			"nlp:computerized simulation",
			"nlp:c++ (programming language)",
			"nlp:binary code",
			"nlp:signal encoding",
			"nlp:project management",
			"nlp:grammar",
			"nlp:symbol",
			"nlp:decoding",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.specification.parent",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-12-13",
		"Description": "This contains changes from previous versions. In IMCE.ISO80000-5 Thermodynamics::Units -- 'cubic metre ratio per pascasl' has a slot value: hasReducedFactors=false -- 'metre coefficient per kelvin' has a slot value: hasReducedFactors=false",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.metrology.isoiec80000.magicdraw.library",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 16,
		"Categories": [
			"ISO",
			"IEC",
			"MagicDraw",
			"Library",
			"IMCE",
			"integrated",
			"model",
			"centric",
			"engineering"
		],
		"Languages": [],
		"Software": "ISO/IEC 80000 MagicDraw library resource from JPL's Integrated Model-Centric Engineering (IMCE)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:slot antenna",
			"nlp:load distribution (forces)",
			"nlp:slot",
			"nlp:boundary value problem",
			"nlp:stability",
			"nlp:signal to noise ratio"
		],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.metrology.isoiec80000.magicdraw.library",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-01-12",
		"Description": "This project builds an aggregate of several Apache Jena libraries published by the following organizations: 1) org.apache.jena A Java framework for building Semantic Web & Linked Data applications 2) org.apache.httpcomponents Toolset of low-level Java components focused on HTTP and associated protocols 3) xerces XML parsers for Java.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.jena_libraries",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 16,
		"Categories": ["aggregate", "Apache", "Jena", "libraries"],
		"Languages": [],
		"Software": "IMCE Third-Party Jena Libraries",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:protocol (computers)",
			"nlp:document markup language",
			"nlp:high level language",
			"nlp:semantic",
			"nlp:data structure",
			"nlp:world wide web",
			"nlp:linguistic",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.third_party.jena_libraries",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2017-01-11",
		"Description": "Project Usage Integrity Checker for MagicDraw 18",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.magicdraw.projectUsageIntegrityChecker",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 7024,
		"Categories": ["usage", "integrity", "checker", "MagicDraw"],
		"Languages": [],
		"Software": "Project Usage Integrity Checker for MagicDraw 18",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.magicdraw.projectUsageIntegrityChecker",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2016-11-18",
		"Description": "Configuration for Semmle Analysis of JPL's open-source projects",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.semmle",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 96,
		"Categories": ["semmle", "analysis", "open-source"],
		"Languages": [],
		"Software": "Configuration for Semmle Analysis of JPL's open-source projects",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.semmle",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-04",
		"Description": "This is a prototype to explore SPARK idioms for loading & analyzing OMF Schema tabular data.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.spark.data",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette"],
		"Labor_Hours": 112,
		"Categories": ["prototype", "SPARK", "OMF", "schema", "tabular"],
		"Languages": [],
		"Software": "Prototyping SPARK-based analysis of IMCE OMF Schema data",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/imce.spark.data",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-11-26",
		"Description": "Model for representing SysML profiles, used as an intermediate format in the profile generation process.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.profile",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig"],
		"Labor_Hours": 272,
		"Categories": ["profile", "generator", "SysML"],
		"Languages": [],
		"Software": "Profile Generator - Profile Model",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.profile",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-10-26",
		"Description": "Model for representing digest bundles, used as an intermediate format in the profile generation process.",
		"Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.bundle",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig"],
		"Labor_Hours": 208,
		"Categories": ["digest", "bundles", "profile"],
		"Languages": [],
		"Software": "Profile Generator - Bundle Model",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.bundle",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2016-10-24",
		"Description": "This project builds an aggregate of the AspectJ libraries published by the following organization: org.aspectj A seamless aspect-oriented extension to the Java programming language.",
		"Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.aspectj_libraries",
		"NASA Center": "JPL",
		"Contributors": ["NicolasRouquette", "sjiherzig"],
		"Labor_Hours": 16,
		"Categories": ["aggregate", "AspectJ", "libraries", "Java"],
		"Languages": [],
		"Software": "IMCE Third-Party AspectJ Libraries",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical programming",
			"nlp:programming language",
			"nlp:high level language",
			"nlp:programming environment",
			"nlp:project management",
			"nlp:semantic",
			"nlp:logic programming",
			"nlp:parallel programming",
			"nlp:library"
		],
		"External Link": "https://github.com/JPL-IMCE/imce.third_party.aspectj_libraries",
		"creator": "mile@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-06-26",
		"Description": "Dymos is a library for solving general optimal control problems within the context of multidisciplinary optimization via the OpenMDAO multidisciplinary optimization framework.",
		"Public Code Repo": "https://github.com/OpenMDAO/dymos",
		"NASA Center": "GRC",
		"Contributors": ["robfalck", "JustinSGray"],
		"Labor_Hours": 2500,
		"Categories": [
			"python",
			"openmdao",
			"optimal control",
			"trajectory optimization"
		],
		"Languages": [],
		"Software": "Dymos",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:numerical control",
			"nlp:optimization",
			"nlp:control theory",
			"nlp:combinatorial analysi",
			"nlp:control systems design",
			"nlp:linear quadratic regulator",
			"nlp:active control",
			"nlp:library",
			"nlp:problem solving",
			"nlp:optimal control"
		],
		"External Link": "https://github.com/OpenMDAO/dymos",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "'Simulation of Cryogenic Tank with Temperature Stratification' is a MATLAB-based simulation of temperature stratification effects for cryogenic fluid in a tank. It is a reduced dynamical model describing temperature stratification effects driven by natural convection in a liquid hydrogen cryogenic tank. It accounts for storage, loading, and unloading of cryogenic fluid.",
		"Public Code Repo": "https://github.com/nasa/LH2Sim",
		"NASA Center": "ARC",
		"Contributors": ["Christopher Teubert", "Matthew Daigle"],
		"Labor_Hours": 416,
		"Categories": [
			"cryogenic",
			"temperature",
			"stratification",
			"MATLAB",
			"fluid",
			"hydrogen"
		],
		"Languages": [],
		"Software": "Simulation of Cryogenic Tank with Temperature Stratification",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:convective flow",
			"nlp:computerized simulation",
			"nlp:free convection",
			"nlp:temperature effect",
			"nlp:liquid hydrogen",
			"nlp:simulation",
			"nlp:cryogenic equipment",
			"nlp:propellant tank",
			"nlp:cryogenic fluid",
			"nlp:storage tank"
		],
		"External Link": "https://software.nasa.gov/software/ARC-17900-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "jwst_backgrounds is a a simple program to predict the levels of background emission in JWST observations, for use in proposal planning. It accesses a precompiled background cache prepared by Space Telescope Science Institute. The background cache is hosted by the Mikulski Archive for Space Telescopes (MAST), so you need internet access to run the tool with the remote cache. It is possible to download the full background cache to your local machine. Instructions for downloading the background cache can be found at http://archive.stsci.edu/archive_news/2017/08-Aug/index.html#article1.",
		"Public Code Repo": "https://github.com/spacetelescope/jwst_backgrounds",
		"NASA Center": "ARC",
		"Contributors": ["Klaus Pontoppidan", "janerigby"],
		"Labor_Hours": 304,
		"Categories": [
			"Mikulski",
			"Archive",
			"Space",
			"Telescopes",
			"Mikulski Archive for Space Telescopes",
			"MAST",
			"python",
			"predict",
			"background",
			"emission",
			"observations"
		],
		"Languages": [],
		"Software": "JWST Background Tools",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:spaceborne telescope",
			"nlp:internet",
			"nlp:background radiation",
			"nlp:aerospace science",
			"nlp:management planning",
			"nlp:buffer storage",
			"nlp:telescope",
			"nlp:infrared telescope",
			"nlp:planning",
			"nlp:spaceborne astronomy"
		],
		"External Link": "https://jwst.stsci.edu/news-events/news/News%20items/the-jwst-backgrounds-tool-is-now-available",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "PostgreSQL (https://www.postgresql.org) is an Open Source Relational Database Management System (RDBMS). It includes a C library (libpq) for interacting with the server over the network (https://www.postgresql.org/docs/10/static/libpq.html). This module provides a rich interface to the PostgreSQL libpq library for Perl 6. It includes capabilities for prepared query caching, database connection caching, exception handling, flexible type conversion (including Boolean, Date, DateTime, Byte Arrays, etc. as well as custom types), bulk data copy in and out, listen/notify, transactions, and cursors for large query processing.",
		"Public Code Repo": "https://github.com/CurtTilmes/perl6-dbpg",
		"NASA Center": "GSFC",
		"Contributors": ["Curt Tilmes", "Fritz Zaucker"],
		"Labor_Hours": 752,
		"Categories": [
			"PostgreSQL",
			"Open",
			"Source",
			"Relational",
			"Database",
			"Management",
			"System",
			"RDBMD",
			"C library",
			"C",
			"caching",
			"conversion",
			"processing"
		],
		"Languages": [],
		"Software": "Perl 6 DBPg PostgreSQL module",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:distributed processing",
			"nlp:data management",
			"nlp:computer network",
			"nlp:management information system",
			"nlp:data processing",
			"nlp:library",
			"nlp:query language",
			"nlp:data base",
			"nlp:data base management system"
		],
		"External Link": "https://software.nasa.gov/software/GSC-18031-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "A simple wrapper exposing the Linux epoll(7) I/O event notification facility within Perl 6.",
		"Public Code Repo": "https://github.com/CurtTilmes/perl6-epoll",
		"NASA Center": "GSFC",
		"Contributors": ["Curt Tilmes"],
		"Labor_Hours": 80,
		"Categories": ["Perl 6", "linux", "notification", "wrapper"],
		"Languages": [],
		"Software": "Perl 6 epoll",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/GSC-18030-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "This innovation creates the capability for Fortran software developers to routinely declare and use specialized software containers for arbitrary types of data. The capability is somewhat analogous to that of the C Standard Template Library but with important differences. Although the number of containers are expected to grow, the current supported cases are Vector, Map, and Set. Contained items can be of any intrinsic type or user-defined derived type. The user can also indicate that the contained objects are polymorphic and/or pointers with corresponding implications for the semantics of using those containers.",
		"Public Code Repo": "https://github.com/nasa/gFTL",
		"NASA Center": "GSFC",
		"Contributors": ["tclune"],
		"Labor_Hours": 6688,
		"Categories": ["Fortran", "software", "containers"],
		"Languages": [],
		"Software": "Fortran Template Library (gFTL) for managing collections of objects via software containers",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:object-oriented programming",
			"nlp:vectors (mathematics)",
			"nlp:data structure",
			"nlp:standard",
			"nlp:data reduction",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://software.nasa.gov/software/GSC-17742-1",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "The General Mission Analysis Tool (GMAT) is the world's only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
		"Public Code Repo": "https://sourceforge.net/projects/gmat/files/latest/download",
		"NASA Center": "GSFC",
		"Contributors": ["gsfc-softwarerequest@mail.nasa.gov"],
		"Labor_Hours": 37504,
		"Categories": [
			"open",
			"space",
			"mission",
			"orbit",
			"non-linear",
			"optimizer",
			"Solar Dynamics Observatory",
			"SDO",
			"Solar and Heliospheric Observatory",
			"SOHO",
			"Advanced Composition Explorer",
			"ACE",
			"Wind",
			"Transiting Exoplanet Survey Satellite",
			"TESS",
			"Lunar Reconnaissance Orbiter",
			"LRO"
		],
		"Languages": [],
		"Software": "General Mission Analysis Tool (GMAT) Version R2018a",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:systems integration",
			"nlp:navigation",
			"nlp:evaluation",
			"nlp:mission planning",
			"nlp:design analysi",
			"nlp:computer aided design",
			"nlp:systems engineering",
			"nlp:software development tool",
			"nlp:flight control",
			"nlp:structural design"
		],
		"External Link": "https://software.nasa.gov/software/GSC-18094-1",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "The Stochastic Reduced Order Models with Python (SROMPy) software package is code written in Python to help solve uncertainty quantification and propagation problems. Stochastic Reduced Order Models (SROMs) are low-dimensional, discrete representations of a given random vector being modeled that facilitate efficient stochastic calculations. SROMs can be viewed as a smart Monte Carlo method - using the concept for uncertainty propagation is similarly straightforward, but can significantly reduce computation time. An SROM is formed for a given target random vector by solving an optimization problem that determines it's parameters by minimizing the error between the statistics of the SROM and the target. Once the SROM is formed, it can be use to efficiently perform a probabilistic analysis. The SROMPy software package is a tool to solve the optimization problem efficiently to generate an SROM that can be used to propagate uncertainty through a given model.",
		"Public Code Repo": "https://github.com/nasa/SROMPy",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov"],
		"Labor_Hours": 1008,
		"Categories": [
			"stochastic",
			"reduced",
			"order",
			"models",
			"python",
			"propagation",
			"low-dimensional",
			"discrete",
			"representations",
			"random",
			"vector",
			"calculations"
		],
		"Languages": [],
		"Software": "Stochastic Reduced Order Models with Python (SROMPy)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:mathematical model",
			"nlp:optimization",
			"nlp:statistical analysi",
			"nlp:parameterization",
			"nlp:vectors (mathematics)",
			"nlp:software development tool",
			"nlp:error analysi"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19359-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "The Plan Execution Interchange Language (PLEXIL) is an open source synchronous language developed by NASA for commanding and monitoring autonomous systems. PLEXIL Formal Interactive Verification Environment (PLEXIL5) is a tool that implements a formal executable semantics of PLEXIL. PLEXIL5 includes a graphical interface that enable access to formal verification techniques such as model-checking, symbolic execution, theorem proving, and static analysis of plans. The graphical environment supports formula editing and visualization of counterexamples, interactive simulation of plans at different granularity levels, and random initialization of external environment variables.",
		"Public Code Repo": "https://github.com/nasa/PLEXIL5",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 42320,
		"Categories": [
			"Formal",
			"Interactive",
			"Verification",
			"Environment",
			"Plan",
			"Execution",
			"Interchange",
			"Language",
			"PLEXIL5",
			"sychronous",
			"autonomous"
		],
		"Languages": [],
		"Software": "Formal Interactive Verification Environment for the Plan Execution Interchange Language (PLEXIL5)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:computerized simulation",
			"nlp:interactive control",
			"nlp:programming language",
			"nlp:language",
			"nlp:program verification (computers)",
			"nlp:high level language",
			"nlp:semantic",
			"nlp:proving",
			"nlp:linguistic"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19339-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2017-07-16",
		"Description": "AprilNav is a mobile indoor real-time landmark navigation system.",
		"Public Code Repo": "https://github.com/nasa/AprilNav",
		"NASA Center": "MSFC",
		"Contributors": ["gretastudier", "tkschuler"],
		"Labor_Hours": 600,
		"Categories": ["Tools", "Autonomous Systems", "Navigation"],
		"Languages": [],
		"Software": "AprilNav",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/AprilNav",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "This is a training tool for individuals to learn how to develop software with NASA-developed Core Flight software (CFS) framework. No agreement is necessary through this catalog. Software is available at open source site.",
		"Public Code Repo": "https://software.nasa.gov/software/LAR-19128-1",
		"NASA Center": "JSC",
		"Contributors": ["jsc-ttco-software-request@mail.nasa.gov"],
		"Labor_Hours": 1,
		"Categories": ["core", "flight", "software", "training", "framework"],
		"Languages": [],
		"Software": "CFS-101 Training",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:education",
			"nlp:engineer",
			"nlp:computer assisted instruction",
			"nlp:computerized simulation",
			"nlp:software reliability",
			"nlp:software development tool",
			"nlp:programming environment",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:software reuse"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19128-1",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-02",
		"Description": "This tool includes three general types of scripts. The first one extracts average NDVI values from Landsat 5 and Landsat 8 image collections for specified reference dates (typically a period of 10-15 years). Anomalies in NDVI values are then derived from Landsat 5 & 8 reference image collections from later dates (typically the year after the reference period to present). Various graphs and charts are produced showing positive and negative NDVI changes for specified points. The results are also visualized on the map as either areas of NDVI gain (displayed in green) or NDVI loss (displayed in red). The second types of scripts included scripts that perform unsupervised classifications to determine marsh extent for a variety of years and were made by applying a mask over the specified study area that incorporates elevation data to exclude regions over a specified height above average sea-level. These scripts require the user to choose classified pixel clusters that represent marsh land cover by using the Google Earth Inspector tab and then entering those values into the script to generate the marsh extent maps. Results of these scripts include classification maps for various years (2000, 2005, 2010, 2015, etc.). The user can then decide to export those results into either their Assets or their Drive, or both. A third type of script is used for statistics regarding the classified maps generated in the classification scripts. These statistics include total pixel number and total marsh area calculated into square meters after the marsh extent pixels are clipped to our study area (the State of Maryland).",
		"Public Code Repo": "https://github.com/NASA-DEVELOP/MARSHe",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov"],
		"Labor_Hours": 16,
		"Categories": [
			"marsh",
			"remote",
			"sensing",
			"health",
			"evaluation",
			"Landsat 5",
			"Landsat 8",
			"image",
			"usg-artificial-intelligence"
		],
		"Languages": [],
		"Software": "MaRSHE- Marsh Remote Sensing Health Evaluation",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"classification",
			"remote sensing",
			"brazil",
			"anomaly",
			"earth surface",
			"land use",
			"map",
			"digital data",
			"thematic mapping",
			"satellite imagery"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19211-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-08-21",
		"Description": "This software was developed to solve Reynolds-averaged Navier-Stokes Equations to simulate turbulent, viscous flows over three-dimensional configurations. A general multiblock grid is used to model complex configurations. A multi-stage Runge-Kutta pseudo-time stepping scheme is coupled with residual smoothing and multigrid acceleration techniques to form an efficient algorithm. TLNS3D-MB was the first CFD code to demonstrate grid independent convergence rate for transonic viscous flows over wing/fuselage configurations.",
		"Public Code Repo": "https://github.com/nasa/TLNS3D",
		"NASA Center": "LaRC",
		"Contributors": ["larc-sra@mail.nasa.gov"],
		"Labor_Hours": 29952,
		"Categories": [
			"Reynolds-averaged",
			"Reynolds",
			"averaged",
			"Navier-Stokes",
			"Navier",
			"Stokes",
			"equations",
			"simulate",
			"turbulent",
			"viscous",
			"three-dimensional",
			"configurations"
		],
		"Languages": [],
		"Software": "TLNS3D",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:three dimensional flow",
			"nlp:convergence",
			"nlp:computational grid",
			"nlp:multigrid method",
			"nlp:algorithm",
			"nlp:computational fluid dynamic"
		],
		"External Link": "https://software.nasa.gov/software/LAR-16666-GS",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-09-27",
		"Description": "The Curiosity rover has been on the surface of Mars for over five years. In that time, it has sent over 200,000 photos back to Earth. Using these photos, engineers at JPL have reconstructed the 3D surface of Mars for their scientists to use as a mission planning tool – surveying the terrain and identifying geologically significant areas for Curiosity to investigate further. And now you can explore the same Martian surface in your browser in an immersive WebVR experience. Access Mars features four important mission locations: the Landing Site, Pahrump Hills, Marias Pass, and Murray Buttes. Additionally, users can visit Curiosity's 'Current Location' for a look at where the rover has been in the past two to four weeks. And while you explore it all, JPL scientist Katie Stack Morgan will be your guide, teaching you about key mission details and highlighting points of interest.",
		"Public Code Repo": "https://github.com/googlecreativelab/access-mars",
		"NASA Center": "JPL",
		"Contributors": [
			"jeremyabel",
			"mannytan",
			"ryburke",
			"kellyannl",
			"amenzies"
		],
		"Labor_Hours": 60208,
		"Categories": ["Mars", "WebVR", "Curiosity Rover"],
		"Languages": [],
		"Software": "Access Mars",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:landing site",
			"nlp:mars landing",
			"nlp:mission planning",
			"nlp:geology",
			"nlp:remote sensing",
			"nlp:planetary geology",
			"nlp:position (location)",
			"nlp:mars mission",
			"nlp:roving vehicle",
			"nlp:mars surface"
		],
		"External Link": "https://accessmars.withgoogle.com/",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2023-02-07",
		"Description": "This is a tool for defining over 10,000 NASA acronyms.",
		"Public Code Repo": "https://github.com/nasa/NASA-Acronyms",
		"NASA Center": "GSFC",
		"Contributors": ["maliska"],
		"Labor_Hours": 100,
		"Categories": ["search", "tool", "nasa", "acronym", "testing"],
		"Languages": [],
		"Software": "NASA Acronyms",
		"License": ["MIT"],
		"Categories_NLP": [],
		"External Link": "https://nasaacronyms.com/",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-10-23",
		"Description": "HyperSolve AD Mini-App uses an in-house developed AD tool that is based on operator-overloading to compute linearizations of a given function.",
		"Public Code Repo": "https://github.com/T-infinity/miniapps",
		"NASA Center": "LaRC",
		"Contributors": ["kbthomp1"],
		"Labor_Hours": 320,
		"Categories": ["operator", "overloading", "linearization", "function"],
		"Languages": [],
		"Software": "HyperSolve AD Mini-App",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:transfer function",
			"nlp:functions (mathematics)",
			"nlp:operators (mathematics)",
			"nlp:computerized simulation",
			"nlp:analytic function",
			"nlp:green's function",
			"nlp:distribution function",
			"nlp:linearization",
			"nlp:graphs (charts)"
		],
		"External Link": "https://software.nasa.gov/software/LAR-19476-1",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-11-08",
		"Description": "Python module for applying the Multi-Level Monte Carlo (MLMC) method for uncertainty propagation.",
		"Public Code Repo": "https://github.com/nasa/mlmcpy",
		"NASA Center": "LaRC",
		"Contributors": ["lukemorrill", "jwarner308"],
		"Labor_Hours": 784,
		"Categories": [
			"multi",
			"level",
			"monte",
			"carlo",
			"python",
			"uncertainty"
		],
		"Languages": [],
		"Software": "Multi-Level Monte Carlo",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/mlmcpy",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2018-11-14",
		"Description": "Python module for uncertainty quantification using a parallel sequential Monte Carlo sampler",
		"Public Code Repo": "https://github.com/nasa/SMCPy",
		"NASA Center": "LaRC",
		"Contributors": ["peleser"],
		"Labor_Hours": 1120,
		"Categories": [
			"uncertainty quantification",
			"parameter estimation",
			"model calibration"
		],
		"Languages": [],
		"Software": "Sequential Monte Carlo Sampling with Python",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://github.com/nasa/SMCPy",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2018-11-14",
		"Description": "Bingo is an open source package for performing symbolic regression. Its emphasis lies on the efficient use of HPC resources. For the most part, things should work \"out of the box\", with a few dependencies that are standard in many python installs.",
		"Public Code Repo": "https://github.com/nasa/bingo",
		"NASA Center": "LaRC",
		"Contributors": ["gbomarito"],
		"Labor_Hours": 34480,
		"Categories": ["symbolic regression", "HPC"],
		"Languages": [],
		"Software": "Bingo",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:electronic equipment",
			"nlp:information dissemination",
			"nlp:risk",
			"nlp:computerized simulation",
			"nlp:prediction analysis technique",
			"nlp:resource allocation",
			"nlp:multivariate statistical analysi",
			"nlp:regression analysi",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa/bingo",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2019-02-15",
		"Description": "FPRoCk is a software library for checking satisfiability of a set of mixed real and floating-point constraints. If this set of constraints has at least one solution, it returns one of the solutions, otherwise it returns UNSAT indicating that the set is unsatisfiable.",
		"Public Code Repo": "https://github.com/nasa/fprock",
		"NASA Center": "LaRC",
		"Contributors": ["cesar.a.munoz@nasa.gov"],
		"Labor_Hours": 500,
		"Categories": [
			"satisfiability (SAT) checker",
			"floating-point SAT solver",
			"real-number SAT solver",
			"mixed floating-point/real constraints"
		],
		"Languages": [],
		"Software": "FPRoCK",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:convexity",
			"nlp:software development tool",
			"nlp:set theory",
			"nlp:subroutine",
			"nlp:constraint",
			"nlp:algorithm",
			"nlp:library",
			"nlp:problem solving",
			"nlp:graphs (charts)"
		],
		"External Link": "https://github.com/nasa/fprock",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2019-03-11",
		"Description": "NASAaccess is R package that can generate gridded ascii tables of climate (CIMP5) and weather data (GPM, TRMM, GLDAS) needed to drive various hydrological models (e.g., SWAT, VIC, RHESSys, ..etc). The package assumes that users have already set up a registration account(s) with Earthdata login as well as authorizing NASA GESDISC data access. Please refer to  https://disc.gsfc.nasa.gov/data-access for further details. The package relies on 'curl' (https://curl.haxx.se/) commands and library to access and download data from NASA remote sensing servers.  Since Mac users have curl as part of macOS, Windows users should make sure that their local machines have 'curl' installed properly.  Creating the .netrc file at the user machine 'Home' directory and storing the user NASA GESDISC logging information in it is needed to execute the package commands. Instructions on creating the .netrc and .urs_cookies files can be accessed at https://wiki.earthdata.nasa.gov/display/EL/How+To+Access+Data+With+cURL+And+Wget.",
		"Public Code Repo": "https://github.com/nasa/NASAaccess",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 320,
		"Categories": [
			"R",
			"climate",
			"precipitation",
			"rainfall runoff model",
			"swat",
			"rhessys",
			"gpm",
			"trmm",
			"gldas",
			"cimp5",
			"NEX-GDDP",
			"remote sening",
			"temperature",
			"VIC"
		],
		"Languages": [],
		"Software": "NASAaccess: Downloading and reformatting tool for NASA Earth Observation data products",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:user manuals (computer programs)",
			"nlp:data management",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:remote sensing",
			"nlp:information retrieval",
			"nlp:file maintenance (computers)",
			"nlp:data processing",
			"nlp:library",
			"nlp:data base"
		],
		"External Link": "https://doi.org/10.3390/rs10060885",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2019-03-13",
		"Description": "Landslide Hazard Analysis for Situational Awareness",
		"Public Code Repo": "https://github.com/nasa/LHASA",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 16,
		"Categories": [
			"landslide",
			"imerg",
			"gpm",
			"hazard",
			"analysis",
			"awareness"
		],
		"Languages": [],
		"Software": "LHASA",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/GSC-17452-1",
		"creator": "mile@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2019-03-04",
		"Description": "The Stored Command Absolute (SCA) application is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS.  The SCA application allows a system to be commanded 24 hours a day using sequences of absolute time tagged command sequences.",
		"Public Code Repo": "https://github.com/nasa/SCA",
		"NASA Center": "GSFC",
		"Contributors": [],
		"Labor_Hours": 1872,
		"Categories": ["vehicle", "management"],
		"Languages": [],
		"Software": "Core Flight System (cFS) Stored Command Absolute (SCA) application",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:sequencing",
			"nlp:airborne/spaceborne computer",
			"nlp:real time operation",
			"nlp:interactive control",
			"nlp:time dependence",
			"nlp:time optimal control",
			"nlp:command and control",
			"nlp:flight simulation",
			"nlp:flight control",
			"nlp:automatic control"
		],
		"External Link": "https://software.nasa.gov/software/GSC-17537-1",
		"creator": "maya@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2019-03-19",
		"Description": "LAGER (Light-weight Accumulator Gathering Efficiently in Real-time) is a reliable software logging system designed to allow multiple logging sources to log to multiple end users.",
		"Public Code Repo": "https://github.com/nasa/lager",
		"NASA Center": "JSC",
		"Contributors": [],
		"Labor_Hours": 2880,
		"Categories": ["logging", "high performance", "LTTng"],
		"Languages": [],
		"Software": "LAGER (Light-weight Accumulator Gathering Efficiently in Real-time)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:real time operation",
			"nlp:operating systems (computers)",
			"nlp:computerized simulation",
			"nlp:time dependence",
			"nlp:human-computer interface",
			"nlp:software development tool",
			"nlp:weighting function",
			"nlp:graphical user interface",
			"nlp:time sharing",
			"nlp:user requirement"
		],
		"External Link": "https://software.nasa.gov/software/MSC-26455-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2019-03-20",
		"Description": "Enable Simulink vehicle simulation to communicate with and be controlled by PX4 autopilot.",
		"Public Code Repo": "https://github.com/MichaelSkadan/PX4-Autopilot-Simulink-Interface",
		"NASA Center": "LaRC",
		"Contributors": ["Michael Skadan", "michael.j.skadan@nasa.gov"],
		"Labor_Hours": 0,
		"Categories": [
			"PX4",
			"Autopilot",
			"Simulink",
			"Matlab",
			"C",
			"Simulation",
			"UAS",
			"UAV",
			"Flight Control",
			"Autonomous Systems",
			"Navigation",
			"Open Source"
		],
		"Languages": [],
		"Software": "PX4 Autopilot Simulink Interface",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://software.nasa.gov/software/LAR-19482-1",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2012-12-01",
		"Description": "This PO.DAAC provided program reads in all variable data and variable attributes to memory. The subroutine reader provides a header dump of all variable metadata and makes variable data avialable to memory for access.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/read_nc_py",
		"NASA Center": "JPL",
		"Contributors": [
			"David Moroni",
			"david.f.moroni@jpl.nasa.gov",
			"Ed Armstrong",
			"edward.m.armstrong@jpl.nasa.gov"
		],
		"Labor_Hours": 40,
		"Categories": ["python", "reader", "netcdf", "reader"],
		"Languages": [],
		"Software": "Generic netCDF Reader - Python code",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data processing equipment",
			"nlp:data management",
			"nlp:memory (computers)",
			"nlp:data storage",
			"nlp:subroutine",
			"nlp:random access memory",
			"nlp:fortran",
			"nlp:random acces",
			"nlp:access control"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2015-06-01",
		"Description": "This PO.DAAC provided program reads a specific ASCSAT Level 2 netCDF file by first ensuring that the file is gzipped. The main program then reads all netCDF data variables in to memory and passes this data to a subroutine that applies scaling to data variables and decomposition of quality flag information. The subroutine also provides index-based subsetting with user-specified along-track and cross-track grid cell indexing. Lastly, the subroutine converts the seconds from the time variable in to a human readable time of day based upon ISO-8601 date/time standards.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/read_ASCAT",
		"NASA Center": "JPL",
		"Contributors": ["David Moroni", "david.f.moroni@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": [
			"idl",
			"reader",
			"subset",
			"transformation",
			"netcdf",
			"granule",
			"flag",
			"variable",
			"translation",
			"time"
		],
		"Languages": [],
		"Software": "IDL Reader for PO.DAAC ASCAT Level 2 netCDF datasets",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:user manuals (computer programs)",
			"nlp:real time operation",
			"nlp:information system",
			"nlp:data acquisition",
			"nlp:aerodynamic",
			"nlp:computational grid",
			"nlp:grid generation (mathematics)",
			"nlp:architecture (computers)",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2019-01-01",
		"Description": "This PO.DAAC script shows how to create the animation of global sea surface salinity (SSS) over the period 27-03-2015 to 16-04-2018 based on the 8-day running mean version 3.0 SMAP product from Remote Sensing Systems at a spatial resolution of 70km.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/data_animation",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["Python", "visualization", "granule"],
		"Languages": [],
		"Software": "PO.DAAC Dataset Animation Creation Using Python",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:surface propertie",
			"nlp:ocean surface",
			"nlp:remote sensing",
			"nlp:earth surface",
			"nlp:spatial resolution",
			"nlp:high resolution",
			"nlp:sea",
			"nlp:sea water",
			"nlp:sea surface temperature",
			"nlp:salinity"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2016-06-01",
		"Description": "PO.DAAC provides access to several large datasets. Dealing with large datasets is challenging from the perspective of storage and access. Instead of downloading and storing large datasets locally it is often preferable to spatially subset them on a server side and store smaller pieces, or even use the pieces dynamically for an analysis and discard them. OPeNDAP is a popular service to extract subsets from data in netCDF and HDF. The matlab codes here download and subset level 2 datasets from PO.DAAC.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/subset_opendap_matlab",
		"NASA Center": "JPL",
		"Contributors": ["John Wilkin", "jwilkin@rutgers.edu"],
		"Labor_Hours": 80,
		"Categories": ["matlab", "search", "subset", "granule", "subset"],
		"Languages": [],
		"Software": "Subset datasets using PO.DAAC OpenDAP service - MATLAB code",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:computer storage device",
			"nlp:data management",
			"nlp:data acquisition",
			"nlp:data storage",
			"nlp:symbol",
			"nlp:data retrieval",
			"nlp:data processing",
			"nlp:access control"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-11-01",
		"Description": "PO.DAAC provides access to several MODIS L3 datasets. The MODIS L3 dataset, such as the MODIS Terra Level 3 SST Mid-IR Daily dataset, has no time variable. Therefore it is impossible to aggregate the data files with time. The script creates time variable using NCO utility, and how to aggregate the files.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/modis_time",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["Python", "aggregate", "time", "aggregate"],
		"Languages": [],
		"Software": "PO.DAAC MODIS Level 3 dataset Time Variable Aggregate",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:random variable",
			"nlp:real time operation",
			"nlp:utility",
			"nlp:data management",
			"nlp:time dependence",
			"nlp:time series analysi",
			"nlp:file maintenance (computers)",
			"nlp:random acces",
			"nlp:data base",
			"nlp:access control"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2018-10-01",
		"Description": "This PO.DAAC iPython notebook is focused on retrieving PO.DAAC archived Cyclone Global Navigation Satellite System (CYGNSS) Level 2 data",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/retreive_CYGNSS",
		"NASA Center": "JPL",
		"Contributors": ["Lewis McGibbney", "lewis.j.mcgibbney@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["ipython", "search", "subset", "granule", "subset"],
		"Languages": [],
		"Software": "Retreive PO.DAAC CYGNSS datasets",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:satellite sounding",
			"nlp:satellite-borne photography",
			"nlp:meteorological satellite",
			"nlp:tropical storm",
			"nlp:tropical meteorology",
			"nlp:synchronous satellite",
			"nlp:satellite transmission",
			"nlp:satellite imagery",
			"nlp:satellite observation",
			"nlp:cyclone"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2014-10-01",
		"Description": "This script is a wrapper to PO.DAAC's OPeNDAP subsetting requests, specifically for Group for High Resolution Sea Surface Temperature (GHRSST) Level 4 datasets",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/subset_GHRSST",
		"NASA Center": "JPL",
		"Contributors": ["Ed Armstrong", "edward.m.armstrong@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["python", "opendap", "subset", "granule", "subset"],
		"Languages": [],
		"Software": "Subset PO.DAAC GHRSST datasets",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:temperature distribution",
			"nlp:atmospheric temperature",
			"nlp:temperature gradient",
			"nlp:ocean surface",
			"nlp:water temperature",
			"nlp:temperature measurement",
			"nlp:high resolution",
			"nlp:surface temperature",
			"nlp:sea surface temperature",
			"nlp:sea level"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2015-03-01",
		"Description": "This script combines the PO.DAAC web granule spatial and temporal search service and the OPeNDAP to subset and download most of the Level 3 and Level 4 datasets from PO.DAAC data archive.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/subset_opendap",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["python", "opendap", "subset", "granule", "subset"],
		"Languages": [],
		"Software": "Subset datasets using PO.DAAC OpenDAP service - Python code",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:information dissemination",
			"nlp:tables (data)",
			"nlp:information system",
			"nlp:meteorological service",
			"nlp:sea level",
			"nlp:data processing",
			"nlp:data reduction",
			"nlp:data base"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2016-12-01",
		"Description": "PO.DAAC provides datasets through a service called Webification. Webification (W10n https://podaac-w10n.jpl.nasa.gov/) for science is a very useful tool to subset level 2, level 3 and level 4 data granules, especially for level 2 dataset since there are very limited tools available. But unfortunately the w10n output is in 1d array format which was lumped together from the original 2d matrix. Here we provide the code snippet to reformat the 1d array back to 2d matrix.",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/subset_w10n",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["Python", "json", "html", "subset", "granule", "subset"],
		"Languages": [],
		"Software": "Subset datasets using PO.DAAC W10n service",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:systolic array",
			"nlp:data system",
			"nlp:data management",
			"nlp:matrices (mathematics)",
			"nlp:data acquisition",
			"nlp:matrix theory",
			"nlp:symbol",
			"nlp:data processing",
			"nlp:data base"
		],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "maya@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2017-08-01",
		"Description": "This is a sample code provided by PO.DAAC to read a GeoTIFF File",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/read_geotiff",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["Python", "reader", "geotiff"],
		"Languages": [],
		"Software": "PO.DAAC GeoTIFF Reader",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2016-03-01",
		"Description": "This is a sample code provided by PO.DAAC for reading and writing netCDF file",
		"Public Code Repo": "https://github.com/nasa/podaac_tools_and_services/tree/master/write_netcdf",
		"NASA Center": "JPL",
		"Contributors": ["Yibo Jiang", "yibo.jiang@jpl.nasa.gov"],
		"Labor_Hours": 40,
		"Categories": ["python", "reader", "netcdf"],
		"Languages": [],
		"Software": "PO.DAAC NetCDF Writer",
		"License": ["Apache-2.0"],
		"Categories_NLP": [],
		"External Link": "https://podaac.jpl.nasa.gov",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2019-03-30",
		"Description": "The Internationalization (i18n) Product Retrieval Service is a web service and client providing i18n-type access to products and product metadata contained within NASA JPL's PO.DAAC.",
		"Public Code Repo": "https://github.com/nasa/iPReS",
		"NASA Center": "JPL",
		"Contributors": ["lewis.j.mcgibbney@nasa.gov"],
		"Labor_Hours": 200,
		"Categories": [
			"podaac",
			"internationalization",
			"translation",
			"product-metadata",
			"clojure",
			"machine-translation"
		],
		"Languages": [],
		"Software": "iPReS",
		"License": ["Apache-2.0", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:internet",
			"nlp:data management",
			"nlp:document markup language",
			"nlp:information retrieval",
			"nlp:on-line system",
			"nlp:world wide web",
			"nlp:data retrieval",
			"nlp:query language",
			"nlp:access control"
		],
		"External Link": "https://doi.org/10.5281/zenodo.2617379",
		"creator": "mile@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2022-02-18",
		"Description": "The Periodic Table of Life (PeTaL, pronounced petal) is intended to be a design tool to enable a deeper understanding of natural systems and to enable the creation or improvement of nature-inspired systems. The tool includes an unstructured database, data analytics tools and a web-based user interface. Three levels of information are expected to be captured: morphology that would aid designers by providing context-specific physical design rules, function-morphology relationships to provide nature-inspired solution strategies, and system-level relationships that involve the interaction of several biological models including flow of resources and energy. In its current form, PeTaL is structured as a large NoSQL database that will be accessible to researchers and citizen scientists. It includes entomological and paleontological data from the Cleveland Museum of Natural History (CMNH) in Cleveland, OH, the Cincinnati Museum Center in Cincinnati, OH and the Smithsonian. PeTaL can display relationships between biological models, geography, and environment through maps and plots. These may be used to glean patterns or design rules. Data can also be downloaded for further analysis. A more systematic design process is under development that will allow multiple models to be used for the various stages of design.",
		"Public Code Repo": "https://github.com/nasa-petal/PeTaL",
		"NASA Center": "GRC",
		"Contributors": ["Herb Schilling", "hschilling@nasa.gov", "hschilling"],
		"Labor_Hours": 1000,
		"Categories": [
			"usg-artificial-intelligence",
			"biomimicry",
			"design",
			"tool",
			"webapp",
			"nature-inspired"
		],
		"Languages": [],
		"Software": "PeTaL",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:information system",
			"nlp:data flow analysi",
			"nlp:model",
			"nlp:biodynamic",
			"nlp:human-computer interface",
			"nlp:mathematical model",
			"nlp:software development tool",
			"nlp:data base",
			"nlp:graphical user interface",
			"nlp:information flow"
		],
		"External Link": "https://github.com/nasa-petal/PeTaL",
		"creator": "pablo@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2021-06-11",
		"Description": "WebGS is a web-based ground station for Unmanned Aircraft Systems (UAS) flight visualization and simulation",
		"Public Code Repo": "https://github.com/nasa/webgs",
		"NASA Center": "LaRC",
		"Contributors": [
			"Andrew Peters",
			"andrew.peters@nianet.org",
			"Swee Balachandran",
			"swee.balachandran@nianet.org",
			"Brendan Duffy",
			"brendan.duffy@nianet.org",
			"Paolo Masci",
			"paolo.masci@nianet.org",
			"Cesar Munoz",
			"cesar.a.munoz@nasa.gov"
		],
		"Labor_Hours": 1,
		"Categories": ["Ground Control Station", "MavLINK", "ICAROUS"],
		"Languages": [],
		"Software": "WebGS",
		"License": ["NASA Open Source Agreement"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2019-06-26",
		"Description": "VSCode-PVS is a modern integrated development environment for the Prototype Verification System (PVS). This new environment integrates the editing and proof management functionalities of PVS in Visual Studio Code, a popular code editor widely used by software developers. VSCode-PVS provides functionalities that developers expect to find in modern verification tools, but are not available in the standard Emacs front-end of PVS, such as auto-completion, point-and-click navigation of definitions, live diagnostics for errors, and literate programming.",
		"Public Code Repo": "https://github.com/nasa/vscode-pvs",
		"NASA Center": "NASA Langley Research Center",
		"Contributors": [
			"Paolo Masci",
			"paolo.masci@nianet.org",
			"Cesar Munoz",
			"cesar.a.munoz@nasa.gov",
			"cesaramh"
		],
		"Labor_Hours": 0,
		"Categories": [
			"PVS",
			"InteractiveTheoremProving",
			"IDE",
			"VSCode",
			"VisualStudioCode",
			"VSCodePVS"
		],
		"Languages": [],
		"Software": "VSCode-PVS",
		"License": ["NASA Open Source Agreement"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "YYYY-MM-DD",
		"Description": "CPR* is a formally verified implemenation in C of ADS-B's Compact Position Reporting (CPR) algorithm",
		"Public Code Repo": "https://github.com/nasa/cpr",
		"NASA Center": "NASA Langley Research Center",
		"Contributors": [
			"Aaron Dutle",
			"aaron.m.dutle@nasa.gov",
			"Mariano Moscato",
			"mariano.moscato@nianet.org",
			"Laura Titolo",
			"latura.titolo@nianet.org",
			"Cesar Munoz",
			"cesar.a.munoz@nasa.gov"
		],
		"Labor_Hours": 0,
		"Categories": [
			"Automatic Dependent Surveillance-Broadcast (ADS-B)",
			"Compact Position Reporting (CPR)",
			"Floating-point arithmetic",
			"Fixed-point arithmetic",
			"Prototype Verification System (PVS)"
		],
		"Languages": [],
		"Software": "CPR*",
		"License": ["NASA Open Source Agreement"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-02-18",
		"Description": "This is a flexible LaTeX document template designed to separate content from styling and remove all of the grunt work associated with creating professional documents. Can be used for technical reports as well as public documents such as research papers and conference papers. Includes builtin templates so that all the formatting is handled internally and in turn allows the end user to focus on the more important task of content creation.",
		"Public Code Repo": "https://github.com/nasa/nasa-latex-docs",
		"NASA Center": "JSC",
		"Contributors": ["N/A", "N/A", "walshahi"],
		"Labor_Hours": 944,
		"Categories": [
			"Reports",
			"Documents",
			"NASA",
			"TeX",
			"LaTeX",
			"AIAA",
			"IEEE"
		],
		"Languages": [],
		"Software": "NASA LaTeX Docs",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:computation",
			"nlp:document",
			"nlp:conference",
			"nlp:research management",
			"nlp:military technology",
			"nlp:indexes (documentation)",
			"nlp:information retrieval",
			"nlp:research and development",
			"nlp:data base"
		],
		"External Link": "https://github.com/nasa/nasa-latex-docs",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-02-13",
		"Description": "These repositories are the NASA SUITS challenge data generator and web page that are intended to be run simultaneously. This code simulates vital information MCC would monitor during an EVA such as suit pressure, oxygen consumption rate, and battery capacity and displays this on a custom web page complete with DCU and UIA simulators.\n\nServer: https://github.com/SUITS-teams/BackEnd\nWeb page: https://github.com/SUITS-teams/FrontEnd",
		"Public Code Repo": "https://github.com/SUITS-teams/FrontEnd",
		"NASA Center": "JSC",
		"Contributors": [
			"Dominic Dougherty",
			"dominic.a.dougherty@nasa.gov",
			"N/A",
			"Nohemi Sepulveda",
			"nohemi.m.sepulveda@nasa.gov",
			"N/A",
			"Geraldo Angel Cisneros",
			"geraldo.a.cisneros@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 1000,
		"Categories": [
			"Telemetry",
			"Stream",
			"Telemetry Stream",
			"SUITS",
			"S.U.I.T.S.",
			"TELEMETRY",
			"STREAM",
			"Design Challenge"
		],
		"Languages": [],
		"Software": "SUITS-Telemetry-Stream-Webpage",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://microgravityuniversity.jsc.nasa.gov/nasasuits.cfm",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-02-13",
		"Description": "These repositories are the NASA SUITS challenge data generator and web page that are intended to be run simultaneously. This code simulates vital information MCC would monitor during an EVA such as suit pressure, oxygen consumption rate, and battery capacity and displays this on a custom web page complete with DCU and UIA simulators.\n\nServer: https://github.com/SUITS-teams/BackEnd\nWeb page: https://github.com/SUITS-teams/FrontEnd",
		"Public Code Repo": "https://github.com/SUITS-teams/BackEnd ",
		"NASA Center": "JSC",
		"Contributors": [
			"Nohemi Sepulveda",
			"nohemi.m.sepulveda@nasa.gov",
			"N/A",
			"Dominic Dougherty",
			"dominic.a.dougherty@nasa.gov",
			"N/A",
			"Geraldo Cisneros",
			"geraldo.a.cisneros@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 1000,
		"Categories": [
			"SUITS",
			"STREAM",
			"Telemetry",
			"Stream",
			"Telemetry Stream",
			"S.U.I.T.S.",
			"Design Challenge",
			"TELEMETRY"
		],
		"Languages": [],
		"Software": "SUITS-Telemetry-Stream-Server",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "https://microgravityuniversity.jsc.nasa.gov/nasasuits.cfm",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2020-06-02",
		"Description": "GUNNS combines nodal circuit analysis algorithms with the hydraulic-thermal-electric analogy to allow modeling of flow circuits (fluid, thermal, electrical) with a concise set of generic code. Circuits are drawn up with a Draw.io drawing, from which run-time C++ code is auto-generated that can be built into sims. The GUNNS software includes custom Draw.io shapes for generic physical components like pumps, valves, resistors, & capacitors. These can be connected to each other in the drawing and configured with their characteristic values.",
		"Public Code Repo": "https://github.com/nasa/gunns",
		"NASA Center": "JSC",
		"Contributors": [
			"Dr. Teems Lovett",
			"teems.e.lovett@nasa.gov",
			"N/A",
			"Kevin Supak",
			"kevin.supak@swri.org",
			"N/A",
			"Alex Lin",
			"alexander.s.lin@nasa.gov",
			"alexlin0",
			"Jason Harvey",
			"jason.l.harvey@nasa.gov",
			"jasonlharvey"
		],
		"Labor_Hours": 2000,
		"Categories": [
			"simulation",
			"fluid modeling",
			"electrical modeling",
			"thermal modeling",
			"flow systems"
		],
		"Languages": [],
		"Software": "General-Use Nodal Network Solver (GUNNS)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:circuit",
			"nlp:algorithm",
			"nlp:capacitor",
			"nlp:pump",
			"nlp:network analysi",
			"nlp:time dependence",
			"nlp:resistor",
			"nlp:valve"
		],
		"External Link": "https://github.com/nasa/gunns",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2020-04-09",
		"Description": "Library of classes representing various coordinate systems and providing the transformations between them. Coordinate systems represented are: East-North-Up (ENU), Downrange-Crossrange-Above (DCA), Latitude-Longitude-Altitude (LLA), Earth-Centered-Fixed (ECF), and Azimuth-Elevation-Range (AER).",
		"Public Code Repo": "https://github.com/nasa/Coordinate-systems-class-library",
		"NASA Center": "LaRC",
		"Contributors": [
			"Justin Strickland",
			"justin.k.strickland@nasa.gov",
			"jkstrickland13"
		],
		"Labor_Hours": 40,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing",
			"Modeling and Simulation"
		],
		"Languages": [],
		"Software": "Coordinate-systems-class-library",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:graphs (charts)",
			"nlp:library",
			"nlp:numerical analysi",
			"nlp:dynamical system",
			"nlp:complex system",
			"nlp:computerized simulation",
			"nlp:transformations (mathematics)",
			"nlp:computation"
		],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-05-05",
		"Description": "DELTA (Deep Earth Learning, Training and Analysis) is a toolkit for deep learning on satellite imagery. DELTA allows Earth scientists to apply state of the art machine learning techniques to classify satellite imagery.",
		"Public Code Repo": "https://github.com/nasa/delta",
		"NASA Center": "ARC",
		"Contributors": ["Brian Coltin", "brian.coltin@nasa.gov", "bcoltin"],
		"Labor_Hours": 3000,
		"Categories": [
			"usg-artificial-intelligence",
			"machine learning",
			"remote sensing",
			"satellite imagery",
			"deep learning",
			"tensorflow"
		],
		"Languages": [],
		"Software": "DELTA",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:satellite observation",
			"nlp:meteorological satellite",
			"nlp:satellite imagery",
			"nlp:technology assessment",
			"nlp:satellite-borne photography",
			"nlp:artificial satellite",
			"nlp:earth surface",
			"nlp:remote sensor",
			"nlp:earth (planet)",
			"nlp:education"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-06-02",
		"Description": "GUNNS combines nodal circuit analysis algorithms with the hydraulic-thermal-electric analogy to allow modeling of flow circuits (fluid, thermal, electrical) with a concise set of generic code. Circuits are drawn up with a Draw.io drawing, from which run-time C++ code is auto-generated that can be built into sims. The GUNNS software includes custom Draw.io shapes for generic physical components like pumps, valves, resistors, & capacitors. These can be connected to each other in the drawing and configured with their characteristic values.",
		"Public Code Repo": "https://github.com/nasa/gunns",
		"NASA Center": "JSC",
		"Contributors": [
			"Dr. Teems Lovett",
			"teems.e.lovett@nasa.gov",
			"N/A",
			"Kevin Supak",
			"kevin.supak@swri.org",
			"N/A",
			"Alex Lin",
			"alexander.s.lin@nasa.gov",
			"alexlin0",
			"Jason Harvey",
			"jason.l.harvey@nasa.gov",
			"jasonlharvey"
		],
		"Labor_Hours": 2000,
		"Categories": [
			"simulation",
			"fluid modeling",
			"electrical modeling",
			"thermal modeling",
			"flow systems"
		],
		"Languages": [],
		"Software": "General-Use Nodal Network Solver (GUNNS)",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:circuit",
			"nlp:resistor",
			"nlp:time dependence",
			"nlp:pump",
			"nlp:valve",
			"nlp:algorithm",
			"nlp:network analysi",
			"nlp:capacitor"
		],
		"External Link": "https://github.com/nasa/gunns",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-08-13",
		"Description": "Contains code for training NLP models that takes in text and predicts concepts & keywords from a list of 8000 standardized NASA keywords. Built to be trained on 3 million NASA STI text documents that is mostly abstracts but could take any text for training once put in same format. Predicts work best on text greater than 20 words and less than 2000 words. Code for the API that uses models trained by this repo is in `concept-tagging-api` repository.",
		"Public Code Repo": "https://github.com/nasa/concept-tagging-training",
		"NASA Center": "HQ",
		"Contributors": [
			"N/A",
			"N/A",
			"abuonomo",
			"JustinGOSSES",
			"justin.c.gosses@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 2080,
		"Categories": [
			"usg-artificial-intelligence",
			"nlp",
			"natural-language-processing",
			"training",
			"model-training",
			"machine-learning",
			"text",
			"concepts",
			"keywords",
			"python",
			"topic",
			"keyword",
			"tag",
			"topic"
		],
		"Languages": [],
		"Software": "concept-tagging-training",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:model",
			"nlp:mathematical model",
			"nlp:natural language processing",
			"nlp:computation",
			"nlp:linguistic",
			"nlp:symbol",
			"nlp:error correcting code",
			"nlp:words (language)",
			"nlp:education",
			"nlp:computerized simulation"
		],
		"External Link": "https://github.com/nasa/concept-tagging-training",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-08-13",
		"Description": "Contains code for the API that takes in text and predicts concepts & keywords from a list of standardized NASA keywords. API is for exposing models created with the repository `concept-tagging-training`. An API for exposing models created with concept-tagging-training code project. This project was written about here for the Federal Data Strategy Incubator Project. https://strategy.data.gov/proof-points/2019/05/28/improving-data-access-and-data-management-artificial-intelligence-generated-metadata-tags-at-nasa/",
		"Public Code Repo": "https://github.com/nasa/concept-tagging-api",
		"NASA Center": "HQ",
		"Contributors": [
			"Justin Gosses",
			"justin.c.gosses@nasa.gov",
			"JustinGOSSES",
			"Anthony Buonomo",
			"arb246@georgetown.edu",
			"abuonomo"
		],
		"Labor_Hours": 500,
		"Categories": [
			"usg-artificial-intelligence",
			"nlp",
			"machine-learning",
			"text",
			"api",
			"model",
			"keyword",
			"prediction",
			"natural-language-processing",
			"concept",
			"flask",
			"docker"
		],
		"Languages": [],
		"Software": "concept-tagging-api",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:data structure",
			"nlp:computer assisted instruction",
			"nlp:symbol",
			"nlp:project management",
			"nlp:education",
			"nlp:computerized simulation",
			"nlp:mathematical model",
			"nlp:computation",
			"nlp:error correcting code",
			"nlp:model"
		],
		"External Link": "https://github.com/nasa/concept-tagging-api",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-04-09",
		"Description": "Library of classes representing various coordinate systems and providing the transformations between them. Coordinate systems represented are: East-North-Up (ENU), Downrange-Crossrange-Above (DCA), Latitude-Longitude-Altitude (LLA), Earth-Centered-Fixed (ECF), and Azimuth-Elevation-Range (AER).",
		"Public Code Repo": "https://github.com/nasa/Coordinate-systems-class-library",
		"NASA Center": "LaRC",
		"Contributors": [
			"Justin Strickland",
			"justin.k.strickland@nasa.gov",
			"jkstrickland13"
		],
		"Labor_Hours": 40,
		"Categories": [
			"NASA",
			"LaRC",
			"Open Source",
			"Data and Image Processing",
			"Modeling and Simulation"
		],
		"Languages": [],
		"Software": "Coordinate-systems-class-library",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:complex system",
			"nlp:computation",
			"nlp:library",
			"nlp:numerical analysi",
			"nlp:computerized simulation",
			"nlp:graphs (charts)",
			"nlp:dynamical system",
			"nlp:transformations (mathematics)"
		],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["ian@proyecto.hack"]
	},
	{
		"Update_Date": "2020-05-05",
		"Description": "DELTA (Deep Earth Learning, Training and Analysis) is a toolkit for deep learning on satellite imagery. DELTA allows Earth scientists to apply state of the art machine learning techniques to classify satellite imagery.",
		"Public Code Repo": "https://github.com/nasa/delta",
		"NASA Center": "ARC",
		"Contributors": ["Brian Coltin", "brian.coltin@nasa.gov", "bcoltin"],
		"Labor_Hours": 3000,
		"Categories": [
			"usg-artificial-intelligence",
			"machine learning",
			"remote sensing",
			"satellite imagery",
			"deep learning",
			"tensorflow"
		],
		"Languages": [],
		"Software": "DELTA",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:remote sensor",
			"nlp:satellite observation",
			"nlp:earth (planet)",
			"nlp:earth surface",
			"nlp:artificial satellite",
			"nlp:education",
			"nlp:satellite imagery",
			"nlp:satellite-borne photography",
			"nlp:technology assessment",
			"nlp:meteorological satellite"
		],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-09-24",
		"Description": " In order to successfully meet NASA’s goal of safely returning its 60,000 employees to on-site work in the wake of the COVID-19 global pandemic, the Agency transitioned its paper-based contact tracing and tracking solution to a more thorough, modern and unified application solution. The NASA Contact Tracing and Tracking (CTT) application on the Salesforce platform is aiding the organization in its efforts to trace and contain the spread of COVID-19 at its 14 facilities.",
		"Public Code Repo": "https://github.com/nasa/CTT",
		"NASA Center": "HQ",
		"Contributors": [
			"Vanessa Pao",
			"vanessa.l.pao@nasa.gov",
			"vanessalpao",
			"Madhavi Puli",
			"madhavi.puli@nasa.gov",
			"Madhavipuli",
			"Ramprasad Varri",
			"ramprasad.varri@nasa.gov",
			"varrira",
			"Deepak Chawla",
			"deepak.chawla@nasa.gov",
			"Deepchawla",
			"Babajide Folarin",
			"babajide.a.folarin@nasa.gov",
			"Bfolarin",
			"Rupa Nallani",
			"rupa.c.nallani@nasa.gov",
			"RupaNal",
			"Esteban Duenas",
			"esteban.duenas@nasa.gov",
			"Estey-Sketch",
			"Priyada Mohan",
			"priyada.mohan@nasa.gov",
			"priyadamohan91",
			"Chris Kusek",
			"christopher.j.kusek@nasa.gov",
			"Christopher-JK",
			"John McCardle",
			"john.p.mccardle@nasa.gov",
			"john-mccardle",
			"Chad Collier",
			"charles.t.collier@nasa.gov",
			"chadtcollier"
		],
		"Labor_Hours": 7200,
		"Categories": ["salesforce", "pandemic", "covid-19", "contact tracing"],
		"Languages": [],
		"Software": "CTT",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:tracking (position)",
			"nlp:research facilitie",
			"nlp:contact load",
			"nlp:electric contact",
			"nlp:wake",
			"nlp:problem solving",
			"nlp:turbulent wake"
		],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2020-10-23",
		"Description": "MATLAB software Associated with \"Practical Micromechanics of Composite Materials\" Book.  The intent of the book is to provide both students and practitioners with a solid understanding of micromechanics concepts and theories that can be used in practice and provide their theoretical underpinnings in a clear and concise manner. The power of these theories becomes particularly clear with their application (via the MATLAB\nsoftware suite) in multiscale modeling of composites, herein limited to classical lamination theory.\nThe compilation of scripts and functions enables a user to perform all examples and exercises presented in the Elsevier Book entitled \"Practical Micromechanics of Composite Materials\" by Prof Aboudi, Arnold and Bednarcyk, to be published in\n2021. Developed in MATLAB R2018a.",
		"Public Code Repo": "github.com/nasa/Practical-Micromechanics",
		"NASA Center": "GRC",
		"Contributors": [
			"Steve Arnold",
			"Steven.M.Arnold@nasa.gov",
			"N/A",
			"Jacob Aboudi",
			"aboudi@eng.tau.ac.il",
			"N/A"
		],
		"Labor_Hours": 2000,
		"Categories": [
			"Micromechanics",
			"Thermoelastic",
			"Composite Materials",
			"Effective Properties",
			"Classical Lamination Theory",
			"Mori-Tanaka",
			"Method of Cells",
			"Generalized Method of Cells",
			"High Fidelity Generalized Method of Cells",
			"Failure Criteria",
			"Margin of Safety",
			"Allowables",
			"Thermal Stresses"
		],
		"Languages": [],
		"Software": "Practical Micromechanics",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:structural analysi",
			"nlp:micromechanic",
			"nlp:ceramic matrix composite",
			"nlp:technology utilization",
			"nlp:laminate",
			"nlp:metal matrix composite",
			"nlp:mathematical model",
			"nlp:fiber orientation",
			"nlp:composite material",
			"nlp:structural design"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2020-10-28",
		"Description": "This software package primarily consists of a python based graphical user interface (GUI) which serves as a generic telemetry and telecommand system for any mission that uses core flight systems (cFS) with CCSDS Electronic Data Sheets (EDS) support.  The GUI utilizes python bindings to automatically read all of the information contained in the mission's EDS Library and Core Flight Executive (CFE) Mission Library.\n\nOn the telecommand side this allows instance names, topic names, and subcommand names to be automatically populated in drop-down menus.  Command that require a payload will produce text boxes or drop-down menus for user entry.  Finally, completed commands are packed and sent to the desired core flight instance.\n\nOn the telemetry side, the GUI will continuously listen for messages.  When messages arrive, they are decoded, the contents are displayed to the screen, sorted by topic, and saved internally.  Telemetry messages can be saved to binary files for further processing.\n\nAlso included are several utility python scripts.  Two such scripts perform the command sending and telemetry decoding functionality of the GUI.  The third reads in the saved telemetry data files and converts the messages into a CSV format which can be loaded in an Excel type program.",
		"Public Code Repo": "https://github.com/nasa/cFS-EDS-GroundStation",
		"NASA Center": "GRC",
		"Contributors": [
			"Mathew McCaskey",
			"mathew.j.mccaskey@nasa.gov",
			"mjmccaskey"
		],
		"Labor_Hours": 120,
		"Categories": [
			"cFS",
			"Core Flight System",
			"EDS",
			"Electronic Data Sheets",
			"Telemetry",
			"Telecommand"
		],
		"Languages": [],
		"Software": "cFS-EDS-GroundStation",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:telemetry",
			"nlp:systems analysi",
			"nlp:biomedical data",
			"nlp:message processing",
			"nlp:software development tool",
			"nlp:data processing",
			"nlp:file maintenance (computers)",
			"nlp:electronic equipment"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2021-02-25",
		"Description": "This software library leverages open source scientific computing tools to implement an efficient simulation framework for flight vehicles in Python. Equations of motion are composed in blocks using the SimuPy library, an open source Python alternative to Simulink, and integrated using SciPys wrappers for standard Fortran implementations of ordinary differential equation solvers. Dynamics equations of the inertial state variables for the position, orientation, and their corresponding rates for integration are developed using the SymPy symbolic library and implemented using code generation. Kinematics equations are implemented through symbolic definition and code generation as well as leveraging other open source software that implements useful functions, such as the solutions to the inverse geodesy problem.",
		"Public Code Repo": "https://github.com/nasa/simupy-flight",
		"NASA Center": "ARC",
		"Contributors": [
			"Benjamin Margolis",
			"benjamin.margolis@nasa.gov",
			"sixpearls"
		],
		"Labor_Hours": 120,
		"Categories": ["simulation", "python", "framework"],
		"Languages": [],
		"Software": "SimuPy Flight Vehicle Toolkit",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:computerized simulation",
			"nlp:flight control",
			"nlp:algorithm",
			"nlp:flight simulation",
			"nlp:mathematical model",
			"nlp:model",
			"nlp:kinematic",
			"nlp:simulation"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-04-01",
		"Description": "Provide hyperspectral in situ support for the PACE mission by processing automated, above-water ocean color radiometry using state-of-the-art methods and protocols for quality assurance, uncertainty estimation/propagation, sky/sunglint correction, convolution to satellite wavebands, and ocean color product retrieval. Data output are formatted to text files for submission to the SeaBASS database and saved as comprehensive HDF5 records with automated processing reports. The package is designed to facilitate rigorous, flexible, and transparent data processing for the ocean color remote sensing community, particularly PIs funded by NASA to submit such radiometric data to SeaBASS. Radiometry processed in HyperInSPACE are used for water optical characterization, ocean color product retrieval algorithm development, and orbital platform validation.",
		"Public Code Repo": "https://github.com/nasa/HyperInSPACE",
		"NASA Center": "GSFC",
		"Contributors": [
			"Dirk Aurin",
			"dirk.a.aurin@nasa.gov",
			"oceancolorcoder"
		],
		"Labor_Hours": 3000,
		"Categories": [
			"ocean color",
			"radiometry",
			"remote sensing",
			"validation",
			"algorithm development",
			"glint correction",
			"HyperSAS",
			"SeaBASS"
		],
		"Languages": [],
		"Software": "HyperInSPACE",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:atmospheric correction",
			"nlp:water color",
			"nlp:proving",
			"nlp:data processing",
			"nlp:oceanography",
			"nlp:remote sensing",
			"nlp:algorithm",
			"nlp:ocean",
			"nlp:in situ measurement",
			"nlp:data base"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2021-09-10",
		"Description": "We present the NASA Ames Legacy Mars Global Climate Model for public release. This model uses a modified version of the ARIES/GEOS dynamical core coupled with a set of Mars physics packages to simulate the martian climate. The physics packages include the treatment of surface properties, a ground temperature model, a planetary boundary layer scheme, water and carbon dioxide sublimation/condensation physics, a water ice cloud microphysical scheme, the use of a moment method for tracer transport, a semi-interactive dust tracking scheme, and a two-stream radiative transfer code based on correlated-k’s.",
		"Public Code Repo": "https://github.com/nasa/legacy-mars-global-climate-model",
		"NASA Center": "ARC",
		"Contributors": ["Richard Urata", "richard.a.urata@nasa.gov", "rurata"],
		"Labor_Hours": 80000,
		"Categories": [
			"Mars",
			"atmosphere",
			"global climate model",
			"dust",
			"microphysics",
			"Ames",
			"clouds",
			"GCM"
		],
		"Languages": [],
		"Software": "legacy-mars-global-climate-model",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:carbon dioxide",
			"nlp:ice",
			"nlp:cosmic dust",
			"nlp:numerical analysi",
			"nlp:water",
			"nlp:mathematical model",
			"nlp:surface temperature",
			"nlp:model",
			"nlp:dust",
			"nlp:radiative transfer"
		],
		"External Link": "https://www.nasa.gov/mars-climate-modeling-center-ames",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2021-09-24",
		"Description": "The code repository for earth-imagery-api on https://api.nasa.gov/ . This repository contains a Flask API that provides satellite imagery. It is designed to be very simple and easy to use with minimal functionality and is provided to the public through api.nasa.gov. It focuses on one Earth imagery product, Landsat 8 for those new to coding and API calls.",
		"Public Code Repo": "https://github.com/nasa/earth-imagery-api",
		"NASA Center": "JSC",
		"Contributors": [
			"Justin Gosses",
			"N/A",
			"JustinGOSSES",
			"N/A",
			"N/A",
			"jnbetancourt",
			"N/A",
			"N/A",
			"jasonduley"
		],
		"Labor_Hours": 200,
		"Categories": [
			"earth",
			"earth-imagery",
			"earth-observation",
			"landsat",
			"flask",
			"python",
			"api",
			"google-earth-engine",
			"gee",
			"beginner-friendly",
			"start",
			"satellite",
			"satellite-imagery"
		],
		"Languages": [],
		"Software": "earth-imagery-api",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:satellite imagery",
			"nlp:earth surface",
			"nlp:synchronous satellite",
			"nlp:infrared imagery",
			"nlp:earth (planet)",
			"nlp:satellite-borne photography",
			"nlp:landsat satellite",
			"nlp:imagery",
			"nlp:satellite observation",
			"nlp:meteorological satellite"
		],
		"External Link": "https://github.com/nasa/earth-imagery-api",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-09-23",
		"Description": "The Porous Microstructure Analysis (PuMA) software has been developed to compute effective material properties and perform material response simulations on digitized microstructures of porous media. PuMA is able to import digital three-dimensional images obtained from X-ray microtomography or to generate artificial microstructures that mimic real materials. PuMA also provides a module for interactive 3D visualizations. Version 3 includes modules to compute simple morphological properties such as porosity, volume fractions, pore diameter, and specific surface area. Additional capabilities include the determination of effective thermal and electrical conductivity (both radiative and solid conduction - including the ability to simulate local anisotropy for the latter); effective diffusivity and tortuosity from the continuum to the rarefied regime; techniques to determine the local material orientation, as well as the mechanical properties (elasticity coefficient), and the permeability of a material.",
		"Public Code Repo": "https://github.com/nasa/puma",
		"NASA Center": "ARC",
		"Contributors": [
			"Federico Semeraro",
			"federico.semeraro@nasa.gov",
			"fsemerar"
		],
		"Labor_Hours": 1000,
		"Categories": [
			"computational-physics",
			"tomography",
			"image-processing"
		],
		"Languages": [],
		"Software": "PuMA",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:porous material",
			"nlp:solid",
			"nlp:anisotropy",
			"nlp:mechanical propertie",
			"nlp:thermal conductivity",
			"nlp:microstructure",
			"nlp:conductive heat transfer",
			"nlp:composite material",
			"nlp:porosity",
			"nlp:permeability"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2021-10-08",
		"Description": "This is the code for \"Neural Network Reconstruction of Plasma Space-Time\" by C.Bard and J.Dorelli (DOI: 10.3389/fspas.2021.732275). It is a Physics-Informed Transformer Neural Network which was used to reconstruct one-dimensional (M)HD shocktubes from partial samples. Includes source code, data, and jupyter notebooks for scientific reproduction.",
		"Public Code Repo": "https://github.com/nasa/1d-pinn-reconstruction",
		"NASA Center": "GSFC",
		"Contributors": [
			"Chris Bard",
			"christopher.bard@nasa.gov",
			"heliobard"
		],
		"Labor_Hours": 300,
		"Categories": [
			"usg-artificial-intelligence",
			"Physics-Informed Neural Network",
			"PINN",
			"MHD",
			"Reconstruction",
			"Plasma"
		],
		"Languages": [],
		"Software": "1d-pinn-reconstruction",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:plasma radiation",
			"nlp:plasma generator",
			"nlp:space plasma",
			"nlp:plasma density",
			"nlp:plasma physic",
			"nlp:plasma dynamic",
			"nlp:light source",
			"nlp:neural net",
			"nlp:plasmas (physics)",
			"nlp:space charge"
		],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2021-10-25",
		"Description": "This is the code for \"Neural Network Reconstruction of Plasma Space-Time\" by C. Bard and J. Dorelli (DOI: 10.3389/fspas.2021.732275). It is a Physics-Informed Transformer Neural Network which was used to reconstruct one-dimensional (M)HD shocktubes from partial samples. Includes source code, data, and jupyter notebooks for scientific reproduction.",
		"Public Code Repo": "https://github.com/nasa/1d-pinn-reconstruction",
		"NASA Center": "GSFC",
		"Contributors": [
			"Chris Bard",
			"christopher.bard@nasa.gov",
			"heliobard"
		],
		"Labor_Hours": 400,
		"Categories": [
			"usg-artificial-intelligence",
			"Physics Informed Neural Network",
			"PINN",
			"reconstruction",
			"MHD"
		],
		"Languages": [],
		"Software": "1D PINN Reconstruction",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:plasma radiation",
			"nlp:plasma generator",
			"nlp:space plasma",
			"nlp:plasma density",
			"nlp:plasma physic",
			"nlp:plasma dynamic",
			"nlp:light source",
			"nlp:neural net",
			"nlp:plasmas (physics)",
			"nlp:space charge"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2021-10-08",
		"Description": "This is the code for \"Neural Network Reconstruction of Plasma Space-Time\" by C.Bard and J.Dorelli (DOI: 10.3389/fspas.2021.732275). It is a Physics-Informed Transformer Neural Network which was used to reconstruct one-dimensional (M)HD shocktubes from partial samples. Includes source code, data, and jupyter notebooks for scientific reproduction.",
		"Public Code Repo": "https://github.com/nasa/1d-pinn-reconstruction",
		"NASA Center": "GSFC",
		"Contributors": [
			"Chris Bard",
			"christopher.bard@nasa.gov",
			"heliobard"
		],
		"Labor_Hours": 300,
		"Categories": [
			"usg-artificial-intelligence",
			"Physics-Informed Neural Network",
			"PINN",
			"MHD",
			"Reconstruction",
			"Plasma"
		],
		"Languages": [],
		"Software": "1d-pinn-reconstruction",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:plasma physic",
			"nlp:neural net",
			"nlp:plasma dynamic",
			"nlp:space charge",
			"nlp:plasma generator",
			"nlp:plasma radiation",
			"nlp:space plasma",
			"nlp:light source",
			"nlp:plasmas (physics)",
			"nlp:plasma density"
		],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2021-10-25",
		"Description": "This is the code for \"Neural Network Reconstruction of Plasma Space-Time\" by C. Bard and J. Dorelli (DOI: 10.3389/fspas.2021.732275). It is a Physics-Informed Transformer Neural Network which was used to reconstruct one-dimensional (M)HD shocktubes from partial samples. Includes source code, data, and jupyter notebooks for scientific reproduction.",
		"Public Code Repo": "https://github.com/nasa/1d-pinn-reconstruction",
		"NASA Center": "GSFC",
		"Contributors": [
			"Chris Bard",
			"christopher.bard@nasa.gov",
			"heliobard"
		],
		"Labor_Hours": 400,
		"Categories": [
			"usg-artificial-intelligence",
			"Physics Informed Neural Network",
			"PINN",
			"reconstruction",
			"MHD"
		],
		"Languages": [],
		"Software": "1D PINN Reconstruction",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:plasma physic",
			"nlp:neural net",
			"nlp:plasma dynamic",
			"nlp:space charge",
			"nlp:plasma generator",
			"nlp:plasma radiation",
			"nlp:space plasma",
			"nlp:light source",
			"nlp:plasmas (physics)",
			"nlp:plasma density"
		],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["maya@proyecto.hack"]
	},
	{
		"Update_Date": "2021-11-18",
		"Description": "SALaD (Semi-Automatic Landslide Detection) is a landslide mapping system. SALaD utilizes Object-based Image Analysis and Random Forest to map landslides. It requires optical imagery, a DEM, corner coordinates of a training area, and manually mapped landslides within the training area.",
		"Public Code Repo": "https://github.com/nasa/SALaD",
		"NASA Center": "GSFC",
		"Contributors": [
			"Thomas Stanley",
			"thomas.a.stanley@nasa.gov",
			"thomasastanley",
			"Dalia Kirschbaum",
			"dalia.b.kirschbaum@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 2080,
		"Categories": [
			"usg-artificial-intelligence",
			"Landslides",
			"Object based image analysis"
		],
		"Languages": [],
		"Software": "SALaD",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:image processing",
			"nlp:mapping",
			"nlp:image analysi",
			"nlp:thematic mapping",
			"nlp:imagery",
			"nlp:forest",
			"nlp:imaging technique",
			"nlp:recognition"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack"
		]
	},
	{
		"Update_Date": "2022-02-21",
		"Description": "The Field Campaign eXplorer (FCX) is developed at the Global Hydrometeorology Resource Center (GHRC) to address data exploration needs in portraying the interactive nature of multiple datasets that are obtained in a concerted field campaign.\n\nThe FCX has been built to explore the diverse multi-stream coincident datasets through several field campaigns whose data are managed and archived at GHRC. FCX is a web-based and cloud-native system that visualizes multiple datasets in a time-dynamic, 3-dimensional display with supplemental data analysis. The web-based feature delivers visualization without the requirement of a graphical software system and being cloud-native allows for sharing of the data and visualization.\n\nFCX offers a system for coincident visualization and analysis. Scientific analysis typically requires intercomparisons and cross-references. This enables the investigation of the environment and how individual observations come together to explain the larger whole. FCX offers a means with which to more readily bring together many, often disparate, datasets in a common frame of reference without requiring the user to develop these capabilities. Further, as more data become publicly available in the cloud, FCX’s open source abilities facilitate not only cross-DAAC collaborations but ultimately cross-organization collaborations.",
		"Public Code Repo": "https://github.com/nasa/GHRC-FieldCampaign-eXplorer-UI",
		"NASA Center": "MSFC",
		"Contributors": [
			"Navaneeth Selvaraj",
			"navaneeth.rangaswamyselvaraj@nasa.gov",
			"navaneethrs"
		],
		"Labor_Hours": 2000,
		"Categories": [
			"Javascript",
			"UI",
			"React",
			"Hydrometeorology ",
			"data",
			"fcx"
		],
		"Languages": [],
		"Software": "GHRC-FieldCampaign-eXplorer-UI",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:scientific visualization",
			"nlp:data processing",
			"nlp:clouds (meteorology)",
			"nlp:graphical user interface",
			"nlp:real time operation",
			"nlp:display device",
			"nlp:software development tool",
			"nlp:computer graphic",
			"nlp:world wide web",
			"nlp:interactive control"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2022-02-21",
		"Description": "The Field Campaign eXplorer (FCX) is developed at the Global Hydrometeorology Resource Center (GHRC) to address data exploration needs in portraying the interactive nature of multiple datasets that are obtained in a concerted field campaign.\\n\\nThe FCX has been built to explore the diverse multi-stream coincident datasets through several field campaigns whose data are managed and archived at GHRC. FCX is a web-based and cloud-native system that visualizes multiple datasets in a time-dynamic, 3-dimensional display with supplemental data analysis. The web-based feature delivers visualization without the requirement of a graphical software system and being cloud-native allows for sharing of the data and visualization.\\nFCX offers a system for coincident visualization and analysis. Scientific analysis typically requires intercomparisons and cross-references. This enables the investigation of the environment and how individual observations come together to explain the larger whole. FCX offers a means with which to more readily bring together many, often disparate, datasets in a common frame of reference without requiring the user to develop these capabilities. Further, as more data become publicly available in the cloud, FCX’s open source abilities facilitate not only cross-DAAC collaborations but ultimately cross-organization collaborations.",
		"Public Code Repo": "https://github.com/nasa/GHRC-FieldCampaign-eXplorer-core",
		"NASA Center": "MSFC",
		"Contributors": [
			"Navaneeth Selvaraj",
			"navaneeth.rangaswamyselvaraj@nasa.gov",
			"navaneethrs"
		],
		"Labor_Hours": 2000,
		"Categories": ["Python", "AWS", "Zappa", "Tile Server", "Cesium"],
		"Languages": [],
		"Software": "GHRC-FieldCampaign-eXplorer-core",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:display device",
			"nlp:real time operation",
			"nlp:data processing",
			"nlp:scientific visualization",
			"nlp:software development tool",
			"nlp:graphical user interface",
			"nlp:clouds (meteorology)",
			"nlp:interactive control",
			"nlp:computer graphic",
			"nlp:world wide web"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2023-05-08",
		"Description": "This software was built in python and uses machine learning algorithms to detect severe storm signatures (above anvil cirrus plumes and overshooting tops) in geostationary satellite imagery. The software can be run by providing a configuration file or the software will prompt the user with a series of questions intended to determine the type of model they want to run. The model can be run in a real-time mode or archived run mode. The real-time mode downloads the latest satellite data from the Google Cloud and detects the severe storm signatures in it. The archived run mode detects the severe storm signatures for any user defined date ranges. Right now, the model is only able to detect these severe storm signatures for GOES-16 and GOES-17 satellite data, but we plan to eventually allow for more geostationary satellites.",
		"Public Code Repo": "https://github.com/cooneyj023/svrstormsig",
		"NASA Center": "LaRC",
		"Contributors": [
			"John Cooney",
			"john.w.cooney@nasa.gov",
			"cooneyj023",
			"Kristopher Bedka",
			"kristopher.m.bedka@nasa.gov",
			"N/A",
			"Charles Liles",
			"charles.a.liles@nasa.gov",
			"Charles-Liles"
		],
		"Labor_Hours": 240,
		"Categories": [
			"usg-artificial-intelligence",
			"NASA",
			"LaRC",
			"Open Source",
			"OT",
			"AACP",
			"overshooting-tops",
			"above-anvil-cirrus-plumes",
			"goes-16",
			"goes-17",
			"severe-storm-signatures",
			"geostationary-satellite"
		],
		"Languages": [],
		"Software": "ml-id-severe-storm-signatures",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:time series analysi",
			"nlp:storms (meteorology)",
			"nlp:cirrus cloud",
			"nlp:storm",
			"nlp:software development tool",
			"nlp:file maintenance (computers)",
			"nlp:real time operation",
			"nlp:plume",
			"nlp:algorithm",
			"nlp:mathematical model"
		],
		"External Link": "code.nasa.gov",
		"creator": "ian@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2023-05-11",
		"Description": "Severe weather clouds exhibit distinct patterns in satellite imagery. These patterns, commonly referred to as overshooting cloud tops (OTs) and above anvil cirrus plumes (AACPs), are routinely observed by the human-eye in satellite imagery atop the most intense storms on Earth. With the latest geostationary high spatio-temporal resolution satellite imagers such as, GOES-16 and GOES-17, these severe weather patterns are being observed better than ever before. Advances in deep learning methods allow us to not only detect these signatures but also automate the detection process for real-time applications. Our software code was developed in Python and contains up to 3 model types, U-Net, MultiResU-Net, and AttentionU-Net with varying geostationary satellite channels used as model inputs. The MultiresU-Net model has been found to identify the severe storm signatures better than the other 2 model types and will likely be the only model packaged in the software release. The models' were trained using a large database of OT and AACP patterns identified from human analysts based on 1-minute GOES-16 ABI imagery. In testing, the models have been shown to successfully detect OTs and AACPs with high precision. The software has also successfully been run for real-time and archived applications. The goal of this software is for users to accurately detect these severe storm signatures for a variety of forecast and research applications.",
		"Public Code Repo": "https://github.com/nasa/svrstormsig",
		"NASA Center": "LaRC",
		"Contributors": [
			"John Cooney",
			"john.w.cooney@nasa.gov",
			"cooneyj023",
			"Charles Liles",
			"charles.a.liles@nasa.gov",
			"Charles-Liles",
			"Kristopher Bedka",
			"kristopher.m.bedka@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 480,
		"Categories": [
			"usg-artificial-intelligence",
			"NASA",
			"AACP",
			"OT",
			"severe-storm-signatures",
			"overshooting-top",
			"above-anvil-cirrus-plume",
			"geostationary-satellite",
			"LaRC"
		],
		"Languages": [],
		"Software": "svrstormsig",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:cirrus cloud",
			"nlp:forecasting",
			"nlp:detection",
			"nlp:real time operation",
			"nlp:satellite imagery",
			"nlp:clouds (meteorology)",
			"nlp:meteorological satellite",
			"nlp:storm",
			"nlp:weather forecasting",
			"nlp:plume"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2023-05-18",
		"Description": "The Harmonized Landsat and Sentinel-2 (HLS) project is a NASA initiative and collaboration with USGS to produce compatible surface reflectance data from a virtual constellation of satellite sensors, the Operational Land Imager and Multi-Spectral Instrument, onboard the Landsat and Sentinel-2 remote sensing satellites respectively. The combined measurement enables global land observation every 2-3 days at moderate (30 m) spatial resolution. The HLS data products can be regarded as the building blocks for a data cube so that a user may examine any pixel through time, and treat the near-daily reflectance time series as though it came from a single sensor.",
		"Public Code Repo": "https://github.com/NASA-IMPACT/hls-project",
		"NASA Center": "MSFC",
		"Contributors": [
			"Brian Freitag",
			"brian.m.freitag@nasa.gov",
			"freitagb",
			"Sean Harkins",
			"sean@developmentseed.org",
			"sharkinsspatial",
			"Junchang Ju",
			"junchang.ju@nasa.gov",
			"junchangju"
		],
		"Labor_Hours": 30000,
		"Categories": [
			"Remote Sensing",
			"Image Processing",
			"Land Cover Change",
			"Global Environmental Change"
		],
		"Languages": [],
		"Software": "Harmonized Landsat Sentinel-2",
		"License": ["MIT"],
		"Categories_NLP": [
			"nlp:spectral reflectance",
			"nlp:earth surface",
			"nlp:remote sensing",
			"nlp:high resolution",
			"nlp:satellite constellation",
			"nlp:satellite instrument",
			"nlp:sensor",
			"nlp:earth observations (from space)",
			"nlp:satellite observation",
			"nlp:pixel"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2023-06-22",
		"Description": "earthdata-varinfo is a Python package developed as part of the NASA Earth Observing System Data and Information System (EOSDIS) for parsing Earth Observation science granule structure. earthdata-varinfo extracts relationships between science variables and their associations metadata, such as coordinates. This package also includes the capability to generate Unified Metadata Model Variable (UMM-Var) metadata record that are compatible with the NASA EOSDIS Common Metadata Repository (CMR).\n\nearthdata-varinfo can be installed from PyPI via pip.",
		"Public Code Repo": "https://github.com/nasa/earthdata-varinfo",
		"NASA Center": "GSFC",
		"Contributors": [
			"Owen Littlejohns",
			"owen.m.littlejohns@nasa.gov",
			"owenlittlejohns"
		],
		"Labor_Hours": 100,
		"Categories": [
			"metadata",
			"earth-observation",
			"nasa-eosdis",
			"variable",
			"NetCDF-4"
		],
		"Languages": [],
		"Software": "earthdata-varinfo",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:random variable",
			"nlp:geodetic coordinate",
			"nlp:earth science",
			"nlp:variable star",
			"nlp:truss",
			"nlp:coordinate",
			"nlp:astronomical coordinate",
			"nlp:electronic packaging",
			"nlp:geography",
			"nlp:structural analysi"
		],
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2023-07-24",
		"Description": "Software for processing high-speed video recordings from Unsteady Pressure-Sensitive Paint (UPSP) measurement systems.",
		"Public Code Repo": "https://github.com/nasa/upsp-processing",
		"NASA Center": "ARC",
		"Contributors": [
			"Jessica Powell",
			"jmpowell595@gmail.com",
			"N/A",
			"Marc Shaw-Lecerf",
			"marc.a.shaw-lecerf@nasa.gov",
			"marclecerf",
			"Scott Murman",
			"scott.murman@nasa.gov",
			"N/A",
			"Kenneth Lyons",
			"kenneth.r.lyons@nasa.gov",
			"ixjlyons",
			"David Ellsworth",
			"david.ellsworth@nasa.gov",
			"N/A",
			"Bron Nelson",
			"bron.c.nelson@nasa.gov",
			"N/A",
			"Tim Sandstrom",
			"timothy.a.sandstrom@nasa.gov",
			"N/A",
			"Nicholas Califano",
			"nicholas.w.califano@nasa.gov",
			"N/A",
			"Nettie Roozeboom",
			"nettie.roozeboom@nasa.gov",
			"N/A",
			"David Murakami",
			"david.d.murakami@nasa.gov",
			"N/A",
			"Patrick Moran",
			"patrick.moran@nasa.gov",
			"N/A",
			"Chris Henze",
			"chris.henze@nasa.gov",
			"N/A",
			"Jie Li",
			"jie.li-1@nasa.gov",
			"N/A",
			"Jennifer Baerny",
			"jennifer.baerny@nasa.gov",
			"N/A",
			"E. Lara Lash",
			"elizabeth.l.lash@nasa.gov",
			"N/A",
			"Paul Stremel",
			"paul.m.stremel@nasa.gov",
			"N/A"
		],
		"Labor_Hours": 6000,
		"Categories": [
			"python",
			"macos",
			"linux",
			"opencv",
			"computer-vision",
			"hpc",
			"signal-processing",
			"computer-graphics",
			"OpenMP",
			"MPI",
			"parallel-computing",
			"scientific-computing",
			"turbulence",
			"opencv-python",
			"aeroacoustics",
			"photron",
			"scientific-computing-with-python"
		],
		"Languages": [],
		"Software": "upsp-processing",
		"License": ["NASA Open Source"],
		"Categories_NLP": "",
		"External Link": "https://nasa.github.io/upsp-processing",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2023-09-07",
		"Description": "Compares the structure of netCDF files at the command line and optional writes a report detailing the comparison results.",
		"Public Code Repo": "https://github.com/nasa/ncompare",
		"NASA Center": "LaRC",
		"Contributors": [
			"Daniel Kaufman",
			"daniel.kaufman@nasa.gov",
			"danielfromearth"
		],
		"Labor_Hours": -1,
		"Categories": [
			"data-comparison",
			"netcdf",
			"hierarchical-data",
			"command-line"
		],
		"Languages": [],
		"Software": "ncompare",
		"License": ["NASA Open Source Agreement 1.3"],
		"Categories_NLP": [
			"nlp:line spectra",
			"nlp:transmission line",
			"nlp:on-line system",
			"nlp:command and control",
			"nlp:structural analysi",
			"nlp:comparison"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "mile@proyecto.hack"]
	},
	{
		"Update_Date": "2023-10-10",
		"Description": "The Harmony OPeNDAP SubSetter (HOSS) is a Harmony backend service developed as part of the NASA Earth Observing System Data and Information System (EOSDIS). HOSS offers variable, temporal, spatial (bounding box and polygon) and named-dimension subsetting of gridded (L3 and L4) data. Subset requests are fulfilled by constructing the necessary DAP4 constraint expression and requesting the specified data as a NetCDF-4 file from OPeNDAP.\n\nFor polygon spatial subsets, or bounding box spatial subsets of projection-gridded data, HOSS is combined with the Harmony MaskFill backend service to complete the requested subset. HOSS will first identify a minimally encompassing bounding box in the grid dimensions, and request this from OPeNDAP. The output will be passed to MaskFill, which will apply fill values to those pixels that are within the bounding box, but outside the polygon.",
		"Public Code Repo": "http://github.com/nasa/harmony-opendap-subsetter",
		"NASA Center": "GSFC",
		"Contributors": [
			"Owen Littlejohns",
			"owen.m.littlejohns@nasa.gov",
			"owenlittlejohns",
			"Patrick Quinn",
			"patrick.m.quinn@nasa.gov",
			"bilts",
			"Jay Su",
			"N/A",
			"nasajay",
			"Kevin Beam",
			"kevin.beam@colorado.edu",
			"kbeamnsidc",
			"Chris Durbin",
			"christopher.d.durbin@nasa.gov",
			"chris-durbin",
			"Slav Korolev",
			"vyacheslav.s.korolev@nasa.gov",
			"vskorole"
		],
		"Labor_Hours": 1800,
		"Categories": [
			"nasa-eosdis",
			"earth-observation",
			"variable-subset",
			"temporal-subset",
			"spatial-subset",
			"eosdis-harmony",
			"opendap"
		],
		"Languages": [],
		"Software": "Harmony OPeNDAP SubSetter",
		"License": ["Apache-2.0", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:client server system",
			"nlp:file maintenance (computers)",
			"nlp:tables (data)",
			"nlp:computational grid",
			"nlp:constraint",
			"nlp:data processing",
			"nlp:pixel",
			"nlp:meteorological service",
			"nlp:set theory",
			"nlp:input/output routine"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2023-11-21",
		"Description": "test-plz-delete",
		"Public Code Repo": "https://github.com/nasa/code-nasa-gov",
		"NASA Center": "JSC",
		"Contributors": [
			"daniel rendon",
			"daniel.c.rendon@nasa.gov",
			"dcrendon"
		],
		"Labor_Hours": 1,
		"Categories": ["test", "test2", "test3"],
		"Languages": [],
		"Software": "test-plz-delete",
		"License": ["MIT"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2023-11-21",
		"Description": "test-plz-delete-2",
		"Public Code Repo": "https://github.com/nasa/Open-Source-Catalog",
		"NASA Center": "JSC",
		"Contributors": [
			"daniel rendon",
			"daniel.c.rendon@nasa.gov",
			"dcrendon"
		],
		"Labor_Hours": 1,
		"Categories": ["test1", "test2", "test3"],
		"Languages": [],
		"Software": "test-plz-delete-2",
		"License": ["MIT"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2023-11-27",
		"Description": "test project",
		"Public Code Repo": "https://github.com/nasa/code-nasa-gov",
		"NASA Center": "AFRC",
		"Contributors": [
			"Jeffery Rubio",
			"jeffery.j.rubio@nasa.gov",
			"rubioJeffery"
		],
		"Labor_Hours": 1,
		"Categories": ["usg-artificial-intelligence", "nasa", "tst"],
		"Languages": [],
		"Software": "test-jeff",
		"License": ["Apache-2.0"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack"]
	},
	{
		"Update_Date": "2023-11-29",
		"Description": "test-darith",
		"Public Code Repo": "https://developer.nasa.gov/pages/OpenInnovation/code-submission-app/",
		"NASA Center": "JSC",
		"Contributors": ["Darith", "darith.s.yim@nasa.gov", "darith27"],
		"Labor_Hours": 1000,
		"Categories": ["test1", "test2", "test3"],
		"Languages": [],
		"Software": "test-darith",
		"License": ["NASA Open Source"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "ian@proyecto.hack"]
	},
	{
		"Update_Date": "2023-11-29",
		"Description": "test-tessa",
		"Public Code Repo": "https://github.com/nasa/code-nasa-gov",
		"NASA Center": "JSC",
		"Contributors": ["tessa brazda", "tessa.m.brazda@nasa.gov", "darith27"],
		"Labor_Hours": 3,
		"Categories": ["test1", "test2", "test3"],
		"Languages": [],
		"Software": "test-tessa",
		"License": ["NASA Open Source"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2023-11-29",
		"Description": "test-Alison-description",
		"Public Code Repo": "https://developer.nasa.gov/pages/OpenInnovation/code-submission-app/",
		"NASA Center": "JSC",
		"Contributors": ["N/A", "N/A", "ahall"],
		"Labor_Hours": 1,
		"Categories": ["test1 test2 test3", "test 2", "test 3"],
		"Languages": [],
		"Software": "test-Alison",
		"License": ["EPL"],
		"Categories_NLP": "",
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack"]
	},
	{
		"Update_Date": "2024-01-05",
		"Description": "The Harmony Swath Projector repository contains the source code and Docker images for a Harmony (harmony.earthdata.nasa.gov) backend service, which will project L2 swath data into a specified regular grid. This service was developed as part of the NASA EOSDIS Evolution and Development (EED) contract.",
		"Public Code Repo": "https://github.com/nasa/harmony-swath-projector",
		"NASA Center": "GSFC",
		"Contributors": [
			"Owen Littlejohns",
			"owen.m.littlejohns@nasa.gov",
			"owenlittlejohns",
			"David Auty",
			"david.p.auty@nasa.gov",
			"autydp",
			"Patrick Quinn",
			"patrick.m.quinn@nasa.gov",
			"bilts",
			"Kevin Beam",
			"kevin.beam@colorado.edu",
			"kbeamnsidc",
			"Chris Durbin",
			"christopher.d.durbin@nasa.gov",
			"chris-durbin",
			"Slav Korolev",
			"vyacheslav.s.korolev@nasa.gov",
			"vskorole"
		],
		"Labor_Hours": 500,
		"Categories": [
			"reprojection",
			"earthdata",
			"swath",
			"NetCDF-4",
			"netcdf",
			"L2"
		],
		"Languages": [],
		"Software": "nasa/harmony-swath-projector",
		"License": ["Apache-2.0", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:ion source",
			"nlp:binary code",
			"nlp:neutron source",
			"nlp:x ray source",
			"nlp:signal encoding",
			"nlp:radiation source",
			"nlp:computational grid",
			"nlp:image processing",
			"nlp:light source",
			"nlp:image"
		],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": ["pablo@proyecto.hack", "maya@proyecto.hack"]
	},
	{
		"Update_Date": "2024-01-17",
		"Description": "test just updated",
		"Public Code Repo": "github.com/code",
		"NASA Center": "JSC",
		"Contributors": [
			"Tessa Brazda",
			"tessa.m.brazda@nasa.gov",
			"tessa.brazda"
		],
		"Labor_Hours": 5,
		"Categories": ["test1", "test2", "test3"],
		"Languages": [],
		"Software": "Tessa test",
		"License": ["NASA Open Source"],
		"Categories_NLP": [],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"mile@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2024-02-07",
		"Description": "The Harmony Browse Image Generator (HyBIG) is a Harmony backend service developed as part of the NASA Earth Observing System Data and Information System (EOSDIS). HyBIG offers reformatting of GeoTIFF data files into browse imagery that is compatible with the NASA Global Imagery Browse Services (GIBS). GIBS imagery is used to power NASA tools such as Worldview (https://worldview.earthdata.nasa.gov).",
		"Public Code Repo": "https://github.com/nasa/harmony-browse-image-generator",
		"NASA Center": "GSFC",
		"Contributors": [
			"Owen Littlejohns",
			"owen.m.littlejohns@nasa.gov",
			"owenlittlejohns",
			"Matthew Savoie",
			"matthew.savoie@",
			"flamingbear"
		],
		"Labor_Hours": 100,
		"Categories": [
			"eosdis-harmony",
			"browse-imagery",
			"gibs",
			"global-imagery-browse-service",
			"reformatting"
		],
		"Languages": [],
		"Software": "Harmony Browse Image Generator (HyBIG)",
		"License": ["Apache-2.0", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:satellite-borne photography",
			"nlp:radar imagery",
			"nlp:image",
			"nlp:imaging technique",
			"nlp:file maintenance (computers)",
			"nlp:image analysi",
			"nlp:image processing",
			"nlp:imagery",
			"nlp:video data",
			"nlp:image enhancement"
		],
		"External Link": "",
		"creator": "mile@proyecto.hack",
		"collaborators": [
			"pablo@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2024-04-26",
		"Description": "The Harmony Regridding Service is a Harmony (harmony.earthdata.nasa.gov) backend service developed as part of the NASA Earth Observing System Data and Information System (EOSDIS). This service offers regridding of gridded (L3 or L4) Earth Science data. The repository contains source code and CI/CD which is used to create a Docker image for use in Harmony. This Docker image is hosted as a repository package.",
		"Public Code Repo": "https://github.com/nasa/harmony-regridding-service",
		"NASA Center": "GSFC",
		"Contributors": [
			"Owen Littlejohns",
			"owen.m.littlejohns@nasa.gov",
			"owenlittlejohns",
			"Matthew Savoie",
			"matthew.savoie@colorado.edu",
			"flamingbear"
		],
		"Labor_Hours": 100,
		"Categories": ["eosdis-harmony", "regridding", "reprojection"],
		"Languages": [],
		"Software": "Harmony Regridding Service",
		"License": ["Apache-2.0", "NASA Open Source"],
		"Categories_NLP": [
			"nlp:ion source",
			"nlp:signal encoding",
			"nlp:binary code",
			"nlp:meteorological service",
			"nlp:image analysi",
			"nlp:radiation source",
			"nlp:image",
			"nlp:image processing",
			"nlp:x ray source",
			"nlp:light source"
		],
		"External Link": "",
		"creator": "ian@proyecto.hack",
		"collaborators": []
	},
	{
		"Update_Date": "2024-05-22",
		"Description": "The generic Urban Air Mobility (GUAM) github repository is a NASA created Matlab®/Simulink® simulation whose focus is to provide access for the Urban Air Mobility (UAM) and Advanced Air Mobility (AAM) research communities to a complete six degree-of-freedom, non-linear, single rigid-body simulation architecture to facilitate perception, control and machine learning research focused on autonomous flight of novel aircraft configurations.  The release of this simulation framework is intended to overcome barriers to collaboration and exchange within the eVTOL autonomous flight research community.\nAdditionally, the GUAM simulation is the basis for collaboration/comparison of a series of Challenge Problems posed to the autonomous flight research community.  These problem series are sets of increasing difficult autonomous flight tasks (e.g., trajectory tracking, stationary obstacle avoidance, moving intruder avoidance, vehicle control effector failure detection and mitigation).  The challenge problems will be a rolling set of challenges including performance assessment metrics, which allows researchers to baseline and assess the state of the art in autonomous transition vehicle flight using common vehicles and simulation framework.\n",
		"Public Code Repo": "https://github.com/nasa/Generic-Urban-Air-Mobility-GUAM",
		"NASA Center": "LaRC",
		"Contributors": [
			"Michael Acheson",
			"michael.j.acheson@nasa.gov",
			"macheson1"
		],
		"Labor_Hours": 4000,
		"Categories": [
			"Autonomous Flight",
			"Urban Air Mobility",
			"Advanced Air Mobility",
			"eVTOL"
		],
		"Languages": [],
		"Software": "Generic-Urban-Air-Mobility-GUAM",
		"License": ["NASA Open Source"],
		"Categories_NLP": [
			"nlp:degrees of freedom",
			"nlp:learning",
			"nlp:simulation",
			"nlp:trajectory",
			"nlp:machine learning",
			"nlp:flight simulation",
			"nlp:autonomous navigation",
			"nlp:autonomy",
			"nlp:manual control",
			"nlp:aircraft control"
		],
		"External Link": "https://nari.arc.nasa.gov/ttt-ram/community",
		"creator": "pablo@proyecto.hack",
		"collaborators": [
			"mile@proyecto.hack",
			"maya@proyecto.hack",
			"ian@proyecto.hack"
		]
	},
	{
		"Update_Date": "2024-07-22",
		"Description": "PyLOT is a command line utility that was written to help DAAC operators in working with the Cumulus discovery and ingest stack. There are some issues that can be difficult to resolve using only the Cumulus dashboard or existing tools, so this was written to be an expandable and sharable tool. It has a plugin for the Cumulus API and a few other plugins for querying the Cumulus RDS cluster and OpenSearch that are available once deployed.",
		"Public Code Repo": "https://github.com/nasa/GHRC-PyLOT",
		"NASA Center": "MSFC",
		"Contributors": [
			"Michael Hall",
			"michael.l.hall@nasa.gov",
			"Michaellh0080"
		],
		"Labor_Hours": 300,
		"Categories": ["python"],
		"Languages": [],
		"Software": "GHRC-PyLOT",
		"License": ["Apache-2.0"],
		"Categories_NLP": [
			"nlp:transmission line",
			"nlp:software development tool",
			"nlp:operators (mathematics)",
			"nlp:on-line system",
			"nlp:line spectra",
			"nlp:computer systems performance",
			"nlp:lines of force",
			"nlp:theorem proving",
			"nlp:utility",
			"nlp:command and control"
		],
		"External Link": "",
		"creator": "maya@proyecto.hack",
		"collaborators": ["mile@proyecto.hack", "ian@proyecto.hack"]
	}
]
